From patchwork Tue Dec  1 00:45:35 2020
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-Patchwork-Submitter: Ashish Kalra <Ashish.Kalra@amd.com>
X-Patchwork-Id: 11941711
Return-Path: <kvm-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-16.8 required=3.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,HEADER_FROM_DIFFERENT_DOMAINS,INCLUDES_CR_TRAILER,INCLUDES_PATCH,
	MAILING_LIST_MULTI,MSGID_FROM_MTA_HEADER,SPF_HELO_NONE,SPF_PASS,URIBL_BLOCKED,
	USER_AGENT_GIT autolearn=unavailable autolearn_force=no version=3.4.0
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 60DC5C64E90
	for <kvm@archiver.kernel.org>; Tue,  1 Dec 2020 00:47:41 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by mail.kernel.org (Postfix) with ESMTP id 1752E20809
	for <kvm@archiver.kernel.org>; Tue,  1 Dec 2020 00:47:41 +0000 (UTC)
Authentication-Results: mail.kernel.org;
	dkim=pass (1024-bit key) header.d=amdcloud.onmicrosoft.com
 header.i=@amdcloud.onmicrosoft.com header.b="ACpLDEq+"
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1730939AbgLAArJ (ORCPT <rfc822;kvm@archiver.kernel.org>);
        Mon, 30 Nov 2020 19:47:09 -0500
Received: from mail-bn8nam12on2071.outbound.protection.outlook.com
 ([40.107.237.71]:20033
        "EHLO NAM12-BN8-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1726316AbgLAArI (ORCPT <rfc822;kvm@vger.kernel.org>);
        Mon, 30 Nov 2020 19:47:08 -0500
ARC-Seal: i=1; a=rsa-sha256; s=arcselector9901; d=microsoft.com; cv=none;
 b=QAdQ4wqLarmUB/jtW4hu4fAn/yoPMUCSAPguKo2pQbM0Am2X7TPykhPY+57gvZRYvxP+qsbBCYIxCSPraqYoe321bR2THIiK58bzLHsbXZ/mD3xebV/mQyQCljs5Ex5OC0SEiEW85dzgLywtH5DD+vP0fHHVuqpv8OB0h4+j/+yRx4U7vy+jPJYIRYF/Uv6xX6Zd5+L605va3VKasTYUm66TH5q2hCfeXURll+3m72EnBBe60qceGiLzrsSjWhJEaOmZWF7xET897DValooavUJTArC0S/Id7MkJQqqiFV/FvyWYVhIfIEZiEGatnuQ6b68y3tAhVpIAF7Zpl8i2oA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector9901;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=djYOIZIAe+UUpzeBZtr/RMxOzG5cL+NruPXwZsscQuI=;
 b=Sh1wW+KUQpAU0eOUUEo9DGxv066uQJ1i7ne8mAxPl3UNLMvaPpqvgZJ+zj92B3FjWH2YWsZVOBOQoz0nP8jrDYVGXKLE2JJg6r85N0ccIlkJOr/37iIOml8EPcrPjOxR0PxPeBnBfZ8byI8Cqi1e8h8pLC4FZfUi9ZvmjOfWUSXO3koCm9THKa3qclvUsIuB0huLtNdBr2MIfJxY16+iHJonpOSQttejG24WH3mireQSo2sEkouPZrjrP7Dt5wmBvPcL9O6FzpBqh4gSOWvsTPYDQPCUf47gYKeuNVFnyFKxuYf6BR83j8SAYrH502S+5mdlvxtoLu62F6BBsm4vfA==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=amdcloud.onmicrosoft.com; s=selector2-amdcloud-onmicrosoft-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=djYOIZIAe+UUpzeBZtr/RMxOzG5cL+NruPXwZsscQuI=;
 b=ACpLDEq+C++jhDTgzdp2Dldz5hJ5VJClvuC1ylXbZ9yejnW9olbiFpnVccgLCXO+FRi9kQymfSlFZAxZLV+Hq0THEt1f9r09en9TYsAhlkizZQmbYhD3YSLLlxDoRA0yPM1bkOx2A+J1SpjPlxHoKSTWADn/W3za6mQbQdvx0h8=
Authentication-Results: redhat.com; dkim=none (message not signed)
 header.d=none;redhat.com; dmarc=none action=none header.from=amd.com;
Received: from SN6PR12MB2767.namprd12.prod.outlook.com (2603:10b6:805:75::23)
 by SA0PR12MB4573.namprd12.prod.outlook.com (2603:10b6:806:9c::24) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.3611.22; Tue, 1 Dec
 2020 00:46:14 +0000
Received: from SN6PR12MB2767.namprd12.prod.outlook.com
 ([fe80::d8f2:fde4:5e1d:afec]) by SN6PR12MB2767.namprd12.prod.outlook.com
 ([fe80::d8f2:fde4:5e1d:afec%3]) with mapi id 15.20.3611.025; Tue, 1 Dec 2020
 00:46:14 +0000
From: Ashish Kalra <Ashish.Kalra@amd.com>
To: pbonzini@redhat.com
Cc: tglx@linutronix.de, mingo@redhat.com, hpa@zytor.com,
        joro@8bytes.org, bp@suse.de, thomas.lendacky@amd.com,
        x86@kernel.org, kvm@vger.kernel.org, linux-kernel@vger.kernel.org,
        srutherford@google.com, brijesh.singh@amd.com,
        dovmurik@linux.vnet.ibm.com, tobin@ibm.com, jejb@linux.ibm.com,
        frankeh@us.ibm.com, dgilbert@redhat.com
Subject: [PATCH v2 1/9] KVM: x86: Add AMD SEV specific Hypercall3
Date: Tue,  1 Dec 2020 00:45:35 +0000
Message-Id: 
 <b6bc54ed6c8ae4444f3acf1ed4386010783ad386.1606782580.git.ashish.kalra@amd.com>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <cover.1606782580.git.ashish.kalra@amd.com>
References: <cover.1606782580.git.ashish.kalra@amd.com>
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: DS7PR03CA0097.namprd03.prod.outlook.com
 (2603:10b6:5:3b7::12) To SN6PR12MB2767.namprd12.prod.outlook.com
 (2603:10b6:805:75::23)
MIME-Version: 1.0
X-MS-Exchange-MessageSentRepresentingType: 1
Received: from ashkalra_ubuntu_server.amd.com (165.204.77.1) by
 DS7PR03CA0097.namprd03.prod.outlook.com (2603:10b6:5:3b7::12) with Microsoft
 SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.3611.26 via Frontend
 Transport; Tue, 1 Dec 2020 00:46:13 +0000
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-HT: Tenant
X-MS-Office365-Filtering-Correlation-Id: b89d85f9-4c4d-45fa-8986-08d89592818e
X-MS-TrafficTypeDiagnostic: SA0PR12MB4573:
X-MS-Exchange-Transport-Forked: True
X-Microsoft-Antispam-PRVS: 
 <SA0PR12MB4573AA64664736C04FC65E188EF40@SA0PR12MB4573.namprd12.prod.outlook.com>
X-MS-Oob-TLC-OOBClassifiers: OLM:3513;
X-MS-Exchange-SenderADCheck: 1
X-Microsoft-Antispam: BCL:0;
X-Microsoft-Antispam-Message-Info: 
 M+8tDGhh/qisGQzsVHvLuLkCd9GVg8ycvrmtM0HoUZwLTHx2TMjSJPvXtusS3dbTnQ/RjbmX5XcT8PRZOE3eJ/I4F/E3hH2L5QFjC+Z9tx6biQ3mc93b+mHWEZT4Nb9WWOjvji4rW6inj8qWUPSWh0EEayb8LI9JyNQyuzc273il+x4soOB2l91FmTL8WXF7eBQIZouiITvyDo6unbZ0oRGyVL9GG8V0SAUzgBmVRkEwQmLzNpBGxLRk46Wb1ca3Llk3W/jg2VLd5y6tVqFPr0ToDTCb7R8vMlWJFWMqaELNY0uIjMoTwHFpH+/NnzuBwexEx3oveHmVT27M0llw4A==
X-Forefront-Antispam-Report: 
 CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:SN6PR12MB2767.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(4636009)(366004)(346002)(376002)(136003)(396003)(39860400002)(478600001)(6486002)(7696005)(316002)(4326008)(956004)(6666004)(8676002)(186003)(16526019)(8936002)(52116002)(66946007)(5660300002)(7416002)(2616005)(86362001)(26005)(2906002)(36756003)(66556008)(6916009)(66476007);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData: =?utf-8?q?PsA3PFI3dSg5v54/I0lW6nKo5SoaTk?=
	=?utf-8?q?L6hHqX4BnpZ39vzJMzOVp8UIczHADLmS+AJQRFj/BChZVqGegtYJK/aZNh0AAhqqj?=
	=?utf-8?q?iruvY1aenZXA5Irfs0tiiD3q9KJtQVDjGcDJdWNynn17zaFWVNWsWnXzWKRxGMsHb?=
	=?utf-8?q?8HeGT+gbaC7sldMXkvFX/aaMD1FmSlmQ3lxG8wJGxeOPCvMIHppt1OpQ3RKUngEM0?=
	=?utf-8?q?j900felB9Wn2iee90TJ+F0PRz2JMcmVJGL3RSPmvrV3T+CYMAss1ACSCcgIqs9vK0?=
	=?utf-8?q?wcuYHE6aUbv2sEzx/7ZYpspOnkEogFnJ/yRArzZcfuOG9atmXaXwJj64S8hjDcoMr?=
	=?utf-8?q?BGZoeKS3o2aKPGiGlzUD9o9Zgx3S4F0mTSzLqM8jVZjUj5IgusFXo8k+sRsGPnYvk?=
	=?utf-8?q?0Y/+XTTvu9xCV8ZhbMYXQylr3+Lv7CmPSA0NKsStBnoGMPuI5RaFeFGKw6Wm6jQy3?=
	=?utf-8?q?tm9Z0n66pWcK2RNisJ1+a1iH78byyUZ73KNAkjIjSc/VT8Vro/60YiGLJUgVDHYra?=
	=?utf-8?q?3XqDKCNkcp8mEeQ02XPSpVUlWCZKJ+XNkd3R7krDVuSkVEHQLOWMCtv09g0DblGsX?=
	=?utf-8?q?1Pppzvb859LgQ9hu+8GqWUvqN+91oiH0Ew7rst+RpqJ2zd8vN5jwOYaLfIlugN4mU?=
	=?utf-8?q?Z6lfpUckknUHdcN6WFlhBjzC8J9EJMb7PAtqtQCBmG2ljJGjktJeaVeWR+zxBnTll?=
	=?utf-8?q?1Gso27IVPwpr1dkXDdI5KDynYl+pmn9FISt6FyclnsyinCTiN7MUHKSIvUjcQQA+7?=
	=?utf-8?q?zdc3Vb3DhFr/uF4iHaH7qE2NyxizXbV1C7UmAGNdMDOnE9fKNGzwTSHyO2PUN8Pdf?=
	=?utf-8?q?mh5peJjlHIndCAqJ9DbyZW9vKBjKP8nD6miEEfvpL5g8fi7BwOv1vu9WnPD166Af7?=
	=?utf-8?q?eTjUrkJ8rzhBXi1zJE9xmak8lPYm35FNr+lnvy9aq38CkNOOO3qzfgE1BhObFBua1?=
	=?utf-8?q?0h9LOVEsI2JPHHmLZ3/?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 b89d85f9-4c4d-45fa-8986-08d89592818e
X-MS-Exchange-CrossTenant-AuthSource: SN6PR12MB2767.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 01 Dec 2020 00:46:14.5910
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: 
 PVWFKuADWpkSrv7Xba8xSEOA9Cix+/6Q7ELMttiaS/3GYG64dARwPt5kh5Cn+vXbQwx0ISuRpSWFudmVtbie1Q==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: SA0PR12MB4573
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

From: Brijesh Singh <brijesh.singh@amd.com>

KVM hypercall framework relies on alternative framework to patch the
VMCALL -> VMMCALL on AMD platform. If a hypercall is made before
apply_alternative() is called then it defaults to VMCALL. The approach
works fine on non SEV guest. A VMCALL would causes #UD, and hypervisor
will be able to decode the instruction and do the right things. But
when SEV is active, guest memory is encrypted with guest key and
hypervisor will not be able to decode the instruction bytes.

Add SEV specific hypercall3, it unconditionally uses VMMCALL. The hypercall
will be used by the SEV guest to notify encrypted pages to the hypervisor.

Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Ingo Molnar <mingo@redhat.com>
Cc: "H. Peter Anvin" <hpa@zytor.com>
Cc: Paolo Bonzini <pbonzini@redhat.com>
Cc: "Radim Krčmář" <rkrcmar@redhat.com>
Cc: Joerg Roedel <joro@8bytes.org>
Cc: Borislav Petkov <bp@suse.de>
Cc: Tom Lendacky <thomas.lendacky@amd.com>
Cc: x86@kernel.org
Cc: kvm@vger.kernel.org
Cc: linux-kernel@vger.kernel.org
Reviewed-by: Steve Rutherford <srutherford@google.com>
Reviewed-by: Venu Busireddy <venu.busireddy@oracle.com>
Signed-off-by: Brijesh Singh <brijesh.singh@amd.com>
Signed-off-by: Ashish Kalra <ashish.kalra@amd.com>
---
 arch/x86/include/asm/kvm_para.h | 12 ++++++++++++
 1 file changed, 12 insertions(+)

diff --git a/arch/x86/include/asm/kvm_para.h b/arch/x86/include/asm/kvm_para.h
index 338119852512..bc1b11d057fc 100644
--- a/arch/x86/include/asm/kvm_para.h
+++ b/arch/x86/include/asm/kvm_para.h
@@ -85,6 +85,18 @@ static inline long kvm_hypercall4(unsigned int nr, unsigned long p1,
 	return ret;
 }
 
+static inline long kvm_sev_hypercall3(unsigned int nr, unsigned long p1,
+				      unsigned long p2, unsigned long p3)
+{
+	long ret;
+
+	asm volatile("vmmcall"
+		     : "=a"(ret)
+		     : "a"(nr), "b"(p1), "c"(p2), "d"(p3)
+		     : "memory");
+	return ret;
+}
+
 #ifdef CONFIG_KVM_GUEST
 bool kvm_para_available(void);
 unsigned int kvm_arch_para_features(void);

From patchwork Tue Dec  1 00:46:20 2020
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-Patchwork-Submitter: Ashish Kalra <Ashish.Kalra@amd.com>
X-Patchwork-Id: 11941713
Return-Path: <kvm-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-16.8 required=3.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,HEADER_FROM_DIFFERENT_DOMAINS,INCLUDES_CR_TRAILER,INCLUDES_PATCH,
	MAILING_LIST_MULTI,MSGID_FROM_MTA_HEADER,SPF_HELO_NONE,SPF_PASS,URIBL_BLOCKED,
	USER_AGENT_GIT autolearn=unavailable autolearn_force=no version=3.4.0
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
	by smtp.lore.kernel.org (Postfix) with ESMTP id B1582C71155
	for <kvm@archiver.kernel.org>; Tue,  1 Dec 2020 00:47:41 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by mail.kernel.org (Postfix) with ESMTP id 6B4C720809
	for <kvm@archiver.kernel.org>; Tue,  1 Dec 2020 00:47:41 +0000 (UTC)
Authentication-Results: mail.kernel.org;
	dkim=pass (1024-bit key) header.d=amdcloud.onmicrosoft.com
 header.i=@amdcloud.onmicrosoft.com header.b="zlC+Z0d4"
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2389120AbgLAArb (ORCPT <rfc822;kvm@archiver.kernel.org>);
        Mon, 30 Nov 2020 19:47:31 -0500
Received: from mail-bn8nam12on2071.outbound.protection.outlook.com
 ([40.107.237.71]:20033
        "EHLO NAM12-BN8-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1729483AbgLAAra (ORCPT <rfc822;kvm@vger.kernel.org>);
        Mon, 30 Nov 2020 19:47:30 -0500
ARC-Seal: i=1; a=rsa-sha256; s=arcselector9901; d=microsoft.com; cv=none;
 b=LXVZ1NJFH4Io9XRzdABUCCEtCrWJbf5sD+Fi5ssfsV0sUZXK/3bIljhy5Bwr3Fuuy7f4kaJkN6j1SUMCK9XGOZMDG/ajS2XZGzXljTTmSgFzPEAJQF6TVL2lC/5cREG9m/+uj4fxKUIT/69jHS735L8bYAdB14mlS6u6bR94u6/LxljMWlnzhNYD0lx7Q5R5pWm2ZRpzZlip7sgpoAoLpFAwNMUe/yIJ6rtBquzkAZOx6RF+XCSK0mDQpgrDdOe6L1WX+lq5d2vfOO3+exejByWYIu4sCnn6RuiMpMvELDDtRHM5c3D9JRJDajS3gMLNe8b8rBHhjvy9koY5Jm94Iw==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector9901;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=ifQSUw6m5ce3Ns1/AZJ87k4sULco/sqI2cNQoGJCFIk=;
 b=dzwiLTKWtXYkmXHfEo9O/OFVt7ANNNwJKo6DVnGJJhvwmQB/0TDYOCZxrfxkdPo5UnX2c1LsY9VwkMIV7NxwVZQi0xgnkLGVjxzjI0V5ir9ESDWYaGtUO7My8/44PXnVmlGJTLXMmN+CXqL1WzoiYDXB1QOi7GWY+fkw5YyjFNiZJZ9z9U9ObcuGOPgm4CAuATLkKEFoqi3/hkmY9K5h5kV/yw3eYr3gWG1Akj7DkpM+AXtv5pOHCZLjMetAhXu74bzpw/JlNu75ZnoBG3yzvzDqQCRyXWOkqLCT2/NKU5KZDkOG3KqhGi85DSzUmjPCVzCxa9dFa7YplF6UvRGv0A==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=amdcloud.onmicrosoft.com; s=selector2-amdcloud-onmicrosoft-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=ifQSUw6m5ce3Ns1/AZJ87k4sULco/sqI2cNQoGJCFIk=;
 b=zlC+Z0d4zIBO2MFPy2wQv8ZecviZwy2nBDXSjtO+6AO8SvddhA4a1kKRRe2bjKULcHX7fmZy6dZoTnB3ZA6/59CfGINpdm1o0DE9QCY96eepF70R2g09eoEU2D+3QBKtOGGkoscEdWSf4iEKe9AvNnGLYbpliXF25bZzntRbW3Y=
Authentication-Results: redhat.com; dkim=none (message not signed)
 header.d=none;redhat.com; dmarc=none action=none header.from=amd.com;
Received: from SN6PR12MB2767.namprd12.prod.outlook.com (2603:10b6:805:75::23)
 by SA0PR12MB4573.namprd12.prod.outlook.com (2603:10b6:806:9c::24) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.3611.22; Tue, 1 Dec
 2020 00:46:56 +0000
Received: from SN6PR12MB2767.namprd12.prod.outlook.com
 ([fe80::d8f2:fde4:5e1d:afec]) by SN6PR12MB2767.namprd12.prod.outlook.com
 ([fe80::d8f2:fde4:5e1d:afec%3]) with mapi id 15.20.3611.025; Tue, 1 Dec 2020
 00:46:56 +0000
From: Ashish Kalra <Ashish.Kalra@amd.com>
To: pbonzini@redhat.com
Cc: tglx@linutronix.de, mingo@redhat.com, hpa@zytor.com,
        joro@8bytes.org, bp@suse.de, thomas.lendacky@amd.com,
        x86@kernel.org, kvm@vger.kernel.org, linux-kernel@vger.kernel.org,
        srutherford@google.com, brijesh.singh@amd.com,
        dovmurik@linux.vnet.ibm.com, tobin@ibm.com, jejb@linux.ibm.com,
        frankeh@us.ibm.com, dgilbert@redhat.com
Subject: [PATCH v2 2/9] KVM: X86: Introduce KVM_HC_PAGE_ENC_STATUS hypercall
Date: Tue,  1 Dec 2020 00:46:20 +0000
Message-Id: 
 <40acca4b49cd904ea73038309908151508fb555c.1606782580.git.ashish.kalra@amd.com>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <cover.1606782580.git.ashish.kalra@amd.com>
References: <cover.1606782580.git.ashish.kalra@amd.com>
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: DS7PR03CA0066.namprd03.prod.outlook.com
 (2603:10b6:5:3bb::11) To SN6PR12MB2767.namprd12.prod.outlook.com
 (2603:10b6:805:75::23)
MIME-Version: 1.0
X-MS-Exchange-MessageSentRepresentingType: 1
Received: from ashkalra_ubuntu_server.amd.com (165.204.77.1) by
 DS7PR03CA0066.namprd03.prod.outlook.com (2603:10b6:5:3bb::11) with Microsoft
 SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.3611.26 via Frontend
 Transport; Tue, 1 Dec 2020 00:46:55 +0000
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-HT: Tenant
X-MS-Office365-Filtering-Correlation-Id: fee60356-5f98-4f8e-99ad-08d895929a5a
X-MS-TrafficTypeDiagnostic: SA0PR12MB4573:
X-MS-Exchange-Transport-Forked: True
X-Microsoft-Antispam-PRVS: 
 <SA0PR12MB45734C917B84EC092F4FA6178EF40@SA0PR12MB4573.namprd12.prod.outlook.com>
X-MS-Oob-TLC-OOBClassifiers: OLM:289;
X-MS-Exchange-SenderADCheck: 1
X-Microsoft-Antispam: BCL:0;
X-Microsoft-Antispam-Message-Info: 
 fr0MJ+2leTnLgPQMGF1Gn8Y+vYXEbB/MqriUs8gDNSk2UQWAa0G+l5QspNzRJ5ZLIVO1psbwiztmFRfeNGLCmToo0sYYWhMvkmiSiG3eA96XJ2XD1RuclpE4JJDz9ZqiWZCNQPqCcXE1Rkr9tPi0AfSQ9KdAF9t12TX3ZU9s/aLQFHxMUPpzVEKG1XI+tTjKE5yLQTrKfHDj5nHcgb1n4ae5B5jBMpXwABTEZkNfThFPO6U0QFXVOTbVCxpl9spN1BGGA7hQCUkNGgQxJGZRNFzlKvAFL3SV+DXZpiAnZ7n0925m06VWhVB1IuFzVAOB40Unj7TMD3fgDgv5JofgXw==
X-Forefront-Antispam-Report: 
 CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:SN6PR12MB2767.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(4636009)(366004)(346002)(376002)(136003)(396003)(39860400002)(478600001)(6486002)(7696005)(316002)(4326008)(956004)(6666004)(8676002)(186003)(16526019)(8936002)(52116002)(66946007)(5660300002)(7416002)(2616005)(83380400001)(86362001)(26005)(2906002)(36756003)(66556008)(6916009)(66574015)(66476007);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData: =?utf-8?q?BYxbSfXaxwKRjZMWmhRhDlTwcGQamc?=
	=?utf-8?q?SrfBde+xjAZyFmBxfIiL6iux81dfZxKE0hBoWrTBXfbT/VklgmLgx7pozS68bMNEJ?=
	=?utf-8?q?t+B0PHIqNv3fiUnHyp8K5+n9wRKR5rTqjvdVLpV2qwaKksaceg4PIueC0Z6ee4HLJ?=
	=?utf-8?q?oYznQMbYRyuTNsQ4pa2VjCYJfZ93nROePuIEm2zDuU/NRx3zHIR47Tf5teeSILPkT?=
	=?utf-8?q?6T/8qY+n2give/VIUBvhYNyBQXSqzlXLSFKn9WeVvbb96cHN9khOChOXX+LLMS4wM?=
	=?utf-8?q?O9ha2+D97TooPObgNV4uoDNCQixK5MvCaGyhtSF5CcwvFeGCnXAQdObsvlMPzV6W7?=
	=?utf-8?q?3VpPG5czTBCAm/bo0cS5auV6+Rl3OCLEUvAZ7R0p3Q602vinL/UDIlZlMsyOV6bXV?=
	=?utf-8?q?odKDgKlp2xiUaaIPTbIilTOLRh4JyQUhqTtdZW5gsv+/DikbF7N7U9lE2J51KCrP6?=
	=?utf-8?q?tRnBvtrp+9qPnNdpPKEJyAyC0B4zZGGbCNHKIsoXtIXrDmHWgAoMZpkCnbViNlTqB?=
	=?utf-8?q?dOwQ7qAnWJs5tMZ6n2zZNbffeF+ybUsb9IbdmWQgT3onZ6d6IP9NTJO37fwRQVfxx?=
	=?utf-8?q?HJrCOSq0wUEbIRu1T+IFigyaQuKAHBYqJZlEieCi3FVsn9N3w3wH5BWxM3mEQCvNN?=
	=?utf-8?q?29JFV1Y4Y3/UXlHag85hcXI9cjbFcGEOUnT0HNKy51HwLHJ3/zaC8O176m4xo226s?=
	=?utf-8?q?MubBWF3CILocSMkV6ZZQKOD5v7H/wX7Bz7WCRBnzETQKOepWvuDRpPWih4YBh/5F3?=
	=?utf-8?q?bAbQg6sC4C8E3+vJV0KlH6P+jGdH8IMyV21HDkZAtVT3ZbLiErKr63pCo23RuN2qW?=
	=?utf-8?q?A1BrKLteuVZo0IFgGdVvg0CbiOe4qy+OER8W7zDVGAbZv3TKzi4FEYmvr4aqpOBNr?=
	=?utf-8?q?jCrXNy155rLByYwe3HVvw0yDzq+lGY+pbbxATh5JvlIrbDVWTi0aC8iIre7i0tFD+?=
	=?utf-8?q?Xvynx3xQ5e8Dwmbsnuq?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 fee60356-5f98-4f8e-99ad-08d895929a5a
X-MS-Exchange-CrossTenant-AuthSource: SN6PR12MB2767.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 01 Dec 2020 00:46:56.1547
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: 
 Dcz/nINimGimjPFhk/CeRiOmkmaKbeqZw0HO/OdVtZOZ/ec0DPs7JANbjB2EpdL5CZAOHUNNqUKXPYjt2O0fkA==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: SA0PR12MB4573
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

From: Brijesh Singh <brijesh.singh@amd.com>

This hypercall is used by the SEV guest to notify a change in the page
encryption status to the hypervisor. The hypercall should be invoked
only when the encryption attribute is changed from encrypted -> decrypted
and vice versa. By default all guest pages are considered encrypted.

Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Ingo Molnar <mingo@redhat.com>
Cc: "H. Peter Anvin" <hpa@zytor.com>
Cc: Paolo Bonzini <pbonzini@redhat.com>
Cc: "Radim Krčmář" <rkrcmar@redhat.com>
Cc: Joerg Roedel <joro@8bytes.org>
Cc: Borislav Petkov <bp@suse.de>
Cc: Tom Lendacky <thomas.lendacky@amd.com>
Cc: x86@kernel.org
Cc: kvm@vger.kernel.org
Cc: linux-kernel@vger.kernel.org
Reviewed-by: Venu Busireddy <venu.busireddy@oracle.com>
Signed-off-by: Brijesh Singh <brijesh.singh@amd.com>
Signed-off-by: Ashish Kalra <ashish.kalra@amd.com>
---
 Documentation/virt/kvm/hypercalls.rst | 15 +++++
 arch/x86/include/asm/kvm_host.h       |  2 +
 arch/x86/kvm/svm/sev.c                | 90 +++++++++++++++++++++++++++
 arch/x86/kvm/svm/svm.c                |  2 +
 arch/x86/kvm/svm/svm.h                |  4 ++
 arch/x86/kvm/vmx/vmx.c                |  1 +
 arch/x86/kvm/x86.c                    |  6 ++
 include/uapi/linux/kvm_para.h         |  1 +
 8 files changed, 121 insertions(+)

diff --git a/Documentation/virt/kvm/hypercalls.rst b/Documentation/virt/kvm/hypercalls.rst
index ed4fddd364ea..7aff0cebab7c 100644
--- a/Documentation/virt/kvm/hypercalls.rst
+++ b/Documentation/virt/kvm/hypercalls.rst
@@ -169,3 +169,18 @@ a0: destination APIC ID
 
 :Usage example: When sending a call-function IPI-many to vCPUs, yield if
 	        any of the IPI target vCPUs was preempted.
+
+
+8. KVM_HC_PAGE_ENC_STATUS
+-------------------------
+:Architecture: x86
+:Status: active
+:Purpose: Notify the encryption status changes in guest page table (SEV guest)
+
+a0: the guest physical address of the start page
+a1: the number of pages
+a2: encryption attribute
+
+   Where:
+	* 1: Encryption attribute is set
+	* 0: Encryption attribute is cleared
diff --git a/arch/x86/include/asm/kvm_host.h b/arch/x86/include/asm/kvm_host.h
index f002cdb13a0b..d035dc983a7a 100644
--- a/arch/x86/include/asm/kvm_host.h
+++ b/arch/x86/include/asm/kvm_host.h
@@ -1282,6 +1282,8 @@ struct kvm_x86_ops {
 
 	void (*migrate_timers)(struct kvm_vcpu *vcpu);
 	void (*msr_filter_changed)(struct kvm_vcpu *vcpu);
+	int (*page_enc_status_hc)(struct kvm *kvm, unsigned long gpa,
+				  unsigned long sz, unsigned long mode);
 };
 
 struct kvm_x86_nested_ops {
diff --git a/arch/x86/kvm/svm/sev.c b/arch/x86/kvm/svm/sev.c
index c0b14106258a..6b8bc1297f9c 100644
--- a/arch/x86/kvm/svm/sev.c
+++ b/arch/x86/kvm/svm/sev.c
@@ -927,6 +927,93 @@ static int sev_launch_secret(struct kvm *kvm, struct kvm_sev_cmd *argp)
 	return ret;
 }
 
+static int sev_resize_page_enc_bitmap(struct kvm *kvm, unsigned long new_size)
+{
+	struct kvm_sev_info *sev = &to_kvm_svm(kvm)->sev_info;
+	unsigned long *map;
+	unsigned long sz;
+
+	if (sev->page_enc_bmap_size >= new_size)
+		return 0;
+
+	sz = ALIGN(new_size, BITS_PER_LONG) / 8;
+
+	map = vmalloc(sz);
+	if (!map) {
+		pr_err_once("Failed to allocate encrypted bitmap size %lx\n",
+				sz);
+		return -ENOMEM;
+	}
+
+	/* mark the page encrypted (by default) */
+	memset(map, 0xff, sz);
+
+	bitmap_copy(map, sev->page_enc_bmap, sev->page_enc_bmap_size);
+	kvfree(sev->page_enc_bmap);
+
+	sev->page_enc_bmap = map;
+	sev->page_enc_bmap_size = new_size;
+
+	return 0;
+}
+
+int svm_page_enc_status_hc(struct kvm *kvm, unsigned long gpa,
+				  unsigned long npages, unsigned long enc)
+{
+	struct kvm_sev_info *sev = &to_kvm_svm(kvm)->sev_info;
+	kvm_pfn_t pfn_start, pfn_end;
+	gfn_t gfn_start, gfn_end;
+
+	if (!sev_guest(kvm))
+		return -EINVAL;
+
+	if (!npages)
+		return 0;
+
+	gfn_start = gpa_to_gfn(gpa);
+	gfn_end = gfn_start + npages;
+
+	/* out of bound access error check */
+	if (gfn_end <= gfn_start)
+		return -EINVAL;
+
+	/* lets make sure that gpa exist in our memslot */
+	pfn_start = gfn_to_pfn(kvm, gfn_start);
+	pfn_end = gfn_to_pfn(kvm, gfn_end);
+
+	if (is_error_noslot_pfn(pfn_start) && !is_noslot_pfn(pfn_start)) {
+		/*
+		 * Allow guest MMIO range(s) to be added
+		 * to the page encryption bitmap.
+		 */
+		return -EINVAL;
+	}
+
+	if (is_error_noslot_pfn(pfn_end) && !is_noslot_pfn(pfn_end)) {
+		/*
+		 * Allow guest MMIO range(s) to be added
+		 * to the page encryption bitmap.
+		 */
+		return -EINVAL;
+	}
+
+	mutex_lock(&kvm->lock);
+
+	if (sev->page_enc_bmap_size < gfn_end)
+		goto unlock;
+
+	if (enc)
+		__bitmap_set(sev->page_enc_bmap, gfn_start,
+				gfn_end - gfn_start);
+	else
+		__bitmap_clear(sev->page_enc_bmap, gfn_start,
+				gfn_end - gfn_start);
+
+unlock:
+	mutex_unlock(&kvm->lock);
+	return 0;
+}
+
 int svm_mem_enc_op(struct kvm *kvm, void __user *argp)
 {
 	struct kvm_sev_cmd sev_cmd;
@@ -1123,6 +1210,9 @@ void sev_vm_destroy(struct kvm *kvm)
 
 	sev_unbind_asid(kvm, sev->handle);
 	sev_asid_free(sev->asid);
+
+	kvfree(sev->page_enc_bmap);
+	sev->page_enc_bmap = NULL;
 }
 
 int __init sev_hardware_setup(void)
diff --git a/arch/x86/kvm/svm/svm.c b/arch/x86/kvm/svm/svm.c
index 6dc337b9c231..7122ea5f7c47 100644
--- a/arch/x86/kvm/svm/svm.c
+++ b/arch/x86/kvm/svm/svm.c
@@ -4312,6 +4312,8 @@ static struct kvm_x86_ops svm_x86_ops __initdata = {
 	.apic_init_signal_blocked = svm_apic_init_signal_blocked,
 
 	.msr_filter_changed = svm_msr_filter_changed,
+
+	.page_enc_status_hc = svm_page_enc_status_hc,
 };
 
 static struct kvm_x86_init_ops svm_init_ops __initdata = {
diff --git a/arch/x86/kvm/svm/svm.h b/arch/x86/kvm/svm/svm.h
index fdff76eb6ceb..0103a23ca174 100644
--- a/arch/x86/kvm/svm/svm.h
+++ b/arch/x86/kvm/svm/svm.h
@@ -66,6 +66,8 @@ struct kvm_sev_info {
 	int fd;			/* SEV device fd */
 	unsigned long pages_locked; /* Number of pages locked */
 	struct list_head regions_list;  /* List of registered regions */
+	unsigned long *page_enc_bmap;
+	unsigned long page_enc_bmap_size;
 };
 
 struct kvm_svm {
@@ -409,6 +411,8 @@ int nested_svm_check_exception(struct vcpu_svm *svm, unsigned nr,
 			       bool has_error_code, u32 error_code);
 int nested_svm_exit_special(struct vcpu_svm *svm);
 void sync_nested_vmcb_control(struct vcpu_svm *svm);
+int svm_page_enc_status_hc(struct kvm *kvm, unsigned long gpa,
+                           unsigned long npages, unsigned long enc);
 
 extern struct kvm_x86_nested_ops svm_nested_ops;
 
diff --git a/arch/x86/kvm/vmx/vmx.c b/arch/x86/kvm/vmx/vmx.c
index c3441e7e5a87..5bc37a38e6be 100644
--- a/arch/x86/kvm/vmx/vmx.c
+++ b/arch/x86/kvm/vmx/vmx.c
@@ -7722,6 +7722,7 @@ static struct kvm_x86_ops vmx_x86_ops __initdata = {
 
 	.msr_filter_changed = vmx_msr_filter_changed,
 	.cpu_dirty_log_size = vmx_cpu_dirty_log_size,
+	.page_enc_status_hc = NULL,
 };
 
 static __init int hardware_setup(void)
diff --git a/arch/x86/kvm/x86.c b/arch/x86/kvm/x86.c
index a3fdc16cfd6f..3afc78f18f69 100644
--- a/arch/x86/kvm/x86.c
+++ b/arch/x86/kvm/x86.c
@@ -8125,6 +8125,12 @@ int kvm_emulate_hypercall(struct kvm_vcpu *vcpu)
 		kvm_sched_yield(vcpu->kvm, a0);
 		ret = 0;
 		break;
+	case KVM_HC_PAGE_ENC_STATUS:
+		ret = -KVM_ENOSYS;
+		if (kvm_x86_ops.page_enc_status_hc)
+			ret = kvm_x86_ops.page_enc_status_hc(vcpu->kvm,
+					a0, a1, a2);
+		break;
 	default:
 		ret = -KVM_ENOSYS;
 		break;
diff --git a/include/uapi/linux/kvm_para.h b/include/uapi/linux/kvm_para.h
index 8b86609849b9..847b83b75dc8 100644
--- a/include/uapi/linux/kvm_para.h
+++ b/include/uapi/linux/kvm_para.h
@@ -29,6 +29,7 @@
 #define KVM_HC_CLOCK_PAIRING		9
 #define KVM_HC_SEND_IPI		10
 #define KVM_HC_SCHED_YIELD		11
+#define KVM_HC_PAGE_ENC_STATUS		12
 
 /*
  * hypercalls use architecture specific

From patchwork Tue Dec  1 00:47:02 2020
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-Patchwork-Submitter: Ashish Kalra <Ashish.Kalra@amd.com>
X-Patchwork-Id: 11941715
Return-Path: <kvm-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-16.8 required=3.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,HEADER_FROM_DIFFERENT_DOMAINS,INCLUDES_CR_TRAILER,INCLUDES_PATCH,
	MAILING_LIST_MULTI,MSGID_FROM_MTA_HEADER,SPF_HELO_NONE,SPF_PASS,URIBL_BLOCKED,
	USER_AGENT_GIT autolearn=unavailable autolearn_force=no version=3.4.0
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 822D6C83019
	for <kvm@archiver.kernel.org>; Tue,  1 Dec 2020 00:48:04 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by mail.kernel.org (Postfix) with ESMTP id 4CD0520809
	for <kvm@archiver.kernel.org>; Tue,  1 Dec 2020 00:48:04 +0000 (UTC)
Authentication-Results: mail.kernel.org;
	dkim=pass (1024-bit key) header.d=amdcloud.onmicrosoft.com
 header.i=@amdcloud.onmicrosoft.com header.b="DPSeIWWq"
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2389189AbgLAAr5 (ORCPT <rfc822;kvm@archiver.kernel.org>);
        Mon, 30 Nov 2020 19:47:57 -0500
Received: from mail-bn8nam12on2071.outbound.protection.outlook.com
 ([40.107.237.71]:20033
        "EHLO NAM12-BN8-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1730983AbgLAAr4 (ORCPT <rfc822;kvm@vger.kernel.org>);
        Mon, 30 Nov 2020 19:47:56 -0500
ARC-Seal: i=1; a=rsa-sha256; s=arcselector9901; d=microsoft.com; cv=none;
 b=DQNikBy4xfVyyp+RCuRyjhelmfnXhheYI+MCnIqmNKoXeLnPyPXC7jlJki4ZpAuzKU1PN3lAbGRRego9Fzm3iR1a+TJNclNbCaqFMjB9IZajrxG7ISHUrDRWXAbWB9mKsDuNEOVyP6khZOBabe7kDJGuCQqHHSOXISmoBXs0GVrd4/DXSqk5rRG9uhNd4/mHorvERx/gu4CEalzwO+v6mPVnT47h3k/rGhILepxCxxeTIHIyDrQRtvAjQAGsvIYaU6RWlXZ3XxfWVATJlpyIdM+6f9n5/gnTzYI92qfiuWmRwlaW+5J7NXuhkawnPJu09e8F/VbQV85aHxTSGSRrLA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector9901;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=YHrJcBavywkH2wO9ZiQWc9kpSF4jp9r4aRlQxAiy7tc=;
 b=P6kUcdAM7YxnSdNKYVYG+mS09mMlZztR3ibNwhIAP9H+uADZefeXpJBNwEk0wgSYgUCo6NGVf9kKI+9GvxqVpi+nOYxY+Ygn9fVcBlN5+slx/shcAfheOWCuaeqxNY7Mmf9bWreyj5+cC68diw018jvwMYvjM2Q+Qd2P29zXcOaq1leh1JZhME64a3kDFNJE4b8BuQ1g6/MWJXQSzoiQfZr2QuqHOZhsvWXeKVlErluvomEE8/PkANcUQo+Hi+YwrYHgcmdDZNrS8Vofb1lmZk1W9IdqVUc4ELBonhvJped9HcS+t7dbm9FQVjrSs9nIyGPb5Z7IDsiGAuYRLdzn7g==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=amdcloud.onmicrosoft.com; s=selector2-amdcloud-onmicrosoft-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=YHrJcBavywkH2wO9ZiQWc9kpSF4jp9r4aRlQxAiy7tc=;
 b=DPSeIWWq+2Y615jinwq0w+0+EmRivyAYx8Rkzve8cKq2KwFNCsHX1jFI+ONQgsVBmMuRB5/yVsYXbd2wQ7T8THV0TTw66tKXa0HwZ9PbHZRm9ybbMNKVcYNSubrwuLjnc6e3fd9QwQ8iv8my0jaNy38owa3Gm8LuMB6/ymbTefY=
Authentication-Results: redhat.com; dkim=none (message not signed)
 header.d=none;redhat.com; dmarc=none action=none header.from=amd.com;
Received: from SN6PR12MB2767.namprd12.prod.outlook.com (2603:10b6:805:75::23)
 by SA0PR12MB4573.namprd12.prod.outlook.com (2603:10b6:806:9c::24) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.3611.22; Tue, 1 Dec
 2020 00:47:14 +0000
Received: from SN6PR12MB2767.namprd12.prod.outlook.com
 ([fe80::d8f2:fde4:5e1d:afec]) by SN6PR12MB2767.namprd12.prod.outlook.com
 ([fe80::d8f2:fde4:5e1d:afec%3]) with mapi id 15.20.3611.025; Tue, 1 Dec 2020
 00:47:14 +0000
From: Ashish Kalra <Ashish.Kalra@amd.com>
To: pbonzini@redhat.com
Cc: tglx@linutronix.de, mingo@redhat.com, hpa@zytor.com,
        joro@8bytes.org, bp@suse.de, thomas.lendacky@amd.com,
        x86@kernel.org, kvm@vger.kernel.org, linux-kernel@vger.kernel.org,
        srutherford@google.com, brijesh.singh@amd.com,
        dovmurik@linux.vnet.ibm.com, tobin@ibm.com, jejb@linux.ibm.com,
        frankeh@us.ibm.com, dgilbert@redhat.com
Subject: [PATCH v2 3/9] KVM: x86: Introduce KVM_GET_PAGE_ENC_BITMAP ioctl
Date: Tue,  1 Dec 2020 00:47:02 +0000
Message-Id: 
 <9b9f786817ed2aaf77d44f257e468df800b999d0.1606782580.git.ashish.kalra@amd.com>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <cover.1606782580.git.ashish.kalra@amd.com>
References: <cover.1606782580.git.ashish.kalra@amd.com>
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: SN6PR04CA0103.namprd04.prod.outlook.com
 (2603:10b6:805:f2::44) To SN6PR12MB2767.namprd12.prod.outlook.com
 (2603:10b6:805:75::23)
MIME-Version: 1.0
X-MS-Exchange-MessageSentRepresentingType: 1
Received: from ashkalra_ubuntu_server.amd.com (165.204.77.1) by
 SN6PR04CA0103.namprd04.prod.outlook.com (2603:10b6:805:f2::44) with Microsoft
 SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.3611.20 via Frontend
 Transport; Tue, 1 Dec 2020 00:47:13 +0000
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-HT: Tenant
X-MS-Office365-Filtering-Correlation-Id: 3c092cba-b0c5-488f-7cf4-08d89592a51c
X-MS-TrafficTypeDiagnostic: SA0PR12MB4573:
X-MS-Exchange-Transport-Forked: True
X-Microsoft-Antispam-PRVS: 
 <SA0PR12MB45731F6253161FFB142629038EF40@SA0PR12MB4573.namprd12.prod.outlook.com>
X-MS-Oob-TLC-OOBClassifiers: OLM:3173;
X-MS-Exchange-SenderADCheck: 1
X-Microsoft-Antispam: BCL:0;
X-Microsoft-Antispam-Message-Info: 
 XzwSnSe4nd05nFMg/7J+DZbY7U3EdR0/8Fh02WIiWrxGTGakUSURxSTTudA/Z32eQ8IHt20P44oZx1qdiNn6x4DsJfypCXU2rg8befqX7vyGiPDPbfMFgELZax9UhBiJhF8HZcAate8F2PA8CznfWVWtwv4Xep5aFdW2TqqdZV28N9jYo1k3B77P5Df9kESVzIbKx8B9HznJZs7YC/qiS/02bMDCAQWqm+v/KNuvk09WYCSQ3ZOProfDFPOpyn4YZkNI/tAxkqhL/TdlIbzP3Xo9+tLkclKl1sv/vyvNBFiqoClcxTS67jjrXHGAf2cNRuVFxfhYyfHF8WweDipbJQ==
X-Forefront-Antispam-Report: 
 CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:SN6PR12MB2767.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(4636009)(366004)(346002)(376002)(136003)(396003)(39860400002)(478600001)(6486002)(7696005)(316002)(4326008)(956004)(6666004)(8676002)(186003)(16526019)(8936002)(52116002)(66946007)(5660300002)(7416002)(2616005)(83380400001)(86362001)(26005)(2906002)(36756003)(66556008)(6916009)(66574015)(66476007);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData: =?utf-8?q?yz9cvkJysvs+Eupeahoffu8LXHUk0Y?=
	=?utf-8?q?vY93k04FeWRfaGsFOp8/VM2ktGtE2uK8QIfUdS3dMun32OyL4rvfTAOrrOSTP86TY?=
	=?utf-8?q?Qja11V8HVyuMIV8UOeKIhAbFE7egocZaVCNwhZjvtzld6PpdMdlbvpKJW0EODvxp1?=
	=?utf-8?q?Bf6Xo0PDHPPVA5yyjlox76V1EnzTVnlHMJkz+0G1HxnLR0Lf6H5SeMeWr/8BJ015+?=
	=?utf-8?q?xU/14XEzm4hqWH7qJfuq5OPe3KsPPwbQYgIqUMOr1P9RdtZY3UO38kajCj1+gAlhn?=
	=?utf-8?q?JTM43uP50mCd6uUoA7UCJrJXk9JxXZT7lfrHU5Cg0guoqTs7hIxVU1T+gXijiBCpb?=
	=?utf-8?q?D1ofRuTejvHO/RnVkmX0ThKuyRJ3Y7zleNHYv0kXRbvJuO3JJn2MPTfHNwbOZ8Xv/?=
	=?utf-8?q?dPoTOnK9+CsHSEjI20CMFnmsDDhFKMH+obj0lOFFwy/fJik5C12zoUDRCyq8Mn09h?=
	=?utf-8?q?mdA275BihbS3En/Xlo3YN5zNbklygEB3NdpX93NOnf+whe9ZxGODNWjx25n3lPZOy?=
	=?utf-8?q?sN1jIcLIqyOvouNXsZXElwjGBgXgwlaX7x0cjeR9xFcvAeofEsWY16beHhQ88rD+9?=
	=?utf-8?q?62lBXEC3H5y2ZroFm7wZYSZfKEdOtssdPHcxK4en3EM+wgEKMblqTEdy9N+8ylym1?=
	=?utf-8?q?I7iJSa4ktNXofOQa7RV98TNH+30Fz0PCRlkq+SeKtyxS/YAOaAKXaDC5LccPJ72Xb?=
	=?utf-8?q?Yz+T8ZP7nP8WXzH5GiPc2kCBJyscaDaurlUHzV6NM1DKZ5qsh2SH5P1zyl1IcqZnJ?=
	=?utf-8?q?t2Tb92sSgLQglObW2jBQyOW9TkBITFGAhmOtWLNjz6SctQtH7sFLfRgH+yycjkOZg?=
	=?utf-8?q?vmfmPcqlwBntFntLnJJuUrmqzUJM9uHvLL6oN0ftdEMznjbMJ8D8uHtwqPs9T13sC?=
	=?utf-8?q?GYHm2ps7skuMykPvGPVR4+bgQASNF/flin4ZLBJqUIzpE1gwI8DVrCrtqR11G1UxR?=
	=?utf-8?q?oZ+7lPovfhvxbbn/v5P?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 3c092cba-b0c5-488f-7cf4-08d89592a51c
X-MS-Exchange-CrossTenant-AuthSource: SN6PR12MB2767.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 01 Dec 2020 00:47:14.3635
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: 
 FtHlDvswfPUKJmTLNtAL6lKcT0CCwI9I8LkGORTeBjO4zfFt3HVu6o8UYPn1P9goyE3vWCgdLQSb88d6Noo8WQ==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: SA0PR12MB4573
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

From: Brijesh Singh <brijesh.singh@amd.com>

The ioctl can be used to retrieve page encryption bitmap for a given
gfn range.

Return the correct bitmap as per the number of pages being requested
by the user. Ensure that we only copy bmap->num_pages bytes in the
userspace buffer, if bmap->num_pages is not byte aligned we read
the trailing bits from the userspace and copy those bits as is.

Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Ingo Molnar <mingo@redhat.com>
Cc: "H. Peter Anvin" <hpa@zytor.com>
Cc: Paolo Bonzini <pbonzini@redhat.com>
Cc: "Radim Krčmář" <rkrcmar@redhat.com>
Cc: Joerg Roedel <joro@8bytes.org>
Cc: Borislav Petkov <bp@suse.de>
Cc: Tom Lendacky <thomas.lendacky@amd.com>
Cc: x86@kernel.org
Cc: kvm@vger.kernel.org
Cc: linux-kernel@vger.kernel.org
Reviewed-by: Venu Busireddy <venu.busireddy@oracle.com>
Signed-off-by: Brijesh Singh <brijesh.singh@amd.com>
Signed-off-by: Ashish Kalra <ashish.kalra@amd.com>
---
 Documentation/virt/kvm/api.rst  | 27 +++++++++++++
 arch/x86/include/asm/kvm_host.h |  2 +
 arch/x86/kvm/svm/sev.c          | 70 +++++++++++++++++++++++++++++++++
 arch/x86/kvm/svm/svm.c          |  1 +
 arch/x86/kvm/svm/svm.h          |  1 +
 arch/x86/kvm/x86.c              | 12 ++++++
 include/uapi/linux/kvm.h        | 12 ++++++
 7 files changed, 125 insertions(+)

diff --git a/Documentation/virt/kvm/api.rst b/Documentation/virt/kvm/api.rst
index 70254eaa5229..ae410f4332ab 100644
--- a/Documentation/virt/kvm/api.rst
+++ b/Documentation/virt/kvm/api.rst
@@ -4671,6 +4671,33 @@ This ioctl resets VCPU registers and control structures according to
 the clear cpu reset definition in the POP. However, the cpu is not put
 into ESA mode. This reset is a superset of the initial reset.
 
+4.125 KVM_GET_PAGE_ENC_BITMAP (vm ioctl)
+---------------------------------------
+
+:Capability: basic
+:Architectures: x86
+:Type: vm ioctl
+:Parameters: struct kvm_page_enc_bitmap (in/out)
+:Returns: 0 on success, -1 on error
+
+/* for KVM_GET_PAGE_ENC_BITMAP */
+struct kvm_page_enc_bitmap {
+	__u64 start_gfn;
+	__u64 num_pages;
+	union {
+		void __user *enc_bitmap; /* one bit per page */
+		__u64 padding2;
+	};
+};
+
+The encrypted VMs have the concept of private and shared pages. The private
+pages are encrypted with the guest-specific key, while the shared pages may
+be encrypted with the hypervisor key. The KVM_GET_PAGE_ENC_BITMAP can
+be used to get the bitmap indicating whether the guest page is private
+or shared. The bitmap can be used during the guest migration. If the page
+is private then the userspace need to use SEV migration commands to transmit
+the page.
+
 
 4.125 KVM_S390_PV_COMMAND
 -------------------------
diff --git a/arch/x86/include/asm/kvm_host.h b/arch/x86/include/asm/kvm_host.h
index d035dc983a7a..8c2e40199ecb 100644
--- a/arch/x86/include/asm/kvm_host.h
+++ b/arch/x86/include/asm/kvm_host.h
@@ -1284,6 +1284,8 @@ struct kvm_x86_ops {
 	void (*msr_filter_changed)(struct kvm_vcpu *vcpu);
 	int (*page_enc_status_hc)(struct kvm *kvm, unsigned long gpa,
 				  unsigned long sz, unsigned long mode);
+	int (*get_page_enc_bitmap)(struct kvm *kvm,
+				struct kvm_page_enc_bitmap *bmap);
 };
 
 struct kvm_x86_nested_ops {
diff --git a/arch/x86/kvm/svm/sev.c b/arch/x86/kvm/svm/sev.c
index 6b8bc1297f9c..a6586dd29767 100644
--- a/arch/x86/kvm/svm/sev.c
+++ b/arch/x86/kvm/svm/sev.c
@@ -1014,6 +1014,76 @@ int svm_page_enc_status_hc(struct kvm *kvm, unsigned long gpa,
 	return 0;
 }
 
+int svm_get_page_enc_bitmap(struct kvm *kvm,
+				   struct kvm_page_enc_bitmap *bmap)
+{
+	struct kvm_sev_info *sev = &to_kvm_svm(kvm)->sev_info;
+	unsigned long gfn_start, gfn_end;
+	unsigned long sz, i, sz_bytes;
+	unsigned long *bitmap;
+	int ret, n;
+
+	if (!sev_guest(kvm))
+		return -ENOTTY;
+
+	gfn_start = bmap->start_gfn;
+	gfn_end = gfn_start + bmap->num_pages;
+
+	sz = ALIGN(bmap->num_pages, BITS_PER_LONG) / BITS_PER_BYTE;
+	bitmap = kmalloc(sz, GFP_KERNEL);
+	if (!bitmap)
+		return -ENOMEM;
+
+	/* by default all pages are marked encrypted */
+	memset(bitmap, 0xff, sz);
+
+	mutex_lock(&kvm->lock);
+	if (sev->page_enc_bmap) {
+		i = gfn_start;
+		for_each_clear_bit_from(i, sev->page_enc_bmap,
+				      min(sev->page_enc_bmap_size, gfn_end))
+			clear_bit(i - gfn_start, bitmap);
+	}
+	mutex_unlock(&kvm->lock);
+
+	ret = -EFAULT;
+
+	n = bmap->num_pages % BITS_PER_BYTE;
+	sz_bytes = ALIGN(bmap->num_pages, BITS_PER_BYTE) / BITS_PER_BYTE;
+
+	/*
+	 * Return the correct bitmap as per the number of pages being
+	 * requested by the user. Ensure that we only copy bmap->num_pages
+	 * bytes in the userspace buffer, if bmap->num_pages is not byte
+	 * aligned we read the trailing bits from the userspace and copy
+	 * those bits as is.
+	 */
+
+	if (n) {
+		unsigned char *bitmap_kernel = (unsigned char *)bitmap;
+		unsigned char bitmap_user;
+		unsigned long offset, mask;
+
+		offset = bmap->num_pages / BITS_PER_BYTE;
+		if (copy_from_user(&bitmap_user, bmap->enc_bitmap + offset,
+				sizeof(unsigned char)))
+			goto out;
+
+		mask = GENMASK(n - 1, 0);
+		bitmap_user &= ~mask;
+		bitmap_kernel[offset] &= mask;
+		bitmap_kernel[offset] |= bitmap_user;
+	}
+
+	if (copy_to_user(bmap->enc_bitmap, bitmap, sz_bytes))
+		goto out;
+
+	ret = 0;
+out:
+	kfree(bitmap);
+	return ret;
+}
+
 int svm_mem_enc_op(struct kvm *kvm, void __user *argp)
 {
 	struct kvm_sev_cmd sev_cmd;
diff --git a/arch/x86/kvm/svm/svm.c b/arch/x86/kvm/svm/svm.c
index 7122ea5f7c47..bff89cab3ed0 100644
--- a/arch/x86/kvm/svm/svm.c
+++ b/arch/x86/kvm/svm/svm.c
@@ -4314,6 +4314,7 @@ static struct kvm_x86_ops svm_x86_ops __initdata = {
 	.msr_filter_changed = svm_msr_filter_changed,
 
 	.page_enc_status_hc = svm_page_enc_status_hc,
+	.get_page_enc_bitmap = svm_get_page_enc_bitmap,
 };
 
 static struct kvm_x86_init_ops svm_init_ops __initdata = {
diff --git a/arch/x86/kvm/svm/svm.h b/arch/x86/kvm/svm/svm.h
index 0103a23ca174..4ce73f1034b9 100644
--- a/arch/x86/kvm/svm/svm.h
+++ b/arch/x86/kvm/svm/svm.h
@@ -413,6 +413,7 @@ int nested_svm_exit_special(struct vcpu_svm *svm);
 void sync_nested_vmcb_control(struct vcpu_svm *svm);
 int svm_page_enc_status_hc(struct kvm *kvm, unsigned long gpa,
                            unsigned long npages, unsigned long enc);
+int svm_get_page_enc_bitmap(struct kvm *kvm, struct kvm_page_enc_bitmap *bmap);
 
 extern struct kvm_x86_nested_ops svm_nested_ops;
 
diff --git a/arch/x86/kvm/x86.c b/arch/x86/kvm/x86.c
index 3afc78f18f69..d3cb95a4dd55 100644
--- a/arch/x86/kvm/x86.c
+++ b/arch/x86/kvm/x86.c
@@ -5695,6 +5695,18 @@ long kvm_arch_vm_ioctl(struct file *filp,
 	case KVM_X86_SET_MSR_FILTER:
 		r = kvm_vm_ioctl_set_msr_filter(kvm, argp);
 		break;
+	case KVM_GET_PAGE_ENC_BITMAP: {
+		struct kvm_page_enc_bitmap bitmap;
+
+		r = -EFAULT;
+		if (copy_from_user(&bitmap, argp, sizeof(bitmap)))
+			goto out;
+
+		r = -ENOTTY;
+		if (kvm_x86_ops.get_page_enc_bitmap)
+			r = kvm_x86_ops.get_page_enc_bitmap(kvm, &bitmap);
+		break;
+	}
 	default:
 		r = -ENOTTY;
 	}
diff --git a/include/uapi/linux/kvm.h b/include/uapi/linux/kvm.h
index 886802b8ffba..d0b9171bdb03 100644
--- a/include/uapi/linux/kvm.h
+++ b/include/uapi/linux/kvm.h
@@ -532,6 +532,16 @@ struct kvm_dirty_log {
 	};
 };
 
+/* for KVM_GET_PAGE_ENC_BITMAP */
+struct kvm_page_enc_bitmap {
+	__u64 start_gfn;
+	__u64 num_pages;
+	union {
+		void __user *enc_bitmap; /* one bit per page */
+		__u64 padding2;
+	};
+};
+
 /* for KVM_CLEAR_DIRTY_LOG */
 struct kvm_clear_dirty_log {
 	__u32 slot;
@@ -1563,6 +1573,8 @@ struct kvm_pv_cmd {
 /* Available with KVM_CAP_DIRTY_LOG_RING */
 #define KVM_RESET_DIRTY_RINGS		_IO(KVMIO, 0xc7)
 
+#define KVM_GET_PAGE_ENC_BITMAP	_IOW(KVMIO, 0xc6, struct kvm_page_enc_bitmap)
+
 /* Secure Encrypted Virtualization command */
 enum sev_cmd_id {
 	/* Guest initialization commands */

From patchwork Tue Dec  1 00:47:20 2020
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-Patchwork-Submitter: Ashish Kalra <Ashish.Kalra@amd.com>
X-Patchwork-Id: 11941719
Return-Path: <kvm-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-16.8 required=3.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,HEADER_FROM_DIFFERENT_DOMAINS,INCLUDES_CR_TRAILER,INCLUDES_PATCH,
	MAILING_LIST_MULTI,MSGID_FROM_MTA_HEADER,SPF_HELO_NONE,SPF_PASS,URIBL_BLOCKED,
	USER_AGENT_GIT autolearn=unavailable autolearn_force=no version=3.4.0
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 52128C8300F
	for <kvm@archiver.kernel.org>; Tue,  1 Dec 2020 00:48:56 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by mail.kernel.org (Postfix) with ESMTP id 14B0D20857
	for <kvm@archiver.kernel.org>; Tue,  1 Dec 2020 00:48:56 +0000 (UTC)
Authentication-Results: mail.kernel.org;
	dkim=pass (1024-bit key) header.d=amdcloud.onmicrosoft.com
 header.i=@amdcloud.onmicrosoft.com header.b="E9zWfmhH"
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1731066AbgLAAse (ORCPT <rfc822;kvm@archiver.kernel.org>);
        Mon, 30 Nov 2020 19:48:34 -0500
Received: from mail-bn7nam10on2050.outbound.protection.outlook.com
 ([40.107.92.50]:4864
        "EHLO NAM10-BN7-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1728901AbgLAAse (ORCPT <rfc822;kvm@vger.kernel.org>);
        Mon, 30 Nov 2020 19:48:34 -0500
ARC-Seal: i=1; a=rsa-sha256; s=arcselector9901; d=microsoft.com; cv=none;
 b=oS2KJlDUDX21FqDhlFfWvbTKDfV68i1oKiWX+NCwH7I6ken177GbRn9E47aWXGWjm38vjO8v56POR0I01mgKEeWxxXUbT+7pXG4aIkfRdGdPsE3l+UMsHyyIb0KGp/dlUQO+Ty9apODks6AsP0798qHd8Cw4qkIjt5U+B0qw5DVZT04QBRPwOjG8O+l9mKekkczMqCg963aMHvBGrOUzp0DcqHjXY2yrqiTH+c+Gk+vAqxihyynK2GSKN1HZc7Oa6HO7+ZyWoXokpoCHZ5F6hJIwiYrXe9D+rJpnxwnrYoptYR/ihRHHdcWMfgF8Syg38sbRZpY6g+ngFhz76MpHtQ==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector9901;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=ZhKI0DkAsAvx2gmnAyq5fMDUyMXKmNtJ5iq1d326ZZk=;
 b=HJhKItLffwQfOKToxR4uxtL91wQXnD3Iqy2A0jV8fYJu+xLdW1FfP7rw5fgKha3fUASZQ6TXHn8PRsEAqpgrvIZcpg5Rw7r/IRm7P8E8YlNOLZQUvduKvaa7RV8c785kthGhi3RWlO0eyq+okyqNuKT+rSPnT5xuFXfYCbG5rbSDyNGrPhZjqvJoSlCMvwBile6EQNX241WwwEaSGwUnXDwNS/DFAhxIXJuIkvvTDipCLBkmr6xAgY9DD1ZGKM5Rt+tRNTnLqmcGkzVP3syEKUz9pPdqv6uz3yTQ7Xup5MeA6QKXxudEPXk2I6aVgWwmumrAiSxwTdfGZUJY1NADrQ==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=amdcloud.onmicrosoft.com; s=selector2-amdcloud-onmicrosoft-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=ZhKI0DkAsAvx2gmnAyq5fMDUyMXKmNtJ5iq1d326ZZk=;
 b=E9zWfmhHMdxdaVWvz9S1vgJDBCNFbGJdXkwPrmx0RrKD2Echyt+4Nv1aGDc8EMbtnvkfWdPT88GKq4AoWddon67PCYgjjE3nxRhNkO+DoYk3fSM+npnxOY8EKZxRLej40jSlYOL/6cftr4AeLoxKOR+8Jdpscm+gDGS4POWAGwg=
Authentication-Results: redhat.com; dkim=none (message not signed)
 header.d=none;redhat.com; dmarc=none action=none header.from=amd.com;
Received: from SN6PR12MB2767.namprd12.prod.outlook.com (2603:10b6:805:75::23)
 by SN6PR12MB4751.namprd12.prod.outlook.com (2603:10b6:805:df::33) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.3611.24; Tue, 1 Dec
 2020 00:47:30 +0000
Received: from SN6PR12MB2767.namprd12.prod.outlook.com
 ([fe80::d8f2:fde4:5e1d:afec]) by SN6PR12MB2767.namprd12.prod.outlook.com
 ([fe80::d8f2:fde4:5e1d:afec%3]) with mapi id 15.20.3611.025; Tue, 1 Dec 2020
 00:47:30 +0000
From: Ashish Kalra <Ashish.Kalra@amd.com>
To: pbonzini@redhat.com
Cc: tglx@linutronix.de, mingo@redhat.com, hpa@zytor.com,
        joro@8bytes.org, bp@suse.de, thomas.lendacky@amd.com,
        x86@kernel.org, kvm@vger.kernel.org, linux-kernel@vger.kernel.org,
        srutherford@google.com, brijesh.singh@amd.com,
        dovmurik@linux.vnet.ibm.com, tobin@ibm.com, jejb@linux.ibm.com,
        frankeh@us.ibm.com, dgilbert@redhat.com
Subject: [PATCH v2 4/9] mm: x86: Invoke hypercall when page encryption status
 is changed.
Date: Tue,  1 Dec 2020 00:47:20 +0000
Message-Id: 
 <3b095071f6a6ddf11e3ccee94fada9605131ab74.1606782580.git.ashish.kalra@amd.com>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <cover.1606782580.git.ashish.kalra@amd.com>
References: <cover.1606782580.git.ashish.kalra@amd.com>
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: SN4PR0601CA0021.namprd06.prod.outlook.com
 (2603:10b6:803:2f::31) To SN6PR12MB2767.namprd12.prod.outlook.com
 (2603:10b6:805:75::23)
MIME-Version: 1.0
X-MS-Exchange-MessageSentRepresentingType: 1
Received: from ashkalra_ubuntu_server.amd.com (165.204.77.1) by
 SN4PR0601CA0021.namprd06.prod.outlook.com (2603:10b6:803:2f::31) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.3611.20 via Frontend
 Transport; Tue, 1 Dec 2020 00:47:29 +0000
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-HT: Tenant
X-MS-Office365-Filtering-Correlation-Id: 326c698e-0e2a-428e-9f12-08d89592aebc
X-MS-TrafficTypeDiagnostic: SN6PR12MB4751:
X-MS-Exchange-Transport-Forked: True
X-Microsoft-Antispam-PRVS: 
 <SN6PR12MB4751E9C28DD0767EA1E1E7138EF40@SN6PR12MB4751.namprd12.prod.outlook.com>
X-MS-Oob-TLC-OOBClassifiers: OLM:5516;
X-MS-Exchange-SenderADCheck: 1
X-Microsoft-Antispam: BCL:0;
X-Microsoft-Antispam-Message-Info: 
 4/XegLNebeQUf3qlxMF2lcRJL7xLmE/037NbcIXhFpOxQIkPbNrvtAzUmAXN/VGBZjNbNntojpOZAmPa6QYEmqetOTf0lUNr7temzijCDf/rhJy1bYJgSHDwLTDhdPK1whYvkftj7F3mMVOqUOIiuMj3a+e4BiC9y06CaCzAPykm7yUJe5UBUMjpeK6jWafoiVVnlPOyCV7h1QjYT7vodgjZGNdnZS41sI2sXGA43czdaeykMzq4pGAUCnkPD7tXC1Kgmn5jqavfgsB0A6donFZBrYEFD2caSZwpbbmBdmpEhHhRa1PZ9x04W+zX/9gTl+rGtqVZLbiQa0FaIk5l/g==
X-Forefront-Antispam-Report: 
 CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:SN6PR12MB2767.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(4636009)(376002)(396003)(346002)(366004)(39860400002)(136003)(83380400001)(6666004)(186003)(2616005)(6916009)(478600001)(66574015)(4326008)(316002)(16526019)(52116002)(956004)(26005)(6486002)(7696005)(8936002)(8676002)(7416002)(86362001)(66946007)(66476007)(5660300002)(66556008)(2906002)(36756003);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData: =?utf-8?q?0Ha2ZAp/ncEQjxNLO2SrdO0gudoXub?=
	=?utf-8?q?WINm87Q99QXNn85Qz36RPhDT/QWkpG3Fub5SnDKYpB0QiGB6BK1+am9+tV7qDT2q1?=
	=?utf-8?q?bfiuuCEP+hgnIJBPzKp1RTcKutVBIbhoeKNZx/fZtispox/3o8EbdGVCSjQsjsUBY?=
	=?utf-8?q?TnVd1zv8KtnAqX5yLhSwila8L8Dem8KIgsUI4YW1Nbmt+j4TQjBvajx7V4R/TqIcN?=
	=?utf-8?q?VSG0OeJSsCkAwsM/x5/49ZNUS7iWsMaRBGP1A6IpY3HvoqGUUZKu2HsqaCIVJWr3S?=
	=?utf-8?q?tKtKeuMNh8dBmA2Uuzzy1F5NxRgUfbIgbYvxO0E/lewhad4rQL1k9HqVmP/ojL4wQ?=
	=?utf-8?q?E+7KwK31b7jcZpsxD1ddwjy8SSoljA/2dxldx3dzCCqoaHjnR1ZRdtRIYkQAoZvOy?=
	=?utf-8?q?MAQGHwTnT94Dgvx9We0mEnWGmVoonO4PDYTo6mGF4f4Zl3FxyCQQA87eirBIolBXY?=
	=?utf-8?q?btjOLBAmhz+X5lzvT9UBQ7j/dKuSDmGKF4HZpMjc4wtIRWB56H8utoKhggKg/Jjb0?=
	=?utf-8?q?YoIZEfQnr/COVa7W12tGRCog0R57h7qhU8NUbp21PlN4ze3yA1Ra9CgML35g46PFS?=
	=?utf-8?q?4DIb2jX3mq6UvALCAsQC1NTUG8OByDSWcDIUy8DnV+QGXw+RWzxDqiqV8t4+RQTfG?=
	=?utf-8?q?B+ijLVrjAp2XzQxzmTAwhh1aFo7ZW6nw0D9ZIEDpcDPPAIcj/nxXzLVp48KLrLIfz?=
	=?utf-8?q?LS9QFnbqF4Ewc4G/iD1ClECHE4nJZx8iQQJKKRKoJtHrIdC6olCKXcllrqIF3S8uo?=
	=?utf-8?q?ALQ4G4JTu4Fh7bb9CvdMCeGiAE/Fh9TI7w2qyGx4RfT52AxiGm/w9fV/uKnP/RvEl?=
	=?utf-8?q?2wVLGeIsGj4aihW/DLBIWvBGiqcwKsxY0sRrZVGfxjypA6T9G6W9NTRxPdpEtv7pX?=
	=?utf-8?q?AAGlf6rJYu4o+qNN7LtG2OaGohF7s0zOWe7UZr0gIn69feau0ISQ7MGmyrMbWSaOu?=
	=?utf-8?q?t8KrYsq4FlRAj82Ktfs?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 326c698e-0e2a-428e-9f12-08d89592aebc
X-MS-Exchange-CrossTenant-AuthSource: SN6PR12MB2767.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 01 Dec 2020 00:47:30.3635
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: 
 92LVBXCLxOXtKuqTLMNYY10AKhgv1YVzmOPn19kM3tuwFev4pWmwVDj/a681ts5qYMnlcfuUfxKge3p0+V60dA==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: SN6PR12MB4751
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

From: Brijesh Singh <brijesh.singh@amd.com>

Invoke a hypercall when a memory region is changed from encrypted ->
decrypted and vice versa. Hypervisor needs to know the page encryption
status during the guest migration.

Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Ingo Molnar <mingo@redhat.com>
Cc: "H. Peter Anvin" <hpa@zytor.com>
Cc: Paolo Bonzini <pbonzini@redhat.com>
Cc: "Radim Krčmář" <rkrcmar@redhat.com>
Cc: Joerg Roedel <joro@8bytes.org>
Cc: Borislav Petkov <bp@suse.de>
Cc: Tom Lendacky <thomas.lendacky@amd.com>
Cc: x86@kernel.org
Cc: kvm@vger.kernel.org
Cc: linux-kernel@vger.kernel.org
Reviewed-by: Venu Busireddy <venu.busireddy@oracle.com>
Signed-off-by: Brijesh Singh <brijesh.singh@amd.com>
Signed-off-by: Ashish Kalra <ashish.kalra@amd.com>
---
 arch/x86/include/asm/paravirt.h       | 10 +++++
 arch/x86/include/asm/paravirt_types.h |  2 +
 arch/x86/kernel/paravirt.c            |  1 +
 arch/x86/mm/mem_encrypt.c             | 57 ++++++++++++++++++++++++++-
 arch/x86/mm/pat/set_memory.c          |  7 ++++
 5 files changed, 76 insertions(+), 1 deletion(-)

diff --git a/arch/x86/include/asm/paravirt.h b/arch/x86/include/asm/paravirt.h
index d25cc6830e89..7aeb7c508c53 100644
--- a/arch/x86/include/asm/paravirt.h
+++ b/arch/x86/include/asm/paravirt.h
@@ -84,6 +84,12 @@ static inline void paravirt_arch_exit_mmap(struct mm_struct *mm)
 	PVOP_VCALL1(mmu.exit_mmap, mm);
 }
 
+static inline void page_encryption_changed(unsigned long vaddr, int npages,
+						bool enc)
+{
+	PVOP_VCALL3(mmu.page_encryption_changed, vaddr, npages, enc);
+}
+
 #ifdef CONFIG_PARAVIRT_XXL
 static inline void load_sp0(unsigned long sp0)
 {
@@ -840,6 +846,10 @@ static inline void paravirt_arch_dup_mmap(struct mm_struct *oldmm,
 static inline void paravirt_arch_exit_mmap(struct mm_struct *mm)
 {
 }
+
+static inline void page_encryption_changed(unsigned long vaddr, int npages, bool enc)
+{
+}
 #endif
 #endif /* __ASSEMBLY__ */
 #endif /* _ASM_X86_PARAVIRT_H */
diff --git a/arch/x86/include/asm/paravirt_types.h b/arch/x86/include/asm/paravirt_types.h
index 0fad9f61c76a..d7787ec4d19f 100644
--- a/arch/x86/include/asm/paravirt_types.h
+++ b/arch/x86/include/asm/paravirt_types.h
@@ -209,6 +209,8 @@ struct pv_mmu_ops {
 
 	/* Hook for intercepting the destruction of an mm_struct. */
 	void (*exit_mmap)(struct mm_struct *mm);
+	void (*page_encryption_changed)(unsigned long vaddr, int npages,
+					bool enc);
 
 #ifdef CONFIG_PARAVIRT_XXL
 	struct paravirt_callee_save read_cr2;
diff --git a/arch/x86/kernel/paravirt.c b/arch/x86/kernel/paravirt.c
index 6c3407ba6ee9..52913356b6fa 100644
--- a/arch/x86/kernel/paravirt.c
+++ b/arch/x86/kernel/paravirt.c
@@ -340,6 +340,7 @@ struct paravirt_patch_template pv_ops = {
 			(void (*)(struct mmu_gather *, void *))tlb_remove_page,
 
 	.mmu.exit_mmap		= paravirt_nop,
+	.mmu.page_encryption_changed	= paravirt_nop,
 
 #ifdef CONFIG_PARAVIRT_XXL
 	.mmu.read_cr2		= __PV_IS_CALLEE_SAVE(native_read_cr2),
diff --git a/arch/x86/mm/mem_encrypt.c b/arch/x86/mm/mem_encrypt.c
index bc0833713be9..9d1ac65050d0 100644
--- a/arch/x86/mm/mem_encrypt.c
+++ b/arch/x86/mm/mem_encrypt.c
@@ -19,6 +19,7 @@
 #include <linux/kernel.h>
 #include <linux/bitops.h>
 #include <linux/dma-mapping.h>
+#include <linux/kvm_para.h>
 
 #include <asm/tlbflush.h>
 #include <asm/fixmap.h>
@@ -29,6 +30,7 @@
 #include <asm/processor-flags.h>
 #include <asm/msr.h>
 #include <asm/cmdline.h>
+#include <asm/kvm_para.h>
 
 #include "mm_internal.h"
 
@@ -198,6 +200,47 @@ void __init sme_early_init(void)
 		swiotlb_force = SWIOTLB_FORCE;
 }
 
+static void set_memory_enc_dec_hypercall(unsigned long vaddr, int npages,
+					bool enc)
+{
+	unsigned long sz = npages << PAGE_SHIFT;
+	unsigned long vaddr_end, vaddr_next;
+
+	vaddr_end = vaddr + sz;
+
+	for (; vaddr < vaddr_end; vaddr = vaddr_next) {
+		int psize, pmask, level;
+		unsigned long pfn;
+		pte_t *kpte;
+
+		kpte = lookup_address(vaddr, &level);
+		if (!kpte || pte_none(*kpte))
+			return;
+
+		switch (level) {
+		case PG_LEVEL_4K:
+			pfn = pte_pfn(*kpte);
+			break;
+		case PG_LEVEL_2M:
+			pfn = pmd_pfn(*(pmd_t *)kpte);
+			break;
+		case PG_LEVEL_1G:
+			pfn = pud_pfn(*(pud_t *)kpte);
+			break;
+		default:
+			return;
+		}
+
+		psize = page_level_size(level);
+		pmask = page_level_mask(level);
+
+		kvm_sev_hypercall3(KVM_HC_PAGE_ENC_STATUS,
+				   pfn << PAGE_SHIFT, psize >> PAGE_SHIFT, enc);
+
+		vaddr_next = (vaddr & pmask) + psize;
+	}
+}
+
 static void __init __set_clr_pte_enc(pte_t *kpte, int level, bool enc)
 {
 	pgprot_t old_prot, new_prot;
@@ -255,12 +298,13 @@ static void __init __set_clr_pte_enc(pte_t *kpte, int level, bool enc)
 static int __init early_set_memory_enc_dec(unsigned long vaddr,
 					   unsigned long size, bool enc)
 {
-	unsigned long vaddr_end, vaddr_next;
+	unsigned long vaddr_end, vaddr_next, start;
 	unsigned long psize, pmask;
 	int split_page_size_mask;
 	int level, ret;
 	pte_t *kpte;
 
+	start = vaddr;
 	vaddr_next = vaddr;
 	vaddr_end = vaddr + size;
 
@@ -315,6 +359,8 @@ static int __init early_set_memory_enc_dec(unsigned long vaddr,
 
 	ret = 0;
 
+	set_memory_enc_dec_hypercall(start, PAGE_ALIGN(size) >> PAGE_SHIFT,
+					enc);
 out:
 	__flush_tlb_all();
 	return ret;
@@ -448,6 +494,15 @@ void __init mem_encrypt_init(void)
 	if (sev_active())
 		static_branch_enable(&sev_enable_key);
 
+#ifdef CONFIG_PARAVIRT
+	/*
+	 * With SEV, we need to make a hypercall when page encryption state is
+	 * changed.
+	 */
+	if (sev_active())
+		pv_ops.mmu.page_encryption_changed = set_memory_enc_dec_hypercall;
+#endif
+
 	print_mem_encrypt_feature_info();
 }
 
diff --git a/arch/x86/mm/pat/set_memory.c b/arch/x86/mm/pat/set_memory.c
index 40baa90e74f4..dcd4557bb7fa 100644
--- a/arch/x86/mm/pat/set_memory.c
+++ b/arch/x86/mm/pat/set_memory.c
@@ -27,6 +27,7 @@
 #include <asm/proto.h>
 #include <asm/memtype.h>
 #include <asm/set_memory.h>
+#include <asm/paravirt.h>
 
 #include "../mm_internal.h"
 
@@ -2012,6 +2013,12 @@ static int __set_memory_enc_dec(unsigned long addr, int numpages, bool enc)
 	 */
 	cpa_flush(&cpa, 0);
 
+	/* Notify hypervisor that a given memory range is mapped encrypted
+	 * or decrypted. The hypervisor will use this information during the
+	 * VM migration.
+	 */
+	page_encryption_changed(addr, numpages, enc);
+
 	return ret;
 }
 

From patchwork Tue Dec  1 00:47:36 2020
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-Patchwork-Submitter: Ashish Kalra <Ashish.Kalra@amd.com>
X-Patchwork-Id: 11941717
Return-Path: <kvm-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-16.8 required=3.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,HEADER_FROM_DIFFERENT_DOMAINS,INCLUDES_CR_TRAILER,INCLUDES_PATCH,
	MAILING_LIST_MULTI,MSGID_FROM_MTA_HEADER,SPF_HELO_NONE,SPF_PASS,URIBL_BLOCKED,
	USER_AGENT_GIT autolearn=unavailable autolearn_force=no version=3.4.0
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
	by smtp.lore.kernel.org (Postfix) with ESMTP id F2FEDC71155
	for <kvm@archiver.kernel.org>; Tue,  1 Dec 2020 00:48:55 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by mail.kernel.org (Postfix) with ESMTP id 9E6B020857
	for <kvm@archiver.kernel.org>; Tue,  1 Dec 2020 00:48:55 +0000 (UTC)
Authentication-Results: mail.kernel.org;
	dkim=pass (1024-bit key) header.d=amdcloud.onmicrosoft.com
 header.i=@amdcloud.onmicrosoft.com header.b="KVnWddrr"
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1731034AbgLAAsT (ORCPT <rfc822;kvm@archiver.kernel.org>);
        Mon, 30 Nov 2020 19:48:19 -0500
Received: from mail-bn8nam12on2071.outbound.protection.outlook.com
 ([40.107.237.71]:20033
        "EHLO NAM12-BN8-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1726316AbgLAAsT (ORCPT <rfc822;kvm@vger.kernel.org>);
        Mon, 30 Nov 2020 19:48:19 -0500
ARC-Seal: i=1; a=rsa-sha256; s=arcselector9901; d=microsoft.com; cv=none;
 b=V9jadLR/rygYo2U21PiiiSU3pvUtmJyk9FqBnfnuYkNJUohTQSuLaWDmioRbhijFWRNg7iv0NG9r7kAMnqNsMS7zCBPLkl2leL/hWqHKENMdJrGSQ3n0p5Ep3erbnjQMhulg8WZNshP6yj58OVyHzu+qLTSfenKXO3LhuKJcaXvcruRIDy0OPJwRhTrZy39JiOSkC/D0/zsz6NdoenhMUeRsI0NIgPogyF975sK427FloqZzIMKzw57DNA8HxT8c1OU7vdjGnoJV9Baa7UGF8pMV7QaWy4mN1TqO086PFVw8nAPQtKLBDE9Bfg5NQxjD1EqAp1hHkRAsHjPPIAT1sw==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector9901;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=Lj0b4xph8HtRfjuyDWm7ZSlKkT59hKuGpUSh6cIllW4=;
 b=JdRzvg7dPfjujhJKDnz2IyrXrRLXCf97XgG8twV0Wlk12THU8k/vcgYxesC1mD6sQ/SDs068S1oHZdgWlpRx637VXcJO4pLfTaOIIb76VEAxZ2SVRpKBhiuO8QS2OANowMVpa8hGPeCcO6OOUwbA8Tt0X2GCrRiuD+CRC7CbdHm5qTFtU9VFNFiPsYfHLB6bmCzgRAxduP5APrlTDQNXV/czdhRMFNPQe0GQ1+SlQerI0hliYpknwN+LiDAJVcO1Srq12fp7JtIfTrHdD+TEKqM0Dv7+vwLGn+u8ymkgxSyYSzPmRSRYBpjhVuvsjChlAoASiMlRhLh68/VllFH5eg==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=amdcloud.onmicrosoft.com; s=selector2-amdcloud-onmicrosoft-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=Lj0b4xph8HtRfjuyDWm7ZSlKkT59hKuGpUSh6cIllW4=;
 b=KVnWddrrry2ir15cJdvk2puiZ/Lh0BwodObWdGBiK0rWimVBX1VW/f2Lo+kl2smXkHRecTP9tYYSMezBVtg+Qz0cWe/EGolMDqfP58ikqC3J/IWa3J+LGgQC8saj94B2LNhbkWci65beSRIhT8lqjMfHyjGlxmyQ0NN1TG+PO7U=
Authentication-Results: redhat.com; dkim=none (message not signed)
 header.d=none;redhat.com; dmarc=none action=none header.from=amd.com;
Received: from SN6PR12MB2767.namprd12.prod.outlook.com (2603:10b6:805:75::23)
 by SA0PR12MB4573.namprd12.prod.outlook.com (2603:10b6:806:9c::24) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.3611.22; Tue, 1 Dec
 2020 00:47:45 +0000
Received: from SN6PR12MB2767.namprd12.prod.outlook.com
 ([fe80::d8f2:fde4:5e1d:afec]) by SN6PR12MB2767.namprd12.prod.outlook.com
 ([fe80::d8f2:fde4:5e1d:afec%3]) with mapi id 15.20.3611.025; Tue, 1 Dec 2020
 00:47:45 +0000
From: Ashish Kalra <Ashish.Kalra@amd.com>
To: pbonzini@redhat.com
Cc: tglx@linutronix.de, mingo@redhat.com, hpa@zytor.com,
        joro@8bytes.org, bp@suse.de, thomas.lendacky@amd.com,
        x86@kernel.org, kvm@vger.kernel.org, linux-kernel@vger.kernel.org,
        srutherford@google.com, brijesh.singh@amd.com,
        dovmurik@linux.vnet.ibm.com, tobin@ibm.com, jejb@linux.ibm.com,
        frankeh@us.ibm.com, dgilbert@redhat.com
Subject: [PATCH v2 5/9] KVM: x86: Introduce KVM_SET_PAGE_ENC_BITMAP ioctl
Date: Tue,  1 Dec 2020 00:47:36 +0000
Message-Id: 
 <6ed96d11482919c74a635905f7ab108bb4cdf6fc.1606782580.git.ashish.kalra@amd.com>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <cover.1606782580.git.ashish.kalra@amd.com>
References: <cover.1606782580.git.ashish.kalra@amd.com>
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: SN4PR0501CA0085.namprd05.prod.outlook.com
 (2603:10b6:803:22::23) To SN6PR12MB2767.namprd12.prod.outlook.com
 (2603:10b6:805:75::23)
MIME-Version: 1.0
X-MS-Exchange-MessageSentRepresentingType: 1
Received: from ashkalra_ubuntu_server.amd.com (165.204.77.1) by
 SN4PR0501CA0085.namprd05.prod.outlook.com (2603:10b6:803:22::23) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.3632.6 via Frontend
 Transport; Tue, 1 Dec 2020 00:47:45 +0000
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-HT: Tenant
X-MS-Office365-Filtering-Correlation-Id: e1a61024-203d-4f30-a297-08d89592b7de
X-MS-TrafficTypeDiagnostic: SA0PR12MB4573:
X-MS-Exchange-Transport-Forked: True
X-Microsoft-Antispam-PRVS: 
 <SA0PR12MB4573C7516247BDBDD02EDD9C8EF40@SA0PR12MB4573.namprd12.prod.outlook.com>
X-MS-Oob-TLC-OOBClassifiers: OLM:6790;
X-MS-Exchange-SenderADCheck: 1
X-Microsoft-Antispam: BCL:0;
X-Microsoft-Antispam-Message-Info: 
 FLs+xYSnn+mQtDYPZYc9mqF7HxrVygmmDTgs0E3DN9itFaUwodRU/77wmHaD4iDc4i+QEY65Q4OS68TvArOWIPFtn8XGz8pLyKwo4lvlWPCuzldh/ECcNeH5KYhMW35ecC0Hhty2Wyr8Q2ErfYRKvJK8XkwhXi5GldRqLLuv5c3SNDiosMeou4ZxOFAGboYCmTa4D7EHAI+n4Gshbh6Qb979MQyyrhC1OfJiCVUTqpwbYt6kFatFChoQPRkF4ivc4shzwX5LmQuuB0cd2T3nO1ndK84Pzwfu6V0KY9Xmc1ezIFlSsfQlziO9VH6uBkyZyBqlhrlwE+bwVrxF8O/7FQ==
X-Forefront-Antispam-Report: 
 CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:SN6PR12MB2767.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(4636009)(366004)(346002)(376002)(136003)(396003)(39860400002)(478600001)(6486002)(7696005)(316002)(4326008)(956004)(6666004)(8676002)(186003)(16526019)(8936002)(52116002)(66946007)(5660300002)(7416002)(2616005)(83380400001)(86362001)(26005)(2906002)(36756003)(66556008)(6916009)(66574015)(66476007);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData: =?utf-8?q?XGszGPMYYwT333vJ6j4wYJZqJVp7b5?=
	=?utf-8?q?heZonsr7F4E73+uZY66pKMD/s6meIrnTFsuVF73A1cwMN3l/MhZIYOvb0lCUbfjGp?=
	=?utf-8?q?7Bsk0uiY3YI+mrZcn0aALF7mp7g2087BE02HONrcee1cB6WgvCTpZq2V7vmwQyGMi?=
	=?utf-8?q?caX97IbLI/BWBcgNG67Y8x0gTrzN1NJECJ5fYlqkWbx88LZKST5iXgMO57Wt1LMY+?=
	=?utf-8?q?C86QoPCGQszO1WWkWv2pQvF8KHexijNpRkC+ujbmn/7WMneon57j6OEm69HgSYkBU?=
	=?utf-8?q?wzLH9Mb3pUvwi5IbY2/JyxMwOQwsFAWSQ6R9NZAxE+rvC1gOZlde7SpwmskK7O2q8?=
	=?utf-8?q?4OxfJhrQtIcFjpK83iEBwVBgz8UydlGLb6xK5E4dMXobmssYxsDv3zPEHd9TNdaF+?=
	=?utf-8?q?7A97z5uKM0e4CjgLy3jufBYfRGTaUUu92lWAoDmnuLCpKVMpPSdYv2ooPlObSJquY?=
	=?utf-8?q?bMzMY6QTr3iO3DgWDcw49P+IO+tyI9Fuajh10ZUqUU9p+010vUswXoqVrB6pbjqo9?=
	=?utf-8?q?paBzHIAKNHWYp1NfwiB/YiNDqe1kwDP2Qo3a0hAaAMHF4u2PgpqOBfqHJ8AWaKHSe?=
	=?utf-8?q?LZUgawMMLGO+SzpXpJcoEfW7ZwcRw93KFjybXat8bsUslNFiuRJTlGbjVprag/RDY?=
	=?utf-8?q?kMb5Datwukl4gn8UhXWzp2waHkq7zikEtcBIo6VxprhefyaasGi4t1iYePQfpbQ21?=
	=?utf-8?q?oxNLs0RpajrAos8ui2U2XzyyUszi7o2BC8wjfNCHuAmh+tb6yUqhFyoqnCuBsmoyF?=
	=?utf-8?q?BUNZILMRArPHZU0xoPgmnV5cggPqYNvy4PgwCI0Bctizk+6cVeJ7XfsdnA3YpmNo3?=
	=?utf-8?q?dU0kFQkY2RtWZNPvWbSDozW7Sh4bgVFkQHzBExxmmpNKipwiw6qRH/keADLZX4+g4?=
	=?utf-8?q?LoIL02iTfqDlZZvERmDx6ktu+lN52BIeo9Z6TJ3n03v0u8TTKYcR+SEu+Owf0LVUS?=
	=?utf-8?q?MBB690TtWneSzupofzv?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 e1a61024-203d-4f30-a297-08d89592b7de
X-MS-Exchange-CrossTenant-AuthSource: SN6PR12MB2767.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 01 Dec 2020 00:47:45.6889
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: 
 YtlLXbEk3wrcMh7ZDPX1GbFzyH5BHxEFiSIvFOVYhMSXMOkEw7mRDROdL7EOEXVyv13hdbiNeHjevzwj5rxUqA==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: SA0PR12MB4573
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

From: Brijesh Singh <brijesh.singh@amd.com>

The ioctl can be used to set page encryption bitmap for an
incoming guest.

Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Ingo Molnar <mingo@redhat.com>
Cc: "H. Peter Anvin" <hpa@zytor.com>
Cc: Paolo Bonzini <pbonzini@redhat.com>
Cc: "Radim Krčmář" <rkrcmar@redhat.com>
Cc: Joerg Roedel <joro@8bytes.org>
Cc: Borislav Petkov <bp@suse.de>
Cc: Tom Lendacky <thomas.lendacky@amd.com>
Cc: x86@kernel.org
Cc: kvm@vger.kernel.org
Cc: linux-kernel@vger.kernel.org
Reviewed-by: Venu Busireddy <venu.busireddy@oracle.com>
Signed-off-by: Brijesh Singh <brijesh.singh@amd.com>
Signed-off-by: Ashish Kalra <ashish.kalra@amd.com>
---
 Documentation/virt/kvm/api.rst  | 44 +++++++++++++++++++++++++++++
 arch/x86/include/asm/kvm_host.h |  2 ++
 arch/x86/kvm/svm/sev.c          | 50 +++++++++++++++++++++++++++++++++
 arch/x86/kvm/svm/svm.c          |  1 +
 arch/x86/kvm/svm/svm.h          |  1 +
 arch/x86/kvm/x86.c              | 12 ++++++++
 include/uapi/linux/kvm.h        |  1 +
 7 files changed, 111 insertions(+)

diff --git a/Documentation/virt/kvm/api.rst b/Documentation/virt/kvm/api.rst
index ae410f4332ab..1a3336cbbfe8 100644
--- a/Documentation/virt/kvm/api.rst
+++ b/Documentation/virt/kvm/api.rst
@@ -4698,6 +4698,28 @@ or shared. The bitmap can be used during the guest migration. If the page
 is private then the userspace need to use SEV migration commands to transmit
 the page.
 
+4.126 KVM_SET_PAGE_ENC_BITMAP (vm ioctl)
+---------------------------------------
+
+:Capability: basic
+:Architectures: x86
+:Type: vm ioctl
+:Parameters: struct kvm_page_enc_bitmap (in/out)
+:Returns: 0 on success, -1 on error
+
+/* for KVM_SET_PAGE_ENC_BITMAP */
+struct kvm_page_enc_bitmap {
+	__u64 start_gfn;
+	__u64 num_pages;
+	union {
+		void __user *enc_bitmap; /* one bit per page */
+		__u64 padding2;
+	};
+};
+
+During the guest live migration the outgoing guest exports its page encryption
+bitmap, the KVM_SET_PAGE_ENC_BITMAP can be used to build the page encryption
+bitmap for an incoming guest.
 
 4.125 KVM_S390_PV_COMMAND
 -------------------------
@@ -4852,6 +4874,28 @@ into user space.
 If a vCPU is in running state while this ioctl is invoked, the vCPU may
 experience inconsistent filtering behavior on MSR accesses.
 
+4.126 KVM_SET_PAGE_ENC_BITMAP (vm ioctl)
+---------------------------------------
+
+:Capability: basic
+:Architectures: x86
+:Type: vm ioctl
+:Parameters: struct kvm_page_enc_bitmap (in/out)
+:Returns: 0 on success, -1 on error
+
+/* for KVM_SET_PAGE_ENC_BITMAP */
+struct kvm_page_enc_bitmap {
+	__u64 start_gfn;
+	__u64 num_pages;
+	union {
+		void __user *enc_bitmap; /* one bit per page */
+		__u64 padding2;
+	};
+};
+
+During the guest live migration the outgoing guest exports its page encryption
+bitmap, the KVM_SET_PAGE_ENC_BITMAP can be used to build the page encryption
+bitmap for an incoming guest.
 
 5. The kvm_run structure
 ========================
diff --git a/arch/x86/include/asm/kvm_host.h b/arch/x86/include/asm/kvm_host.h
index 8c2e40199ecb..352ebc576036 100644
--- a/arch/x86/include/asm/kvm_host.h
+++ b/arch/x86/include/asm/kvm_host.h
@@ -1286,6 +1286,8 @@ struct kvm_x86_ops {
 				  unsigned long sz, unsigned long mode);
 	int (*get_page_enc_bitmap)(struct kvm *kvm,
 				struct kvm_page_enc_bitmap *bmap);
+	int (*set_page_enc_bitmap)(struct kvm *kvm,
+				struct kvm_page_enc_bitmap *bmap);
 };
 
 struct kvm_x86_nested_ops {
diff --git a/arch/x86/kvm/svm/sev.c b/arch/x86/kvm/svm/sev.c
index a6586dd29767..e99ea9c711de 100644
--- a/arch/x86/kvm/svm/sev.c
+++ b/arch/x86/kvm/svm/sev.c
@@ -1084,6 +1084,56 @@ int svm_get_page_enc_bitmap(struct kvm *kvm,
 	return ret;
 }
 
+int svm_set_page_enc_bitmap(struct kvm *kvm,
+				   struct kvm_page_enc_bitmap *bmap)
+{
+	struct kvm_sev_info *sev = &to_kvm_svm(kvm)->sev_info;
+	unsigned long gfn_start, gfn_end;
+	unsigned long *bitmap;
+	unsigned long sz;
+	int ret;
+
+	if (!sev_guest(kvm))
+		return -ENOTTY;
+	/* special case of resetting the complete bitmap */
+	if (!bmap->enc_bitmap) {
+		mutex_lock(&kvm->lock);
+		/* by default all pages are marked encrypted */
+		if (sev->page_enc_bmap_size)
+			bitmap_fill(sev->page_enc_bmap,
+				    sev->page_enc_bmap_size);
+		mutex_unlock(&kvm->lock);
+		return 0;
+	}
+
+	gfn_start = bmap->start_gfn;
+	gfn_end = gfn_start + bmap->num_pages;
+
+	sz = ALIGN(bmap->num_pages, BITS_PER_LONG) / 8;
+	bitmap = kmalloc(sz, GFP_KERNEL);
+	if (!bitmap)
+		return -ENOMEM;
+
+	ret = -EFAULT;
+	if (copy_from_user(bitmap, bmap->enc_bitmap, sz))
+		goto out;
+
+	mutex_lock(&kvm->lock);
+	ret = sev_resize_page_enc_bitmap(kvm, gfn_end);
+	if (ret)
+		goto unlock;
+
+	bitmap_copy(sev->page_enc_bmap + BIT_WORD(gfn_start), bitmap,
+		    (gfn_end - gfn_start));
+
+	ret = 0;
+unlock:
+	mutex_unlock(&kvm->lock);
+out:
+	kfree(bitmap);
+	return ret;
+}
+
 int svm_mem_enc_op(struct kvm *kvm, void __user *argp)
 {
 	struct kvm_sev_cmd sev_cmd;
diff --git a/arch/x86/kvm/svm/svm.c b/arch/x86/kvm/svm/svm.c
index bff89cab3ed0..6ebdf20773ea 100644
--- a/arch/x86/kvm/svm/svm.c
+++ b/arch/x86/kvm/svm/svm.c
@@ -4315,6 +4315,7 @@ static struct kvm_x86_ops svm_x86_ops __initdata = {
 
 	.page_enc_status_hc = svm_page_enc_status_hc,
 	.get_page_enc_bitmap = svm_get_page_enc_bitmap,
+	.set_page_enc_bitmap = svm_set_page_enc_bitmap,
 };
 
 static struct kvm_x86_init_ops svm_init_ops __initdata = {
diff --git a/arch/x86/kvm/svm/svm.h b/arch/x86/kvm/svm/svm.h
index 4ce73f1034b9..2268c0ab650b 100644
--- a/arch/x86/kvm/svm/svm.h
+++ b/arch/x86/kvm/svm/svm.h
@@ -414,6 +414,7 @@ void sync_nested_vmcb_control(struct vcpu_svm *svm);
 int svm_page_enc_status_hc(struct kvm *kvm, unsigned long gpa,
                            unsigned long npages, unsigned long enc);
 int svm_get_page_enc_bitmap(struct kvm *kvm, struct kvm_page_enc_bitmap *bmap);
+int svm_set_page_enc_bitmap(struct kvm *kvm, struct kvm_page_enc_bitmap *bmap);
 
 extern struct kvm_x86_nested_ops svm_nested_ops;
 
diff --git a/arch/x86/kvm/x86.c b/arch/x86/kvm/x86.c
index d3cb95a4dd55..3cf64a94004f 100644
--- a/arch/x86/kvm/x86.c
+++ b/arch/x86/kvm/x86.c
@@ -5707,6 +5707,18 @@ long kvm_arch_vm_ioctl(struct file *filp,
 			r = kvm_x86_ops.get_page_enc_bitmap(kvm, &bitmap);
 		break;
 	}
+	case KVM_SET_PAGE_ENC_BITMAP: {
+		struct kvm_page_enc_bitmap bitmap;
+
+		r = -EFAULT;
+		if (copy_from_user(&bitmap, argp, sizeof(bitmap)))
+			goto out;
+
+		r = -ENOTTY;
+		if (kvm_x86_ops.set_page_enc_bitmap)
+			r = kvm_x86_ops.set_page_enc_bitmap(kvm, &bitmap);
+		break;
+	}
 	default:
 		r = -ENOTTY;
 	}
diff --git a/include/uapi/linux/kvm.h b/include/uapi/linux/kvm.h
index d0b9171bdb03..8e1adcd598a8 100644
--- a/include/uapi/linux/kvm.h
+++ b/include/uapi/linux/kvm.h
@@ -1574,6 +1574,7 @@ struct kvm_pv_cmd {
 #define KVM_RESET_DIRTY_RINGS		_IO(KVMIO, 0xc7)
 
 #define KVM_GET_PAGE_ENC_BITMAP	_IOW(KVMIO, 0xc6, struct kvm_page_enc_bitmap)
+#define KVM_SET_PAGE_ENC_BITMAP	_IOW(KVMIO, 0xc7, struct kvm_page_enc_bitmap)
 
 /* Secure Encrypted Virtualization command */
 enum sev_cmd_id {

From patchwork Tue Dec  1 00:47:51 2020
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Ashish Kalra <Ashish.Kalra@amd.com>
X-Patchwork-Id: 11941725
Return-Path: <kvm-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-16.8 required=3.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,HEADER_FROM_DIFFERENT_DOMAINS,INCLUDES_CR_TRAILER,INCLUDES_PATCH,
	MAILING_LIST_MULTI,MSGID_FROM_MTA_HEADER,SPF_HELO_NONE,SPF_PASS,URIBL_BLOCKED,
	USER_AGENT_GIT autolearn=ham autolearn_force=no version=3.4.0
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 95EE3C71156
	for <kvm@archiver.kernel.org>; Tue,  1 Dec 2020 00:49:39 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by mail.kernel.org (Postfix) with ESMTP id 5AC8420857
	for <kvm@archiver.kernel.org>; Tue,  1 Dec 2020 00:49:39 +0000 (UTC)
Authentication-Results: mail.kernel.org;
	dkim=pass (1024-bit key) header.d=amdcloud.onmicrosoft.com
 header.i=@amdcloud.onmicrosoft.com header.b="rG1n2D/e"
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1731175AbgLAAtZ (ORCPT <rfc822;kvm@archiver.kernel.org>);
        Mon, 30 Nov 2020 19:49:25 -0500
Received: from mail-mw2nam10on2070.outbound.protection.outlook.com
 ([40.107.94.70]:43744
        "EHLO NAM10-MW2-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1731164AbgLAAtZ (ORCPT <rfc822;kvm@vger.kernel.org>);
        Mon, 30 Nov 2020 19:49:25 -0500
ARC-Seal: i=1; a=rsa-sha256; s=arcselector9901; d=microsoft.com; cv=none;
 b=asqgm/AptjJwV4Dq64WVra1R2ExJnIir6JFiwFfRt+gLuO/yRfEIcsPkrw6j9R91mpigKsKFNOK8ACGVeDhFugVwSGFL+Gjxh86rqzfANqWwelcvT5Krj2rA8qMB/kPJfu8p4i+nzf+epwx0jLiGcS2LPpilgZIoiYNLDMWBZw0IdPxRfckK4qGGwDOls4Q+kpyMBPxTZcTKp6FR2zSa5Uk8MVoDf0Sdt1fyN7Vztru3EAHLQzrupM81ejNeV9AOJEMmyClmI/YBoB2LaugdKjb805Moh5Tv9PFz86q6HbQiLYWbkpFOJr7KG+5k8dVEthdwb9W/w7fK5lRrd5AF7A==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector9901;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=LfjTj73r9E1MDANZStvNQbw43ITNMT9SAbhg2D9G7rM=;
 b=McOkAYzSQa4+BNA1qK53cHI8Ej7hKv05ICS/zdUemgohElcvM9edqR4Br+eX0mtRLRA5TbPQfTHPw7WwEcBTDHHnU3Wratpo6ijdr5Rd33tH+kXDzlU2EAuzBHCzHB+pjwbBBlf33wDt7YxLmUTLyblP3aDY0qp/eFnK6zDdxZ1pOSDgJ7X5S22XJ+qlYGYT5fj1X8sfasioA2k7/cNgCPb7IVVP+RJrfI/+Oejn/bpcydEHWxxtsUq55hlXVz51NqSS88DuIa85hE3+To1DkwaU7wMF8ta9U3i9dkbrEHcmBdc95mAT8XFJrGN03LQosS36LYf+COMk+2cWodAqBA==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=amdcloud.onmicrosoft.com; s=selector2-amdcloud-onmicrosoft-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=LfjTj73r9E1MDANZStvNQbw43ITNMT9SAbhg2D9G7rM=;
 b=rG1n2D/ee+NApkXhjKbDddqKOtQknH/TCd6FscNtE7ShoqTNdvpNWykB/eQzdQzCzsDe0MTGUKQJ5Z7gn8pIhyfNnDCiO4BmuletyrySpOaInFaDHlki75qZinbZx8bW3sEq/rJ3RSJ9v4EAhYSTlncDIB8bF3BRb35wBMV90lo=
Authentication-Results: redhat.com; dkim=none (message not signed)
 header.d=none;redhat.com; dmarc=none action=none header.from=amd.com;
Received: from SN6PR12MB2767.namprd12.prod.outlook.com (2603:10b6:805:75::23)
 by SN6PR12MB4751.namprd12.prod.outlook.com (2603:10b6:805:df::33) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.3611.24; Tue, 1 Dec
 2020 00:48:01 +0000
Received: from SN6PR12MB2767.namprd12.prod.outlook.com
 ([fe80::d8f2:fde4:5e1d:afec]) by SN6PR12MB2767.namprd12.prod.outlook.com
 ([fe80::d8f2:fde4:5e1d:afec%3]) with mapi id 15.20.3611.025; Tue, 1 Dec 2020
 00:48:01 +0000
From: Ashish Kalra <Ashish.Kalra@amd.com>
To: pbonzini@redhat.com
Cc: tglx@linutronix.de, mingo@redhat.com, hpa@zytor.com,
        joro@8bytes.org, bp@suse.de, thomas.lendacky@amd.com,
        x86@kernel.org, kvm@vger.kernel.org, linux-kernel@vger.kernel.org,
        srutherford@google.com, brijesh.singh@amd.com,
        dovmurik@linux.vnet.ibm.com, tobin@ibm.com, jejb@linux.ibm.com,
        frankeh@us.ibm.com, dgilbert@redhat.com
Subject: [PATCH v2 6/9] KVM: SVM: Add support for static allocation of unified
 Page Encryption Bitmap.
Date: Tue,  1 Dec 2020 00:47:51 +0000
Message-Id: 
 <b1a3224518020c7fd11375b45c2f8f09e257517a.1606782580.git.ashish.kalra@amd.com>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <cover.1606782580.git.ashish.kalra@amd.com>
References: <cover.1606782580.git.ashish.kalra@amd.com>
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: SA9PR11CA0012.namprd11.prod.outlook.com
 (2603:10b6:806:6e::17) To SN6PR12MB2767.namprd12.prod.outlook.com
 (2603:10b6:805:75::23)
MIME-Version: 1.0
X-MS-Exchange-MessageSentRepresentingType: 1
Received: from ashkalra_ubuntu_server.amd.com (165.204.77.1) by
 SA9PR11CA0012.namprd11.prod.outlook.com (2603:10b6:806:6e::17) with Microsoft
 SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.3611.25 via Frontend
 Transport; Tue, 1 Dec 2020 00:48:00 +0000
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-HT: Tenant
X-MS-Office365-Filtering-Correlation-Id: 7ef437d5-1839-481e-6c03-08d89592c11a
X-MS-TrafficTypeDiagnostic: SN6PR12MB4751:
X-MS-Exchange-Transport-Forked: True
X-Microsoft-Antispam-PRVS: 
 <SN6PR12MB4751A5D81E969699268601FC8EF40@SN6PR12MB4751.namprd12.prod.outlook.com>
X-MS-Oob-TLC-OOBClassifiers: OLM:267;
X-MS-Exchange-SenderADCheck: 1
X-Microsoft-Antispam: BCL:0;
X-Microsoft-Antispam-Message-Info: 
 RjbttJHemeR4BDnC72EURuHs/fGq3+LVqJ+n8BOkWCuWOZ/l1XMWibFVCeMqnaeaYSdPxGlTg+o+TR9StsUX09zvJZf527tgMh6Y7SPKWfJf5Wz4tvgcZjBnEfsiszm+KbfLeA93S9Lv48Bp8yN3bLKzcXreWFtmI+g2NggXKeYqjKqzmKBSq9bk/3tsZjfzNQtSjS90CeaZM1VK9dw4nN1nk1eAIz8mZjXXZZacJ250SXESVIb/QE/DapFMcKjmHm5jKIHBa3A9xmheQv3SGforF/OgEEKw1+HvJEvvvnxZ3ot0KUd4KXkBW++vqhlRsjVMGzwP8HxxEtaoJMerTQ==
X-Forefront-Antispam-Report: 
 CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:SN6PR12MB2767.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(4636009)(376002)(396003)(346002)(366004)(39860400002)(136003)(83380400001)(6666004)(186003)(2616005)(6916009)(478600001)(4326008)(316002)(16526019)(52116002)(956004)(26005)(6486002)(7696005)(8936002)(8676002)(7416002)(86362001)(66946007)(66476007)(5660300002)(66556008)(2906002)(36756003);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData: 
 xj2rIJApgHTvIYRoEqD1wP3r8UeVnzX5BkYNrWhg/g+No7enA2ZrP4mX1CuLF28XYCJ86UpgSk98qsdpGDgiKAwoOKGjEZSVwGR57kEiRvS+TYDkUgTKKEsamLRJRy3i4u9quYXCoPOH6YFUCaW6Y+ONGbE9GfKt8rnl4UsCHkab+vEg6bOwTi/B+KGW7dCfTgDqsSwXRxRQUvs2/F5SiXIu29psaD/Wp0WebZpgVQKiO0h77acEkCDduLlAoALP2yXE2efHvt2zst8mNEsVGjhKM+kAkKxSwTvXg/qM8vXk3M+I0bEL5fYiMP/qzXpVD++dFV78SBf8PYcsfhL6pRt6PxIuKQPaEQrIe+plrujll9LUgW8o9TPAkV+93QOQFauc5f/h60y5sNCYbdP9j1yDnxuMfmXJlP4rKTluONlrwnhnhyCqp9LiwHHE9vFSA4N1hd30dqn17BH9PhmdkAQnSJXbVxuwgs7e2TsE7AXNoAH4yL+xQwUxdwC9LMkV6N80TWxZEoMf1zXty0NPhOsKviw7zQjH85NWRdQWxJbVNabNmjgMtHjDBWmWwkUBG+Ua+uqkeWOHZ+elParmKrQeo1v1dQeUC6515Gd3ryl6yOVpt3/Bi3/XIfEIA5ic0rN6549Nziv2tBDKQbOC8tRvWAcx1e0wrOTZO834m23BSOVWt51Oe6E3cakHpfbtHdpbFPloLThuz2CbWuqyc043D29gn60gsMRXSYcWWoqjNJ8uqwtkiFFw3MWUGyazTWO5L0gW0ZBj2f5ZOZ+PhyOMXCU9p26q2zlitr4vygLTPbWHzP81LI9OzHE1gQg2V9JhiJoCo42f5khDK8QqIlKN/hzwg90FBEwL0JR20I+VthUyMMUnesUUIrCi2eQtIA9THaHd8UoFUwo5STfKpG6FuRuWy8R0nM/q9zRoE68EsK/So4u6ioiAv821VL74/BZMantuig4fj3+W5n3mwsS1TOzgxH+62BqLYzdajsdz5/XB+qwhBctlYac+9l+S
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 7ef437d5-1839-481e-6c03-08d89592c11a
X-MS-Exchange-CrossTenant-AuthSource: SN6PR12MB2767.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 01 Dec 2020 00:48:01.1672
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: 
 PkP6LrbMgRoKBAlV04DWO51ndBsIbP6lOsotfo5MSMbePEStHiBsIFkIJ6f7QUP+2nAclPk1068GAmbpNaDYAg==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: SN6PR12MB4751
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

From: Ashish Kalra <ashish.kalra@amd.com>

Add support for static allocation of the unified Page encryption bitmap by
extending kvm_arch_commit_memory_region() callack to add svm specific x86_ops
which can read the userspace provided memory region/memslots and calculate
the amount of guest RAM managed by the KVM and grow the bitmap based
on that information, i.e. the highest guest PA that is mapped by a memslot.

Signed-off-by: Ashish Kalra <ashish.kalra@amd.com>
---
 arch/x86/include/asm/kvm_host.h |  1 +
 arch/x86/kvm/svm/sev.c          | 35 +++++++++++++++++++++++++++++++++
 arch/x86/kvm/svm/svm.c          |  1 +
 arch/x86/kvm/svm/svm.h          |  1 +
 arch/x86/kvm/x86.c              |  5 +++++
 5 files changed, 43 insertions(+)

diff --git a/arch/x86/include/asm/kvm_host.h b/arch/x86/include/asm/kvm_host.h
index 352ebc576036..91fc22d793e8 100644
--- a/arch/x86/include/asm/kvm_host.h
+++ b/arch/x86/include/asm/kvm_host.h
@@ -1282,6 +1282,7 @@ struct kvm_x86_ops {
 
 	void (*migrate_timers)(struct kvm_vcpu *vcpu);
 	void (*msr_filter_changed)(struct kvm_vcpu *vcpu);
+	void (*commit_memory_region)(struct kvm *kvm, enum kvm_mr_change change);
 	int (*page_enc_status_hc)(struct kvm *kvm, unsigned long gpa,
 				  unsigned long sz, unsigned long mode);
 	int (*get_page_enc_bitmap)(struct kvm *kvm,
diff --git a/arch/x86/kvm/svm/sev.c b/arch/x86/kvm/svm/sev.c
index e99ea9c711de..8b089cef1eba 100644
--- a/arch/x86/kvm/svm/sev.c
+++ b/arch/x86/kvm/svm/sev.c
@@ -957,6 +957,41 @@ static int sev_resize_page_enc_bitmap(struct kvm *kvm, unsigned long new_size)
 	return 0;
 }
 
+void svm_commit_memory_region(struct kvm *kvm, enum kvm_mr_change change)
+{
+	struct kvm_memslots *slots;
+	struct kvm_memory_slot *memslot;
+	gfn_t start, end = 0;
+
+	spin_lock(&kvm->mmu_lock);
+	if (change == KVM_MR_CREATE) {
+		slots = kvm_memslots(kvm);
+		kvm_for_each_memslot(memslot, slots) {
+			start = memslot->base_gfn;
+			end = memslot->base_gfn + memslot->npages;
+			/*
+			 * KVM memslots is a sorted list, starting with
+			 * the highest mapped guest PA, so pick the topmost
+			 * valid guest PA.
+			 */
+			if (memslot->npages)
+				break;
+		}
+	}
+	spin_unlock(&kvm->mmu_lock);
+
+	if (end) {
+		/*
+		 * NORE: This callback is invoked in vm ioctl
+		 * set_user_memory_region, hence we can use a
+		 * mutex here.
+		 */
+		mutex_lock(&kvm->lock);
+		sev_resize_page_enc_bitmap(kvm, end);
+		mutex_unlock(&kvm->lock);
+	}
+}
+
 int svm_page_enc_status_hc(struct kvm *kvm, unsigned long gpa,
 				  unsigned long npages, unsigned long enc)
 {
diff --git a/arch/x86/kvm/svm/svm.c b/arch/x86/kvm/svm/svm.c
index 6ebdf20773ea..7aa7858c8209 100644
--- a/arch/x86/kvm/svm/svm.c
+++ b/arch/x86/kvm/svm/svm.c
@@ -4313,6 +4313,7 @@ static struct kvm_x86_ops svm_x86_ops __initdata = {
 
 	.msr_filter_changed = svm_msr_filter_changed,
 
+	.commit_memory_region = svm_commit_memory_region,
 	.page_enc_status_hc = svm_page_enc_status_hc,
 	.get_page_enc_bitmap = svm_get_page_enc_bitmap,
 	.set_page_enc_bitmap = svm_set_page_enc_bitmap,
diff --git a/arch/x86/kvm/svm/svm.h b/arch/x86/kvm/svm/svm.h
index 2268c0ab650b..5a4656bad681 100644
--- a/arch/x86/kvm/svm/svm.h
+++ b/arch/x86/kvm/svm/svm.h
@@ -415,6 +415,7 @@ int svm_page_enc_status_hc(struct kvm *kvm, unsigned long gpa,
                            unsigned long npages, unsigned long enc);
 int svm_get_page_enc_bitmap(struct kvm *kvm, struct kvm_page_enc_bitmap *bmap);
 int svm_set_page_enc_bitmap(struct kvm *kvm, struct kvm_page_enc_bitmap *bmap);
+void svm_commit_memory_region(struct kvm *kvm, enum kvm_mr_change change);
 
 extern struct kvm_x86_nested_ops svm_nested_ops;
 
diff --git a/arch/x86/kvm/x86.c b/arch/x86/kvm/x86.c
index 3cf64a94004f..c1acbd397b50 100644
--- a/arch/x86/kvm/x86.c
+++ b/arch/x86/kvm/x86.c
@@ -10717,6 +10717,11 @@ void kvm_arch_commit_memory_region(struct kvm *kvm,
 	/* Free the arrays associated with the old memslot. */
 	if (change == KVM_MR_MOVE)
 		kvm_arch_free_memslot(kvm, old);
+
+	if (change == KVM_MR_CREATE || change == KVM_MR_DELETE) {
+		if (kvm_x86_ops.commit_memory_region)
+			kvm_x86_ops.commit_memory_region(kvm, change);
+	}
 }
 
 void kvm_arch_flush_shadow_all(struct kvm *kvm)

From patchwork Tue Dec  1 00:48:07 2020
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Ashish Kalra <Ashish.Kalra@amd.com>
X-Patchwork-Id: 11941721
Return-Path: <kvm-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-16.8 required=3.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,HEADER_FROM_DIFFERENT_DOMAINS,INCLUDES_CR_TRAILER,INCLUDES_PATCH,
	MAILING_LIST_MULTI,MSGID_FROM_MTA_HEADER,SPF_HELO_NONE,SPF_PASS,URIBL_BLOCKED,
	USER_AGENT_GIT autolearn=unavailable autolearn_force=no version=3.4.0
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 9AA0CC63777
	for <kvm@archiver.kernel.org>; Tue,  1 Dec 2020 00:49:21 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by mail.kernel.org (Postfix) with ESMTP id 61B1020857
	for <kvm@archiver.kernel.org>; Tue,  1 Dec 2020 00:49:21 +0000 (UTC)
Authentication-Results: mail.kernel.org;
	dkim=pass (1024-bit key) header.d=amdcloud.onmicrosoft.com
 header.i=@amdcloud.onmicrosoft.com header.b="JjtJ9NSt"
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1731101AbgLAAs5 (ORCPT <rfc822;kvm@archiver.kernel.org>);
        Mon, 30 Nov 2020 19:48:57 -0500
Received: from mail-bn7nam10on2050.outbound.protection.outlook.com
 ([40.107.92.50]:4864
        "EHLO NAM10-BN7-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1727940AbgLAAs4 (ORCPT <rfc822;kvm@vger.kernel.org>);
        Mon, 30 Nov 2020 19:48:56 -0500
ARC-Seal: i=1; a=rsa-sha256; s=arcselector9901; d=microsoft.com; cv=none;
 b=nsr8Y0EOF3fiUrlon3vyA3F6Cz0lZN/j8an23XZ0bWimunv6L7rZ8THpXkZP7tNAm+w3FiDNvhG4lfsDDhd2X2Xc3kUE5IHZHttveQFajw4l85GPlhDZaiwCLMFedaif5UXDK1pkVWd46xcTy8MCJ4QFgulFv6zOsHKJBWwjnwwC3n1QjHfc6jSOYUGf/h5C3I8vwI3tZsLnrGB+MfPrYmB/joABf1Po6mQZe44/XFyrGTtXHDKgKcNpdD0SksQ9HHdg8O2Ih2wlj2K19ZZlbhX+KPhLdugJWF76XdtubRZjvrw2Rn6OL3PQDGjtlNav8hMJ6BfBTir9Z2P5nGkX6Q==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector9901;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=QVG+eUxGHSAHvJ6FCq1B3tjxHdMSDf14B/hANqfY+IU=;
 b=DudJVlEpMAiU+s6RaUWUP2QrGisW/mYwoJl/pmmG7Cd4uSt+bFOWBVLbXd2ny1h11Z6B+RFCmRkDReM8nPdqO7rrpnmKebiKV+gIyFknfYHcfv0aZG9dqcTKUp7A77lYJGj9DroTMqJdpuSO/tcdPIsuxSRfANVOYw98u+8WniyX+jw1i4Sh4Q7YvxveC6qzrCrpcc1XouzSqqSK++dlDZvY77MrtU6XZORoPA7ENyXjIbrDBcfci4EKqDRNF3/7bIII7mbuB8yU9MMMTRnfOqvHTo1xtwPCc8jh1lIVVmx9kD/24GRVcj4wMJtFwBumb5ZJ2i/QldvRQzmo9vcw9Q==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=amdcloud.onmicrosoft.com; s=selector2-amdcloud-onmicrosoft-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=QVG+eUxGHSAHvJ6FCq1B3tjxHdMSDf14B/hANqfY+IU=;
 b=JjtJ9NStxsZNK6LtF1/6ForDCqcZmR4PpuvBUB50dK+QIDw0vQss29o7LakbfZHnJ09fEF1kJZt0ZdwDe43xXXxuWeVVy1cq0gUFgm0ogZLmOktGLf5PCvDhcWJjdXWXIYXHAmYNVbjGnbOqybSy16WxL8DzYyqWYBcxtuvMpiw=
Authentication-Results: redhat.com; dkim=none (message not signed)
 header.d=none;redhat.com; dmarc=none action=none header.from=amd.com;
Received: from SN6PR12MB2767.namprd12.prod.outlook.com (2603:10b6:805:75::23)
 by SN6PR12MB4751.namprd12.prod.outlook.com (2603:10b6:805:df::33) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.3611.24; Tue, 1 Dec
 2020 00:48:17 +0000
Received: from SN6PR12MB2767.namprd12.prod.outlook.com
 ([fe80::d8f2:fde4:5e1d:afec]) by SN6PR12MB2767.namprd12.prod.outlook.com
 ([fe80::d8f2:fde4:5e1d:afec%3]) with mapi id 15.20.3611.025; Tue, 1 Dec 2020
 00:48:17 +0000
From: Ashish Kalra <Ashish.Kalra@amd.com>
To: pbonzini@redhat.com
Cc: tglx@linutronix.de, mingo@redhat.com, hpa@zytor.com,
        joro@8bytes.org, bp@suse.de, thomas.lendacky@amd.com,
        x86@kernel.org, kvm@vger.kernel.org, linux-kernel@vger.kernel.org,
        srutherford@google.com, brijesh.singh@amd.com,
        dovmurik@linux.vnet.ibm.com, tobin@ibm.com, jejb@linux.ibm.com,
        frankeh@us.ibm.com, dgilbert@redhat.com
Subject: [PATCH v2 7/9] KVM: x86: Mark _bss_decrypted section variables as
 decrypted in page encryption bitmap.
Date: Tue,  1 Dec 2020 00:48:07 +0000
Message-Id: 
 <047c39df25282c07cb3180a5c3a63f27ec8be134.1606782580.git.ashish.kalra@amd.com>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <cover.1606782580.git.ashish.kalra@amd.com>
References: <cover.1606782580.git.ashish.kalra@amd.com>
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: DM5PR20CA0009.namprd20.prod.outlook.com
 (2603:10b6:3:93::19) To SN6PR12MB2767.namprd12.prod.outlook.com
 (2603:10b6:805:75::23)
MIME-Version: 1.0
X-MS-Exchange-MessageSentRepresentingType: 1
Received: from ashkalra_ubuntu_server.amd.com (165.204.77.1) by
 DM5PR20CA0009.namprd20.prod.outlook.com (2603:10b6:3:93::19) with Microsoft
 SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.3611.20 via Frontend
 Transport; Tue, 1 Dec 2020 00:48:16 +0000
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-HT: Tenant
X-MS-Office365-Filtering-Correlation-Id: 21497cef-338e-49e5-adb0-08d89592cae9
X-MS-TrafficTypeDiagnostic: SN6PR12MB4751:
X-MS-Exchange-Transport-Forked: True
X-Microsoft-Antispam-PRVS: 
 <SN6PR12MB4751C1E8E1AB09C6CA4A349C8EF40@SN6PR12MB4751.namprd12.prod.outlook.com>
X-MS-Oob-TLC-OOBClassifiers: OLM:5797;
X-MS-Exchange-SenderADCheck: 1
X-Microsoft-Antispam: BCL:0;
X-Microsoft-Antispam-Message-Info: 
 ScZbNw6dhzIMG2YE/23P0CDAoFHNcO5LEeWr7DhJCoo5SmK/IDj9flHL2v9Dp88Z8AUA/AUHB3o09cJyB+K3tk+o1eyBHBX1YFEvRN65e6w1eOXdnCf5+tR20QmLUdm/XHCH6FkBI9/rSbOc4tuk6CjYi7gsOouicmTTmXd6HTp/eb/Y1AGBJPmOcaw0DgFzsCcIg05YvAw69p4c7zIR4BNk4pZJ7F0rMZ7vz1OcZ0CmNWY9rjX0NmMlPFah3QVhoBLnObL6a1WvCqBjSHONLEiS368BJr9SzZy5PyxSzdHQaRlAJLy3z7jCn9Nz3TCpFra94VmdFHp08MHSyI9nmA==
X-Forefront-Antispam-Report: 
 CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:SN6PR12MB2767.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(4636009)(376002)(396003)(346002)(366004)(39860400002)(136003)(83380400001)(6666004)(186003)(2616005)(6916009)(478600001)(4326008)(316002)(16526019)(52116002)(956004)(26005)(6486002)(7696005)(8936002)(8676002)(7416002)(86362001)(66946007)(66476007)(5660300002)(66556008)(2906002)(36756003);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData: 
 HovFRfkOk574YP1G83wgF/fRppQWxPsvwvZehONwRCrttqGWhC/bbcj079MNu904CkB3iYsDUycJBnwXecMMgCgTlFR8fg7dDeyQcfm20VlO6DJyKQ1TpD2SdEPqc9bgNefGyK8U8WTFv+OsSnbfrn95YKCINBBy68W3QcqbM/uH83ydWIYq2GySUR0PbiiJmIfSOD+zPGdNRBymZkW0cTE6dxxCSAoxfG7xfK7WFdN87gnTat7lptO6eDlamoFsX1dsd804fxF5tpzGtgFDlgyakrKFOoCJ6g0ovSKDEqAiZawtbg9JEwIdgC4SUatf0kjenlgBbAKvcB8059URJxJXOji/0mk5N+9IrLQN1rbSXKYiZs0PzNrPgO0wtfBeN59/yvxC+p+BftbKMyI7U6sDKxkZxz9o85xvMCDvHDcdSqiZ+OrvAmGS3K2U1UGyES2x5Q3jvbayjd5Ih1GbWhcr/qd2B5xn2ws5TcSwJ5156y1rVc3fJmvFv/vYLpwJmJ8ha7RRMJCw/WoiyOSxv9a8shhh7Rjutzow06clbaxPp9n5KXX15bNyX9W5JJnYa7ZauACHLjMtfcAAgGElrxhNS2wAuXSLkAR5ramA9T34yangcsu5WWEJFOL1Lk2/3ADUQjQA2EIoB1GjL9jlIDE38ScrYKmWLldqC0bvIfpFjHQz4zVGP5YmqceCP4wM5uXmROqsA9zDyluD4aVBtS/f/FrXUNYH3ihW4rZIc0xnQ0nktwrX23kTYteQ+RP6t149rkZEh7L0cInEmnQyl1HND81TfKYvl81/jaqV0mG5n9cYszPTw0khrJa2KHBElnU0xb/eaSLK5nyQO3OD2/NOB/LbkWq94go2MbsG+/KsfO7MZpS5XiN/Ee7rWm1kKpChf/YMrRHUzVvHrt+APW01AH4PIRMkfdOBkEADQvivYiMGn21N1GkybzaNw/oGGXR9ZqEMsLSlXPHEMk5lPKC3tqOrVaM6MMNuKiwxB6Xlt5I+oufoyxRIsrj8AZWg
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 21497cef-338e-49e5-adb0-08d89592cae9
X-MS-Exchange-CrossTenant-AuthSource: SN6PR12MB2767.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 01 Dec 2020 00:48:17.6800
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: 
 zxAltgtlvbQbFer5ZGclx4pjMkeqGPTaCns3ZYHNSYuL4C0v9bFUVWZFkczOZ9+/DebeEx2aliZiUI3X+j9fIg==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: SN6PR12MB4751
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

From: Ashish Kalra <ashish.kalra@amd.com>

Ensure that _bss_decrypted section variables such as hv_clock_boot and
wall_clock are marked as decrypted in the page encryption bitmap if
sev guest is active.

Signed-off-by: Ashish Kalra <ashish.kalra@amd.com>
---
 arch/x86/include/asm/mem_encrypt.h |  4 ++++
 arch/x86/kernel/kvmclock.c         | 12 ++++++++++++
 arch/x86/mm/mem_encrypt.c          |  6 ++++++
 3 files changed, 22 insertions(+)

diff --git a/arch/x86/include/asm/mem_encrypt.h b/arch/x86/include/asm/mem_encrypt.h
index 2f62bbdd9d12..a4fd6a4229eb 100644
--- a/arch/x86/include/asm/mem_encrypt.h
+++ b/arch/x86/include/asm/mem_encrypt.h
@@ -43,6 +43,8 @@ void __init sme_enable(struct boot_params *bp);
 
 int __init early_set_memory_decrypted(unsigned long vaddr, unsigned long size);
 int __init early_set_memory_encrypted(unsigned long vaddr, unsigned long size);
+void __init early_set_mem_enc_dec_hypercall(unsigned long vaddr, int npages,
+					    bool enc);
 
 void __init mem_encrypt_free_decrypted_mem(void);
 
@@ -82,6 +84,8 @@ static inline int __init
 early_set_memory_decrypted(unsigned long vaddr, unsigned long size) { return 0; }
 static inline int __init
 early_set_memory_encrypted(unsigned long vaddr, unsigned long size) { return 0; }
+static inline void __init
+early_set_mem_enc_dec_hypercall(unsigned long vaddr, int npages, bool enc) {}
 
 static inline void mem_encrypt_free_decrypted_mem(void) { }
 
diff --git a/arch/x86/kernel/kvmclock.c b/arch/x86/kernel/kvmclock.c
index aa593743acf6..94a4fbf80e44 100644
--- a/arch/x86/kernel/kvmclock.c
+++ b/arch/x86/kernel/kvmclock.c
@@ -333,6 +333,18 @@ void __init kvmclock_init(void)
 	pr_info("kvm-clock: Using msrs %x and %x",
 		msr_kvm_system_time, msr_kvm_wall_clock);
 
+	if (sev_active()) {
+		unsigned long nr_pages;
+		/*
+		 * sizeof(hv_clock_boot) is already PAGE_SIZE aligned
+		 */
+		early_set_mem_enc_dec_hypercall((unsigned long)hv_clock_boot,
+						1, 0);
+		nr_pages = DIV_ROUND_UP(sizeof(wall_clock), PAGE_SIZE);
+		early_set_mem_enc_dec_hypercall((unsigned long)&wall_clock,
+						nr_pages, 0);
+	}
+
 	this_cpu_write(hv_clock_per_cpu, &hv_clock_boot[0]);
 	kvm_register_clock("primary cpu clock");
 	pvclock_set_pvti_cpu0_va(hv_clock_boot);
diff --git a/arch/x86/mm/mem_encrypt.c b/arch/x86/mm/mem_encrypt.c
index 9d1ac65050d0..1bcfbcd2bfd7 100644
--- a/arch/x86/mm/mem_encrypt.c
+++ b/arch/x86/mm/mem_encrypt.c
@@ -376,6 +376,12 @@ int __init early_set_memory_encrypted(unsigned long vaddr, unsigned long size)
 	return early_set_memory_enc_dec(vaddr, size, true);
 }
 
+void __init early_set_mem_enc_dec_hypercall(unsigned long vaddr, int npages,
+					    bool enc)
+{
+	set_memory_enc_dec_hypercall(vaddr, npages, enc);
+}
+
 /*
  * SME and SEV are very similar but they are not the same, so there are
  * times that the kernel will need to distinguish between SME and SEV. The

From patchwork Tue Dec  1 00:48:23 2020
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Ashish Kalra <Ashish.Kalra@amd.com>
X-Patchwork-Id: 11941723
Return-Path: <kvm-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-16.8 required=3.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,HEADER_FROM_DIFFERENT_DOMAINS,INCLUDES_CR_TRAILER,INCLUDES_PATCH,
	MAILING_LIST_MULTI,MSGID_FROM_MTA_HEADER,SPF_HELO_NONE,SPF_PASS,URIBL_BLOCKED,
	USER_AGENT_GIT autolearn=unavailable autolearn_force=no version=3.4.0
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 4F1B9C71155
	for <kvm@archiver.kernel.org>; Tue,  1 Dec 2020 00:49:39 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by mail.kernel.org (Postfix) with ESMTP id 0FC0520857
	for <kvm@archiver.kernel.org>; Tue,  1 Dec 2020 00:49:39 +0000 (UTC)
Authentication-Results: mail.kernel.org;
	dkim=pass (1024-bit key) header.d=amdcloud.onmicrosoft.com
 header.i=@amdcloud.onmicrosoft.com header.b="q4xDBKV3"
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1731134AbgLAAtU (ORCPT <rfc822;kvm@archiver.kernel.org>);
        Mon, 30 Nov 2020 19:49:20 -0500
Received: from mail-bn7nam10on2050.outbound.protection.outlook.com
 ([40.107.92.50]:4864
        "EHLO NAM10-BN7-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1731119AbgLAAtT (ORCPT <rfc822;kvm@vger.kernel.org>);
        Mon, 30 Nov 2020 19:49:19 -0500
ARC-Seal: i=1; a=rsa-sha256; s=arcselector9901; d=microsoft.com; cv=none;
 b=HGn07hjKkwIteZ8Iy+RS4xTefEBI4rVuNbsX8GRwqAL7aF1Ivp4LoKjoVpZjnDuEvOsb9XPytnZuBsMxoAfyYVaG8D3Hk0r4shpBrznd/0Oi+WjZOLD7LjxDRjcriTCHAcJQOv/ok914FiVBiZk5OFqo1tukvu/WSp/2GHMYggMBMUFymrowHw0sysKBQ2ROOPUnH9pK/zv7qsLEtG47lQedlpnDlpoioiLt/8JmO1LDftg6eHVkyikTUxxN9OLo7e/eLhmqyamPHSZKYmiahI0Nobo3BWoRiivJZtj3Qw+3Ge9cE5fx+txsDlfLEXpNJSx2Yc6x9KC/UO800HdytA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector9901;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=GMm/eQKJw+rQ14sDUPcwk4EWWQ3Fl7hyawwQTrrgXy0=;
 b=NUJtgYS5na71kGbXyMfjLsocNiw3kjm67R7wXekw4iVebdNp7h3w0onlH87FxTbyvQ8QK9BlNvuA92LoYmKAJGGmjZaqAkEmCusw+4Y/UmuXBAFHP7omFxyB9IhEppSP5ICyT2ZzN1u+qqrR04DbtS+DewQ5BB5OXpzIl53yAH+jrJGkwhtgR1VUaNmMWDHaoKgb/ACheAQQMDX78DEa+o7GNeze8lSqFQGr5oYHAowVwmFX8GmRUXgXzyvJF9B1XHrGuI01a/A6Cdw3tT6x3DuxCMpaMfyGIsyBicG6b04FunM26MR318n/iLtoFNcwWYZnBTcODNfRWyJDrcBXfw==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=amdcloud.onmicrosoft.com; s=selector2-amdcloud-onmicrosoft-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=GMm/eQKJw+rQ14sDUPcwk4EWWQ3Fl7hyawwQTrrgXy0=;
 b=q4xDBKV3YFe+kJDtQO7sKcaP7huDNyp6iIRFK70nso7swN2pWlWEnFLF3r/VYeAkHS9dSasn9hrzhij8Ee9HQTopqXk3B8aGMIyaDYiicYzUNgMMcptJsyn1QUf+ENOoLB2nsSLI8WZ8N/EbeKyBnTPsPg1o7HtlXbV/u12S/50=
Authentication-Results: redhat.com; dkim=none (message not signed)
 header.d=none;redhat.com; dmarc=none action=none header.from=amd.com;
Received: from SN6PR12MB2767.namprd12.prod.outlook.com (2603:10b6:805:75::23)
 by SN6PR12MB4751.namprd12.prod.outlook.com (2603:10b6:805:df::33) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.3611.24; Tue, 1 Dec
 2020 00:48:50 +0000
Received: from SN6PR12MB2767.namprd12.prod.outlook.com
 ([fe80::d8f2:fde4:5e1d:afec]) by SN6PR12MB2767.namprd12.prod.outlook.com
 ([fe80::d8f2:fde4:5e1d:afec%3]) with mapi id 15.20.3611.025; Tue, 1 Dec 2020
 00:48:50 +0000
From: Ashish Kalra <Ashish.Kalra@amd.com>
To: pbonzini@redhat.com
Cc: tglx@linutronix.de, mingo@redhat.com, hpa@zytor.com,
        joro@8bytes.org, bp@suse.de, thomas.lendacky@amd.com,
        x86@kernel.org, kvm@vger.kernel.org, linux-kernel@vger.kernel.org,
        srutherford@google.com, brijesh.singh@amd.com,
        dovmurik@linux.vnet.ibm.com, tobin@ibm.com, jejb@linux.ibm.com,
        frankeh@us.ibm.com, dgilbert@redhat.com
Subject: [PATCH v2 8/9] KVM: x86: Add kexec support for SEV page encryption
 bitmap.
Date: Tue,  1 Dec 2020 00:48:23 +0000
Message-Id: 
 <515cc3e05fe96595371b393b89fd376ddc87b324.1606782580.git.ashish.kalra@amd.com>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <cover.1606782580.git.ashish.kalra@amd.com>
References: <cover.1606782580.git.ashish.kalra@amd.com>
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: DM5PR15CA0057.namprd15.prod.outlook.com
 (2603:10b6:3:ae::19) To SN6PR12MB2767.namprd12.prod.outlook.com
 (2603:10b6:805:75::23)
MIME-Version: 1.0
X-MS-Exchange-MessageSentRepresentingType: 1
Received: from ashkalra_ubuntu_server.amd.com (165.204.77.1) by
 DM5PR15CA0057.namprd15.prod.outlook.com (2603:10b6:3:ae::19) with Microsoft
 SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.3611.20 via Frontend
 Transport; Tue, 1 Dec 2020 00:48:49 +0000
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-HT: Tenant
X-MS-Office365-Filtering-Correlation-Id: e1c2b740-5b00-4e13-8737-08d89592de50
X-MS-TrafficTypeDiagnostic: SN6PR12MB4751:
X-MS-Exchange-Transport-Forked: True
X-Microsoft-Antispam-PRVS: 
 <SN6PR12MB47519F0817C66F34A6F374378EF40@SN6PR12MB4751.namprd12.prod.outlook.com>
X-MS-Oob-TLC-OOBClassifiers: OLM:3383;
X-MS-Exchange-SenderADCheck: 1
X-Microsoft-Antispam: BCL:0;
X-Microsoft-Antispam-Message-Info: 
 IodMQR0/0sok8l9FTazx2i0d4fvWaDY+qKVuHUa5yBE+x2UF85gGxn5DbhS8YeCpstjAFzDoeyW9BlSXtOm0yhKktpg0M6UpkybxKDGQTQF8WBd51My9NqZL6Udf1v/LfqjLkdOPOvkIe32vB0hVpO3K4rYjJWYUxyzu6CY+qO6Is/DbAIDRDt91baczbDCB1UBa4OkGMaPstzlc6hLtLICgnEMt7dI6mnpWoT6R7djPELdJZ6KZ4zTgZiky37kanv1j997HD4HCCpvX1/knZxxcolvE06933dL6vgMmpNqgwgCqWVUmtllt5jwQ/Vkxh20zJJRA9USX3+Tj30OEew==
X-Forefront-Antispam-Report: 
 CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:SN6PR12MB2767.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(4636009)(376002)(396003)(346002)(366004)(39860400002)(136003)(6666004)(186003)(2616005)(6916009)(478600001)(4326008)(316002)(16526019)(52116002)(956004)(26005)(6486002)(7696005)(8936002)(8676002)(7416002)(86362001)(66946007)(66476007)(5660300002)(66556008)(2906002)(36756003);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData: 
 8VCpEiuxNq5thbGXf1xcYv2cAcLU9MKq2W+MYSkexn0P2R9zMrdYmtn9bWhPix1QtPrlzYcrHoG4CX3iULkgns7GzHUQx60tMSh5kSglBXEqZ7ntJDdtrSt+eFCzvL4gSB9Iz7Fyo2zV3MRGC0dj8GQIog96lfRrHSb0mKIg62ltv8+TLDipCQSiFeo+2gnmShWhOnI8BldMe0GoshhxKIgsnPbYFB/SXIVVc6WmRQWKl20NiXmZdKHA5Q/FsXy1lPObjcwwzqRV8qKB4bhQxu2WGBbazsDOV5YG6IoXkRBEY3zpHSnhR96mmwdXAdCeLyTtDsi+CaM/KcDDScrct33smO3JV1PUoOZ1L0iGEawmxJ8WBYlnVCFQNKrp7VkzG+zZQRkIEBmnqoWiIuqq2X7DqmTzkfC/PWBQH0GpkPcdEW+7M+vz0SYINR4c7AV10xqPrLoWA4asbRu4UA8e5GtPEJOQIkac++atBK6PJ2zneB7W54YVB25PEGAc81xGTHBUnhUZIh+7tNk0oGLvOVr4CvsoFGsRykhmqwYHM/GUK8K9xIiO9ZtSIPTAHc1kQlCtV3k/oXqya/a1YJeraEtvcNHS44TE6tO/ckrWEgxMHUSvZFgE2o8pusFeO007siTX0XndbZlAQoa8WRIkurnUblmRUsQ3JlfTVvFgUxKJuQWjHS8kVmCU4qjC1pGy3+QDLhoNG8Uw44ycqffrj0xkmUXbVyvjG/pDzu/+Q0hBxCdGFZFxF6tNh/ogwcNesjeCxN3BvJWr4wFrfUiBnbeI56Q4bo6DIWf4uPmJ/PPvbvFb6xkAHS21PVhYNSoc7tBcRBcOHJvVfNbkjkslMjaRYBQuhyyqQG26+7KMxMIllgS5Np3u5UI/2C7w2/tO9+/U7ou028q8Dx1RnUFAigezReyrBGMSZOxeWs1X2GLE/vJnJrno7Y7mR8l16wWgfTw9WhqWkhMJ3vsB7uRlmAdTUUw74aopUXKuxtGu0qywjr9Zpd/Q7F1DHWsC1ZfD
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 e1c2b740-5b00-4e13-8737-08d89592de50
X-MS-Exchange-CrossTenant-AuthSource: SN6PR12MB2767.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 01 Dec 2020 00:48:50.2047
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: 
 u9xjxe1XZTqQF5yxd34SnDbgifMl6HHPdHnyji2EROnBwKVHtXSOggvmum775+YEkV2AcRuOltJV9fC9ka/89Q==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: SN6PR12MB4751
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

From: Ashish Kalra <ashish.kalra@amd.com>

Reset the host's page encryption bitmap related to kernel
specific page encryption status settings before we load a
new kernel by kexec. We cannot reset the complete
page encryption bitmap here as we need to retain the
UEFI/OVMF firmware specific settings.

The host's page encryption bitmap is maintained for the
guest to keep the encrypted/decrypted state of the guest pages,
therefore we need to explicitly mark all shared pages as
encrypted again before rebooting into the new guest kernel.

Signed-off-by: Ashish Kalra <ashish.kalra@amd.com>
---
 arch/x86/kernel/kvm.c | 28 ++++++++++++++++++++++++++++
 1 file changed, 28 insertions(+)

diff --git a/arch/x86/kernel/kvm.c b/arch/x86/kernel/kvm.c
index 7f57ede3cb8e..55d845e025b2 100644
--- a/arch/x86/kernel/kvm.c
+++ b/arch/x86/kernel/kvm.c
@@ -38,6 +38,7 @@
 #include <asm/cpuidle_haltpoll.h>
 #include <asm/ptrace.h>
 #include <asm/svm.h>
+#include <asm/e820/api.h>
 
 DEFINE_STATIC_KEY_FALSE(kvm_async_pf_enabled);
 
@@ -383,6 +384,33 @@ static void kvm_pv_guest_cpu_reboot(void *unused)
 	 */
 	if (kvm_para_has_feature(KVM_FEATURE_PV_EOI))
 		wrmsrl(MSR_KVM_PV_EOI_EN, 0);
+	/*
+	 * Reset the host's page encryption bitmap related to kernel
+	 * specific page encryption status settings before we load a
+	 * new kernel by kexec. NOTE: We cannot reset the complete
+	 * page encryption bitmap here as we need to retain the
+	 * UEFI/OVMF firmware specific settings.
+	 */
+	if (sev_active() & (smp_processor_id() == 0)) {
+		int i;
+		unsigned long nr_pages;
+
+		for (i = 0; i < e820_table->nr_entries; i++) {
+			struct e820_entry *entry = &e820_table->entries[i];
+			unsigned long start_pfn;
+			unsigned long end_pfn;
+
+			if (entry->type != E820_TYPE_RAM)
+				continue;
+
+			start_pfn = entry->addr >> PAGE_SHIFT;
+			end_pfn = (entry->addr + entry->size) >> PAGE_SHIFT;
+			nr_pages = DIV_ROUND_UP(entry->size, PAGE_SIZE);
+
+			kvm_sev_hypercall3(KVM_HC_PAGE_ENC_STATUS,
+					   entry->addr, nr_pages, 1);
+		}
+	}
 	kvm_pv_disable_apf();
 	kvm_disable_steal_time();
 }

From patchwork Tue Dec  1 00:48:55 2020
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Ashish Kalra <Ashish.Kalra@amd.com>
X-Patchwork-Id: 11941727
Return-Path: <kvm-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-16.8 required=3.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,HEADER_FROM_DIFFERENT_DOMAINS,INCLUDES_CR_TRAILER,INCLUDES_PATCH,
	MAILING_LIST_MULTI,MSGID_FROM_MTA_HEADER,SPF_HELO_NONE,SPF_PASS,URIBL_BLOCKED,
	USER_AGENT_GIT autolearn=ham autolearn_force=no version=3.4.0
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 2A315C71155
	for <kvm@archiver.kernel.org>; Tue,  1 Dec 2020 00:50:03 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by mail.kernel.org (Postfix) with ESMTP id DFD6220809
	for <kvm@archiver.kernel.org>; Tue,  1 Dec 2020 00:50:02 +0000 (UTC)
Authentication-Results: mail.kernel.org;
	dkim=pass (1024-bit key) header.d=amdcloud.onmicrosoft.com
 header.i=@amdcloud.onmicrosoft.com header.b="tnKF3BXO"
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2389198AbgLAAtq (ORCPT <rfc822;kvm@archiver.kernel.org>);
        Mon, 30 Nov 2020 19:49:46 -0500
Received: from mail-bn7nam10on2050.outbound.protection.outlook.com
 ([40.107.92.50]:4864
        "EHLO NAM10-BN7-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1731173AbgLAAtp (ORCPT <rfc822;kvm@vger.kernel.org>);
        Mon, 30 Nov 2020 19:49:45 -0500
ARC-Seal: i=1; a=rsa-sha256; s=arcselector9901; d=microsoft.com; cv=none;
 b=haib30Oq5dyF5cWbdYeclQCGRwZnuwRpZlcY3He+O5BLhtDkOCxwlDq3sTujOPjTLU1B19yVBuuYQDoejfeUiIW0Dw+FTDOLYhDKINhka8M4+qGexSueWvvaWIrW0QBJDtQPeARhkFMS2oUD7GesMfsTgAITbotP3uNWy/rTM0loyWHE7WQ9v0C32RiX8X6HXfUH9OjmP57xPgDpKhyxvp1NXxbmxZ0ekpSU4E8BblNPeRJrJnFZL8D1ZxysDDuSwIaE4X6ygECaQA2lSHfa9xvEm2NoZE2BAmDxP18NmSqNu1EoiYViG3OA9YfyRT2H54cqDYqjxaGsCX6lQCF5jw==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector9901;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=kaz3IPhNOXC4h/JSeiegVZV1vWlNhyCRDAW+WYkCYZM=;
 b=EuEIaZmSCZkYLKeFCjJv0f0Vx5CaUE9F1rR6WlnucCj9pomGWmPOutuRklaOvh1LQfSjodyyPLe85q9+kZvAQATaAMUHqCkEGvrDN0ZfvL1+jvqsypYZI0r3v11yhjFbbfQBD4hhyjg2/2RZzoue+PZFZRJhBfYFs6RFMEHC/b1hNm2BQA4nZ8Ji+jMCflr7/uQn3WPjykPs8H23XLSlCuWCbWu50gXy9vYFuf+peKFaYjemXVefCv39dJ5MRx4VQc33grJcOdxdCcHE/Wf9lpllJ++UtBFiiadSc6h8YR7Wl99qq/7LRLV8XSMlMuuZOkZflyDxqNuXZ/Pq0G11cg==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=amdcloud.onmicrosoft.com; s=selector2-amdcloud-onmicrosoft-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=kaz3IPhNOXC4h/JSeiegVZV1vWlNhyCRDAW+WYkCYZM=;
 b=tnKF3BXOMfiQlbZKdbPC3foBviyVh41sN89X6yZh6gU0fpU5iJorrXqeE3ZSMFRMLVzvybRLApKj/guerJIXnbCdW0yd5zcUQIXp0MKfqAzN8KGB7oR/8rjQBQXS4wItOHU48pAm4Bezes+VSW1e6h3YFmQxQX2WkSbR/Kt9Wlc=
Authentication-Results: redhat.com; dkim=none (message not signed)
 header.d=none;redhat.com; dmarc=none action=none header.from=amd.com;
Received: from SN6PR12MB2767.namprd12.prod.outlook.com (2603:10b6:805:75::23)
 by SN6PR12MB4751.namprd12.prod.outlook.com (2603:10b6:805:df::33) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.3611.24; Tue, 1 Dec
 2020 00:49:08 +0000
Received: from SN6PR12MB2767.namprd12.prod.outlook.com
 ([fe80::d8f2:fde4:5e1d:afec]) by SN6PR12MB2767.namprd12.prod.outlook.com
 ([fe80::d8f2:fde4:5e1d:afec%3]) with mapi id 15.20.3611.025; Tue, 1 Dec 2020
 00:49:06 +0000
From: Ashish Kalra <Ashish.Kalra@amd.com>
To: pbonzini@redhat.com
Cc: tglx@linutronix.de, mingo@redhat.com, hpa@zytor.com,
        joro@8bytes.org, bp@suse.de, thomas.lendacky@amd.com,
        x86@kernel.org, kvm@vger.kernel.org, linux-kernel@vger.kernel.org,
        srutherford@google.com, brijesh.singh@amd.com,
        dovmurik@linux.vnet.ibm.com, tobin@ibm.com, jejb@linux.ibm.com,
        frankeh@us.ibm.com, dgilbert@redhat.com
Subject: [PATCH v2 9/9] KVM: SVM: Bypass DBG_DECRYPT API calls for unecrypted
 guest memory.
Date: Tue,  1 Dec 2020 00:48:55 +0000
Message-Id: 
 <6a3cf86ce0eb6cc18b0cdad61ed1266755e9b929.1606782580.git.ashish.kalra@amd.com>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <cover.1606782580.git.ashish.kalra@amd.com>
References: <cover.1606782580.git.ashish.kalra@amd.com>
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: DM3PR12CA0043.namprd12.prod.outlook.com
 (2603:10b6:0:56::11) To SN6PR12MB2767.namprd12.prod.outlook.com
 (2603:10b6:805:75::23)
MIME-Version: 1.0
X-MS-Exchange-MessageSentRepresentingType: 1
Received: from ashkalra_ubuntu_server.amd.com (165.204.77.1) by
 DM3PR12CA0043.namprd12.prod.outlook.com (2603:10b6:0:56::11) with Microsoft
 SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.3611.20 via Frontend
 Transport; Tue, 1 Dec 2020 00:49:05 +0000
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-HT: Tenant
X-MS-Office365-Filtering-Correlation-Id: f6a3d054-202e-4040-34d8-08d89592e7e7
X-MS-TrafficTypeDiagnostic: SN6PR12MB4751:
X-MS-Exchange-Transport-Forked: True
X-Microsoft-Antispam-PRVS: 
 <SN6PR12MB4751BA4B134BB0EF35CF0AB78EF40@SN6PR12MB4751.namprd12.prod.outlook.com>
X-MS-Oob-TLC-OOBClassifiers: OLM:747;
X-MS-Exchange-SenderADCheck: 1
X-Microsoft-Antispam: BCL:0;
X-Microsoft-Antispam-Message-Info: 
 ZfnJS+LD4bHoULZKXzQL4KwpvGZR/TgYGsxQYRcAhfqQSykg/xsB4vxFqn3q+K36YT+Sim1eK68RWdJNFwH8mthkupQCoCJE/nRLgdr1kkGVFYuzljd0foW3AM7dofFOT0qHVsJU1UUFKwEUQvrZGOhpW68vYk8L4oVQrqHXvR4/Zin48ELwlXjetmwtIOk5dWhlOW/v0AFA8I8KJbKfUcZGQJDHnNKlnSsSiwLGHoz2dK8MKuFu3OEam8YLwCMlc6jW6P9on1aUulbfUYGEdJfY72/XGCukorl8H7HdlxlVeZamS3wi9RhConGfJjHYK0EDnxvKaOuEZfF3X/fuuw==
X-Forefront-Antispam-Report: 
 CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:SN6PR12MB2767.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(4636009)(136003)(366004)(39860400002)(346002)(396003)(376002)(8676002)(7416002)(8936002)(2906002)(66476007)(5660300002)(66556008)(36756003)(86362001)(66946007)(2616005)(6916009)(4326008)(478600001)(83380400001)(186003)(6666004)(26005)(7696005)(6486002)(16526019)(52116002)(316002)(956004);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData: 
 GZu+8rzeVShCJoQXpt1OJx2KR5rgHOYGbjUSU5yULjmxT9CVBp4uOE64yFma2agm2o1e9JHjIqwwC1LCJ71oF6EfjbyBE5r/tju2tmirvqr6FIGGGIj1w9A/cWq/LT3FQTB8b44ymi7/tY1alGzQ2WLuqJNEMO779xLY8Z9gXy9EusOh77AaLtViFn9dfdwhkGGOGqOgyVkC0Sc0uJ4DQms3x8PfJtIbBULVUIl90T1UAgxTdIpUKACivIkqB3FfEg+0NdYu/wd39q75MX2s8Uf1yFy0WVZ9AkCfhnAk2SP0EhBA9h1XcCxkH/+Fj6/9Ke/51onCIDwQmrrtEKfq/sAPo0IoI70AXiUoX2StP74jBN9uorSd6DTepQuY2xOtgPKOpCrIlQZxtCdUEnw5dcJEGlAi7lCUvGUCGvTB0LgVR4ObRUK1AKWRpvUSvYtPsk1Ej0WFE1zQrOCmPHb1xzisfg0/EvKy6NI/xlvndZ34nTcUnVdC0nnbLg9LfV0Q6/yztv1Ozvo4zazGVilEUQzrhIbZfE0O9WU5tKMKrhCL5wSIG7xoQ+SLVKBRPamTriCEOJduiciW23mh/zdEnM/kXmYe8ON15ksJUgiCzOiUK7NEDqoVXdhLOpR6QI7knLmzQ0NfZArp4tAV9lqzgqEcwvTIrxzaqi5/7PO80XzEQmPw01lCPKHf43G4J0gaGPDewbHSnzl13anGRdDI7qx3SiwsTRsJGI8ahEXsWyuvQz2YYa4SdTBET0Ri+1Sv2+XJU0aMJAUaYfCZyhlDdhDMdklmfHhH2z8Jp5XYmscPmjoAX/qBud1SHgzi2SWj1PGM4Zz5YVGo/KtmA9CE2lYT4hbZKOyXOQpHOc3FcRZaCM3jxLgOq36NW4A3CgxkBxdPyXreNqVYZZQzSBIzVRtUQVGarcqm6VsW8JWIoj7nDTIv3cEsvJzIa4NTZqNlhXs6egxnfjcxOJMoWabOrPopXSBoAM1DritKwXfXh5FjjqRsqmD+j00x4xwcteVD
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 f6a3d054-202e-4040-34d8-08d89592e7e7
X-MS-Exchange-CrossTenant-AuthSource: SN6PR12MB2767.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 01 Dec 2020 00:49:06.2877
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: 
 be7767+lcx2tsqkjTnwhAo1gKKGL8pTMt54OIFXmELOcPzwbBBllVtkYuBgq2Uktc2tvSlOxO2BkciiA2x9xYA==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: SN6PR12MB4751
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

From: Ashish Kalra <ashish.kalra@amd.com>

For all explicitly unecrypted guest memory regions such as S/W IOTLB
bounce buffers, dma_decrypted() allocated regions and for guest regions
marked as "__bss_decrypted", ensure that DBG_DECRYPT API calls are
bypassed for such regions. The guest memory regions encryption status
is referenced using the page encryption bitmap.

Uses the two added infrastructure functions hva_to_memslot() and
hva_to_gfn().

Signed-off-by: Ashish Kalra <ashish.kalra@amd.com>
---
 arch/x86/kvm/svm/sev.c | 76 ++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 76 insertions(+)

diff --git a/arch/x86/kvm/svm/sev.c b/arch/x86/kvm/svm/sev.c
index 8b089cef1eba..2524a47531ee 100644
--- a/arch/x86/kvm/svm/sev.c
+++ b/arch/x86/kvm/svm/sev.c
@@ -763,6 +763,37 @@ static int __sev_dbg_encrypt_user(struct kvm *kvm, unsigned long paddr,
 	return ret;
 }
 
+static struct kvm_memory_slot *hva_to_memslot(struct kvm *kvm,
+					      unsigned long hva)
+{
+	struct kvm_memslots *slots = kvm_memslots(kvm);
+	struct kvm_memory_slot *memslot;
+
+	kvm_for_each_memslot(memslot, slots) {
+		if (hva >= memslot->userspace_addr &&
+		    hva < memslot->userspace_addr +
+			      (memslot->npages << PAGE_SHIFT))
+			return memslot;
+	}
+
+	return NULL;
+}
+
+static bool hva_to_gfn(struct kvm *kvm, unsigned long hva, gfn_t *gfn)
+{
+	struct kvm_memory_slot *memslot;
+	gpa_t gpa_offset;
+
+	memslot = hva_to_memslot(kvm, hva);
+	if (!memslot)
+		return false;
+
+	gpa_offset = hva - memslot->userspace_addr;
+	*gfn = ((memslot->base_gfn << PAGE_SHIFT) + gpa_offset) >> PAGE_SHIFT;
+
+	return true;
+}
+
 static int sev_dbg_crypt(struct kvm *kvm, struct kvm_sev_cmd *argp, bool dec)
 {
 	unsigned long vaddr, vaddr_end, next_vaddr;
@@ -792,6 +823,50 @@ static int sev_dbg_crypt(struct kvm *kvm, struct kvm_sev_cmd *argp, bool dec)
 	for (; vaddr < vaddr_end; vaddr = next_vaddr) {
 		int len, s_off, d_off;
 
+		if (dec) {
+			struct kvm_sev_info *sev = &to_kvm_svm(kvm)->sev_info;
+			struct page *src_tpage = NULL;
+			gfn_t gfn_start;
+			int srcu_idx;
+
+			/* ensure hva_to_gfn translations remain valid */
+			srcu_idx = srcu_read_lock(&kvm->srcu);
+			if (!hva_to_gfn(kvm, vaddr, &gfn_start)) {
+				srcu_read_unlock(&kvm->srcu, srcu_idx);
+				return -EINVAL;
+			}
+			if (sev->page_enc_bmap) {
+				if (!test_bit(gfn_start, sev->page_enc_bmap)) {
+					src_tpage = alloc_page(GFP_KERNEL);
+					if (!src_tpage) {
+						srcu_read_unlock(&kvm->srcu, srcu_idx);
+						return -ENOMEM;
+					}
+					/*
+					 * Since user buffer may not be page aligned, calculate the
+					 * offset within the page.
+					*/
+					s_off = vaddr & ~PAGE_MASK;
+					d_off = dst_vaddr & ~PAGE_MASK;
+					len = min_t(size_t, (PAGE_SIZE - s_off), size);
+
+					if (copy_from_user(page_address(src_tpage),
+							   (void __user *)(uintptr_t)vaddr, len)) {
+						__free_page(src_tpage);
+						srcu_read_unlock(&kvm->srcu, srcu_idx);
+						return -EFAULT;
+					}
+					if (copy_to_user((void __user *)(uintptr_t)dst_vaddr,
+							 page_address(src_tpage), len)) {
+						ret = -EFAULT;
+					}
+					__free_page(src_tpage);
+					srcu_read_unlock(&kvm->srcu, srcu_idx);
+					goto already_decrypted;
+				}
+			}
+		}
+
 		/* lock userspace source and destination page */
 		src_p = sev_pin_memory(kvm, vaddr & PAGE_MASK, PAGE_SIZE, &n, 0);
 		if (IS_ERR(src_p))
@@ -836,6 +911,7 @@ static int sev_dbg_crypt(struct kvm *kvm, struct kvm_sev_cmd *argp, bool dec)
 		sev_unpin_memory(kvm, src_p, n);
 		sev_unpin_memory(kvm, dst_p, n);
 
+already_decrypted:
 		if (ret)
 			goto err;
 
