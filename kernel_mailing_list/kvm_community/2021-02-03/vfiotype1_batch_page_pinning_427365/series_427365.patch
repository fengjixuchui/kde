From patchwork Wed Feb  3 20:47:54 2021
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Daniel Jordan <daniel.m.jordan@oracle.com>
X-Patchwork-Id: 12065307
Return-Path: <kvm-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-18.8 required=3.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,DKIM_VALID_AU,HEADER_FROM_DIFFERENT_DOMAINS,INCLUDES_CR_TRAILER,
	INCLUDES_PATCH,MAILING_LIST_MULTI,MSGID_FROM_MTA_HEADER,SPF_HELO_NONE,
	SPF_PASS,USER_AGENT_GIT autolearn=ham autolearn_force=no version=3.4.0
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 425C4C433E0
	for <kvm@archiver.kernel.org>; Wed,  3 Feb 2021 20:50:23 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by mail.kernel.org (Postfix) with ESMTP id DFD5A64F7C
	for <kvm@archiver.kernel.org>; Wed,  3 Feb 2021 20:50:22 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S232508AbhBCUuS (ORCPT <rfc822;kvm@archiver.kernel.org>);
        Wed, 3 Feb 2021 15:50:18 -0500
Received: from aserp2120.oracle.com ([141.146.126.78]:42628 "EHLO
        aserp2120.oracle.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S232124AbhBCUtc (ORCPT <rfc822;kvm@vger.kernel.org>);
        Wed, 3 Feb 2021 15:49:32 -0500
Received: from pps.filterd (aserp2120.oracle.com [127.0.0.1])
        by aserp2120.oracle.com (8.16.0.42/8.16.0.42) with SMTP id
 113KdAmk067581;
        Wed, 3 Feb 2021 20:48:15 GMT
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=oracle.com;
 h=from : to : cc :
 subject : date : message-id : in-reply-to : references :
 content-transfer-encoding : content-type : mime-version;
 s=corp-2020-01-29; bh=2ZreSZ/bhNS5lb4e8nZsVdrMkQw3askAFxPJQlHc5xY=;
 b=JY9cJI9ZkFlN9vNaSl5K35lgzV+ZpVH8Fh9Gp+LeINbZFLdhMsjdA/bKn1jiE4YpS6Vt
 zcO7bYWKC3zq6mHbK1M/gw+8wmUe3FQU/Wmw/NNACE4moitw5d1ybc2zJ0mYEuwy6MX7
 4TD743/I2dhEP7GucAZ3PG3vnvambPt7WIpY18D0JCS9VErFZl+88i5ErNGUxmkqzEdJ
 zNxcdEbCrUviZY5olotqWT8DngVjOx6tozz2oF+V89ITEWgYSPul+/ubeHXETpbMKPQy
 lZGKN1UCO4ycsljJf34rqQREtBeXvyTEVXiIjyu6EhZuAU2Dd3jgckHGZdev2vj/GrVT qg==
Received: from aserp3020.oracle.com (aserp3020.oracle.com [141.146.126.70])
        by aserp2120.oracle.com with ESMTP id 36cydm255k-1
        (version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256
 verify=OK);
        Wed, 03 Feb 2021 20:48:15 +0000
Received: from pps.filterd (aserp3020.oracle.com [127.0.0.1])
        by aserp3020.oracle.com (8.16.0.42/8.16.0.42) with SMTP id
 113Kj3ic135633;
        Wed, 3 Feb 2021 20:48:15 GMT
Received: from nam04-bn8-obe.outbound.protection.outlook.com
 (mail-bn8nam08lp2044.outbound.protection.outlook.com [104.47.74.44])
        by aserp3020.oracle.com with ESMTP id 36dhc1qb23-2
        (version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256
 verify=OK);
        Wed, 03 Feb 2021 20:48:14 +0000
ARC-Seal: i=1; a=rsa-sha256; s=arcselector9901; d=microsoft.com; cv=none;
 b=m5Kdgr09DIzhzZtj2qzlMI1p5qR2jGugM1C+DT4ByWkmQpUqfzDM/VEXD+jrjvF8UMHY8uMyB0l95OC2RAROYRFK/TP017wOU9OtOfUNH3Q1XAcu3imr6NDexbMQHcr5KlYXonzXBuDupbJw3zLpM0ICLWooYc8iYQRJMGoS3qli/vhFPYjrEidNhz3kbTN65y+uHKl/Foz0ZMPYBG92XMtJDcAANwwQNHHDugXi//U3lMT9daWADp6DhXmTabIwGJoDpFWbkw9fB5ZDFEjo8h/tf5BpAEdGNza0tL389QbxqakZHXxfW1Q774/EiX/rs5ELsQPQ0IG/DGDw1+SZxg==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector9901;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=2ZreSZ/bhNS5lb4e8nZsVdrMkQw3askAFxPJQlHc5xY=;
 b=DJujVk7QF6Ttnulmezs86K7yO3wNYux8OfhkxubUEq8IDa88F3lOmrtLICfHAT8kQ5vlZyq2wQpgLz+wn7dqFUTObO1Je6JKhePBBAwXLyD1Ox2u/MJpZ0NVvTAv7WmudWp+l6EpPZB3nPH3s781rp1uym6E0orXqkK5SlStdFB2mY0zRuw/r7z+HYIa+8pg5daWkvNVuiy6GLpSA38946nHBd+vxpTU6Zse/9fDuVAm1FADXbiDEwfbYTN5n3gGDqXrDPTaQcPU4hJXES/4H64+c6vUhTcoGCI+j+RoQPiWWZtM/c4rMWRGXvDBllDazxAPiE8Pinln6U7RGcrzNA==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=oracle.com; dmarc=pass action=none header.from=oracle.com;
 dkim=pass header.d=oracle.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=oracle.onmicrosoft.com; s=selector2-oracle-onmicrosoft-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=2ZreSZ/bhNS5lb4e8nZsVdrMkQw3askAFxPJQlHc5xY=;
 b=JfNiFdcSU//+HJlXAn13tnhjnXYkekikegIwsdwAovBA/b0kiG4HFTND6UtNkc6IDDaGLgSa61M5A7XU/VbsMsO3C4sK+1DhuXwhqXvh9i35e3TPtSzEXXn12SRB5oakgUttPeQfoTITxwKAANp6MzoSBHqxQBVkzwl1PTXfbio=
Authentication-Results: redhat.com; dkim=none (message not signed)
 header.d=none;redhat.com; dmarc=none action=none header.from=oracle.com;
Received: from MWHPR10MB1774.namprd10.prod.outlook.com (2603:10b6:301:9::13)
 by CO1PR10MB4691.namprd10.prod.outlook.com (2603:10b6:303:92::19) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.3825.17; Wed, 3 Feb
 2021 20:48:13 +0000
Received: from MWHPR10MB1774.namprd10.prod.outlook.com
 ([fe80::24eb:1300:dd70:4183]) by MWHPR10MB1774.namprd10.prod.outlook.com
 ([fe80::24eb:1300:dd70:4183%3]) with mapi id 15.20.3805.027; Wed, 3 Feb 2021
 20:48:13 +0000
From: Daniel Jordan <daniel.m.jordan@oracle.com>
To: Alex Williamson <alex.williamson@redhat.com>,
        Cornelia Huck <cohuck@redhat.com>
Cc: Jason Gunthorpe <jgg@nvidia.com>,
        Matthew Wilcox <willy@infradead.org>,
        Pavel Tatashin <pasha.tatashin@soleen.com>,
        Steven Sistare <steven.sistare@oracle.com>,
        kvm@vger.kernel.org, linux-kernel@vger.kernel.org,
        Daniel Jordan <daniel.m.jordan@oracle.com>
Subject: [PATCH 1/3] vfio/type1: change success value of vaddr_get_pfn()
Date: Wed,  3 Feb 2021 15:47:54 -0500
Message-Id: <20210203204756.125734-2-daniel.m.jordan@oracle.com>
X-Mailer: git-send-email 2.30.0
In-Reply-To: <20210203204756.125734-1-daniel.m.jordan@oracle.com>
References: <20210203204756.125734-1-daniel.m.jordan@oracle.com>
X-Originating-IP: [98.229.125.203]
X-ClientProxiedBy: BL1PR13CA0215.namprd13.prod.outlook.com
 (2603:10b6:208:2bf::10) To MWHPR10MB1774.namprd10.prod.outlook.com
 (2603:10b6:301:9::13)
MIME-Version: 1.0
X-MS-Exchange-MessageSentRepresentingType: 1
Received: from localhost.localdomain (98.229.125.203) by
 BL1PR13CA0215.namprd13.prod.outlook.com (2603:10b6:208:2bf::10) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.3825.15 via Frontend
 Transport; Wed, 3 Feb 2021 20:48:12 +0000
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: ee5d1014-c7b5-4aef-a5fa-08d8c8850645
X-MS-TrafficTypeDiagnostic: CO1PR10MB4691:
X-MS-Exchange-Transport-Forked: True
X-Microsoft-Antispam-PRVS: 
 <CO1PR10MB4691799EE6A0DAA786198AA7D9B49@CO1PR10MB4691.namprd10.prod.outlook.com>
X-MS-Oob-TLC-OOBClassifiers: OLM:6430;
X-MS-Exchange-SenderADCheck: 1
X-Microsoft-Antispam: BCL:0;
X-Microsoft-Antispam-Message-Info: 
 KkaCzmyKD1VImfgJpF8lqFm+7gARO33QQgvfFFPt7h5VsKQt9ZxEz6q93+/uYxUg9vHvO7W1h6NgAGm5E7w9AZRcnBD0ez0C2GAQIwvPr62Fg8wISq7ecXXeEvjjKUmy75TNgQublPj9HYFEmv874wvIPNjrM/lSEnwWaNY2ImI4NRikNxPVuqL7h1t/W4ehVlqr4i7VmZWyUsKo/oDb5vY5BHQ+Fl576IYBWKJ7Z0nU5w2x2YRQShQ0VGf4cqdpGeU8VbYh9nH4JTLiXHKhxRE48ps4GOqMOW1bzlG3eMKlMPfS/ACrt979pvI9qkVcjVGNzHoDMEVVWbxTdlSet0GVFvWQQi3+HBu035BhYaN5Aa1/V0mMbKI04whhtOlD30okcMq/SZmwgQXY6b4mCKCcUUQVP0M4+7qi5gCBDGnT+B758GJe90Oa5oXX4npbhErWLGVwky3fQuIEhzrZcD6/CYV/9p+MQIZnPbWbSZbH/k/KdUNRX/VVTsW1PhdjD7FOG9klx4bbYQr8wCcD2YUAFBAIremNMzldq5QMn5Z2YY0hyrDKTN/MzX+OyipyKbCPLeTyM00YmSHmkK7GXA==
X-Forefront-Antispam-Report: 
 CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:MWHPR10MB1774.namprd10.prod.outlook.com;PTR:;CAT:NONE;SFS:(396003)(39860400002)(376002)(366004)(136003)(346002)(103116003)(6486002)(478600001)(36756003)(107886003)(4326008)(66946007)(8936002)(1076003)(16526019)(5660300002)(110136005)(54906003)(26005)(186003)(6506007)(69590400011)(52116002)(8676002)(86362001)(83380400001)(316002)(2906002)(6512007)(956004)(66476007)(66556008)(2616005)(6666004);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData: 
 lO8YnXDteBPPAdDc7BCpABZ2U/MOoQpVMguxnpOc47mAKgNO3W0zJr8FHTXUSI8E8fask+Su9KvX8N5ZceKQB7qzP4oL6bSAu8VO2pMpDub2X2zyjCs5FmT4D3n6Fd1D58bcotLac/CMkcIkQTckSmVjaH+0llRMUAc6kveIGR+4i7fM+jWta11R0obtVIlVyldtBY66O/VhDPjxZEjW1hUSXT6xCtAJEh/g+qAxFN9JmCK2PyYEx3MZOXkqGLvpow0tM4BAlX0O0RGhT5iehrzXEmbXFV9bnNk6Otc2yWiBJX/aOJKsNpqaPmQkypTP1NbdWIhWZZrMaS8gL+lwJtJiogmUwWlMsObOIyFo06BACMPp2l76raVku3HYm5MuyTHIRzv4d8x5vcVKEe9ANRVIAE++zaIHwNhlZhAApVS1J4BFWwIPfoAxna0tpBSCcXH7JNrmxcE+72n/KCW76jmWVBeygIEn+sb/nKp/UD90hemSAsm1c6Uix36zEwRluqCYLXurpbBr0mXBlrhIueoKs9IcIaHRHPEL0ftDG6KjzJ8l45hyjJhvffwWVNcpuHRxBOGStp2+XMNibLj66RfH4aQLLGVG264IMspavZhyA0FUszf/GdK9IhhJgDl1foWdYmeMAi8oljHfoZyIEDOJCbrEIg5H9LFtVxOiBN0xSNu9wIKzZNNZUtfl0bA8oeEdAtRi41NjEsDNElJ5vo4nvY9CKSv/DuFWtnyBZyXKe2jh8T6KzgqNbgcKaXCjPA7ZjNYSpw336HzN3lUKAsiBtYfDcR0Nb2+Y5bCKE+Qiog97yuSEe66XymJE0/XoxGnsYybetWQbQhw3hkmU7MMj6hr/ShNNDWsmc/bHgs2jPpz+namhz1csgcXwZWtj1hTZY2j+mH/GTEe0LmjN83sO2fbYNkfAwyRGPv7bwQsZLaVRaz1aMLfv5RBx9UUDOlKkFM746q+i+YyraNJOFfdDyEL6tnYq5LwFuoC9MtpWG9ER2KSdccQqVglzS4eoZ1cNjXXc8xd/LkZG/RilFViAHdumFsCYfmONwgCRfwQzWr2z2G2wGAPJ6i8nsRZnMKd5IiplyD7PoVRMchXAwXeAFiRMU6WIpdkhRKqPxKj4V//X0JlpwtrAraCEPouoU0nAQtvkw5asqVInuauBVNI9EOTr5KKT4NeMN9h5I74W1uyWOR80qNlQJ+9nGsnd2H/NzlPdIq7UEnQUDsuUGFZ2cRy+7zYzv5IJowpsvfZn/T9PmRvII/AbkJ0XkZkYNBUcGkhzrwvsLBUtSbPg5cCCPPpKwBXz7UDq4XRUSLZg+HfRNO+LN9paTNgIKta1
X-OriginatorOrg: oracle.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 ee5d1014-c7b5-4aef-a5fa-08d8c8850645
X-MS-Exchange-CrossTenant-AuthSource: MWHPR10MB1774.namprd10.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 03 Feb 2021 20:48:13.5787
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 4e2c6054-71cb-48f1-bd6c-3a9705aca71b
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: 
 u8l08Qz9uiQyo4BceVUPkMh6kPS5WT0y7/JFA5s61g/Dtw3UOU1yw+6Q/hKEBkM4wWF7TiTIa7wrE8cMMiGQqacP2rwePfM5ROzn7qBxXaQ=
X-MS-Exchange-Transport-CrossTenantHeadersStamped: CO1PR10MB4691
X-Proofpoint-Virus-Version: vendor=nai engine=6200 definitions=9884
 signatures=668683
X-Proofpoint-Spam-Details: rule=notspam policy=default score=0 bulkscore=0
 adultscore=0 suspectscore=0
 spamscore=0 mlxscore=0 malwarescore=0 mlxlogscore=999 phishscore=0
 classifier=spam adjust=0 reason=mlx scancount=1 engine=8.12.0-2009150000
 definitions=main-2102030124
X-Proofpoint-Virus-Version: vendor=nai engine=6200 definitions=9884
 signatures=668683
X-Proofpoint-Spam-Details: rule=notspam policy=default score=0 bulkscore=0
 adultscore=0
 priorityscore=1501 impostorscore=0 malwarescore=0 clxscore=1015
 spamscore=0 lowpriorityscore=0 phishscore=0 mlxlogscore=999 mlxscore=0
 suspectscore=0 classifier=spam adjust=0 reason=mlx scancount=1
 engine=8.12.0-2009150000 definitions=main-2102030123
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

vaddr_get_pfn() simply returns 0 on success.  Have it report the number
of pfns successfully gotten instead, whether from page pinning or
follow_fault_pfn(), which will be used later when batching pinning.

Change the last check in vfio_pin_pages_remote() for consistency with
the other two.

Signed-off-by: Daniel Jordan <daniel.m.jordan@oracle.com>
---
 drivers/vfio/vfio_iommu_type1.c | 21 ++++++++++++++-------
 1 file changed, 14 insertions(+), 7 deletions(-)

diff --git a/drivers/vfio/vfio_iommu_type1.c b/drivers/vfio/vfio_iommu_type1.c
index 0b4dedaa9128..4d608bc552a4 100644
--- a/drivers/vfio/vfio_iommu_type1.c
+++ b/drivers/vfio/vfio_iommu_type1.c
@@ -441,6 +441,10 @@ static int follow_fault_pfn(struct vm_area_struct *vma, struct mm_struct *mm,
 	return ret;
 }
 
+/*
+ * Returns the positive number of pfns successfully obtained or a negative
+ * error code.
+ */
 static int vaddr_get_pfn(struct mm_struct *mm, unsigned long vaddr,
 			 int prot, unsigned long *pfn)
 {
@@ -457,7 +461,6 @@ static int vaddr_get_pfn(struct mm_struct *mm, unsigned long vaddr,
 				    page, NULL, NULL);
 	if (ret == 1) {
 		*pfn = page_to_pfn(page[0]);
-		ret = 0;
 		goto done;
 	}
 
@@ -471,8 +474,12 @@ static int vaddr_get_pfn(struct mm_struct *mm, unsigned long vaddr,
 		if (ret == -EAGAIN)
 			goto retry;
 
-		if (!ret && !is_invalid_reserved_pfn(*pfn))
-			ret = -EFAULT;
+		if (!ret) {
+			if (is_invalid_reserved_pfn(*pfn))
+				ret = 1;
+			else
+				ret = -EFAULT;
+		}
 	}
 done:
 	mmap_read_unlock(mm);
@@ -498,7 +505,7 @@ static long vfio_pin_pages_remote(struct vfio_dma *dma, unsigned long vaddr,
 		return -ENODEV;
 
 	ret = vaddr_get_pfn(current->mm, vaddr, dma->prot, pfn_base);
-	if (ret)
+	if (ret < 0)
 		return ret;
 
 	pinned++;
@@ -525,7 +532,7 @@ static long vfio_pin_pages_remote(struct vfio_dma *dma, unsigned long vaddr,
 	for (vaddr += PAGE_SIZE, iova += PAGE_SIZE; pinned < npage;
 	     pinned++, vaddr += PAGE_SIZE, iova += PAGE_SIZE) {
 		ret = vaddr_get_pfn(current->mm, vaddr, dma->prot, &pfn);
-		if (ret)
+		if (ret < 0)
 			break;
 
 		if (pfn != *pfn_base + pinned ||
@@ -551,7 +558,7 @@ static long vfio_pin_pages_remote(struct vfio_dma *dma, unsigned long vaddr,
 	ret = vfio_lock_acct(dma, lock_acct, false);
 
 unpin_out:
-	if (ret) {
+	if (ret < 0) {
 		if (!rsvd) {
 			for (pfn = *pfn_base ; pinned ; pfn++, pinned--)
 				put_pfn(pfn, dma->prot);
@@ -595,7 +602,7 @@ static int vfio_pin_page_external(struct vfio_dma *dma, unsigned long vaddr,
 		return -ENODEV;
 
 	ret = vaddr_get_pfn(mm, vaddr, dma->prot, pfn_base);
-	if (!ret && do_accounting && !is_invalid_reserved_pfn(*pfn_base)) {
+	if (ret == 1 && do_accounting && !is_invalid_reserved_pfn(*pfn_base)) {
 		ret = vfio_lock_acct(dma, 1, true);
 		if (ret) {
 			put_pfn(*pfn_base, dma->prot);

From patchwork Wed Feb  3 20:47:55 2021
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Daniel Jordan <daniel.m.jordan@oracle.com>
X-Patchwork-Id: 12065311
Return-Path: <kvm-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-18.8 required=3.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,DKIM_VALID_AU,HEADER_FROM_DIFFERENT_DOMAINS,INCLUDES_CR_TRAILER,
	INCLUDES_PATCH,MAILING_LIST_MULTI,MSGID_FROM_MTA_HEADER,SPF_HELO_NONE,
	SPF_PASS,USER_AGENT_GIT autolearn=ham autolearn_force=no version=3.4.0
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 2491BC433E6
	for <kvm@archiver.kernel.org>; Wed,  3 Feb 2021 20:52:15 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by mail.kernel.org (Postfix) with ESMTP id CEB5164F7E
	for <kvm@archiver.kernel.org>; Wed,  3 Feb 2021 20:52:14 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S232531AbhBCUwM (ORCPT <rfc822;kvm@archiver.kernel.org>);
        Wed, 3 Feb 2021 15:52:12 -0500
Received: from aserp2130.oracle.com ([141.146.126.79]:38962 "EHLO
        aserp2130.oracle.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S232432AbhBCUtc (ORCPT <rfc822;kvm@vger.kernel.org>);
        Wed, 3 Feb 2021 15:49:32 -0500
Received: from pps.filterd (aserp2130.oracle.com [127.0.0.1])
        by aserp2130.oracle.com (8.16.0.42/8.16.0.42) with SMTP id
 113Kdohe011002;
        Wed, 3 Feb 2021 20:48:18 GMT
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=oracle.com;
 h=from : to : cc :
 subject : date : message-id : in-reply-to : references :
 content-transfer-encoding : content-type : mime-version;
 s=corp-2020-01-29; bh=/qhLUwOrPFbO4aWZQWhK5m6Jxbc7cmweuAyR4M8rvL8=;
 b=PdqKrwYv+z634mqBGSE4UYimTtO0zIQlqteQCnqFQG9DVqJKAIcRrJHM242iUgXFSRrA
 4vgyMnALsr8KIpRnQ7QiGLn1P/ISkKhCgs37OjnhrIyx1Ihg9Kufb6dPCfxrN9N242d7
 M4K+9fanrdjonShIuiFscTq8T4hp2KsmS/UAmKiJElw8A3esRonR9O6KURRS92ZsRXJA
 GLQjyzbLT1bxFu450XbE/cfnMKS6d6yTfqPwoqGcJsmHf3zffSNgNfYYzY1zd/osbd4x
 B/eE6t3x+4cj5A/cSXO+kfkFX7YbCNtVaF5J+ehE9OCgdN5pqLxj+s1ZJQOWEp0sugG0 dg==
Received: from userp3020.oracle.com (userp3020.oracle.com [156.151.31.79])
        by aserp2130.oracle.com with ESMTP id 36cvyb2btm-1
        (version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256
 verify=OK);
        Wed, 03 Feb 2021 20:48:18 +0000
Received: from pps.filterd (userp3020.oracle.com [127.0.0.1])
        by userp3020.oracle.com (8.16.0.42/8.16.0.42) with SMTP id
 113KkHkn169343;
        Wed, 3 Feb 2021 20:48:17 GMT
Received: from nam04-bn8-obe.outbound.protection.outlook.com
 (mail-bn8nam08lp2043.outbound.protection.outlook.com [104.47.74.43])
        by userp3020.oracle.com with ESMTP id 36dh7u4fjv-1
        (version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256
 verify=OK);
        Wed, 03 Feb 2021 20:48:17 +0000
ARC-Seal: i=1; a=rsa-sha256; s=arcselector9901; d=microsoft.com; cv=none;
 b=MOM12L6fSIAjCJ75h44goSql0FOs2BgdP6qefLJCC+P25Ga3c0VfTrkb3Ezom2RrtRNchuvVKOKssaKov0u9ER4iGxDiesxZoEY3091+YlXCJupKICE2hfp6gPOTHQmIH6EFZl0qXi9PE1vWhvTA6EC2wxUF5AjkMmWa4f2pWit4fzyX1Q7bM/m1XoQIa65QJLXPwq68nr9bhEaSi4srnGvUaRLlzI14nU4y5+OUwGN3CmF+/whDZrh1MyRWffWqdz0GH82wZYipHZFjesdN4aTBtG9QvFPh+MMRHrXGbp1qqKYSPQ8yXmZqL85HWtERVmbhlwH6/J8LuudgW74XuA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector9901;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=/qhLUwOrPFbO4aWZQWhK5m6Jxbc7cmweuAyR4M8rvL8=;
 b=EmA+HHqqVD/uknC85tIe3DYaKdCeu4xaJ0l8UEZ44qb++pV+7PZC+U5Co4YdvRKcx3Qgcs6BqD6wDrfTrpmM7tf6JJoVOO/uz7gJyQAfom8r3Y9VQMsSpM9OziOMF5X6IQj/fP3YIAUM1zu4O8vwWY7tA39xoqHgQYfejFqOqC4+UCm69jYFyTSq6Pi4ERfGMx+ulGjJ/4T0fbGWysCS1KAnfoDV2xNKPoTk+HFqGyrSdxbEoCdaiAgxlYIAIJmFpEZH88WQrg2p9YDlP5noVsvomsRnvb5k9XFHDYU9xNJCyjcq8F6KYUMOLk9ZIDCyPjaG67tcpgZ4go/TsUxBXw==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=oracle.com; dmarc=pass action=none header.from=oracle.com;
 dkim=pass header.d=oracle.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=oracle.onmicrosoft.com; s=selector2-oracle-onmicrosoft-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=/qhLUwOrPFbO4aWZQWhK5m6Jxbc7cmweuAyR4M8rvL8=;
 b=aie/PSKhoSrjeWYUguVlDRHKReblBqY2H6SjMhEepu9T3hlfs9yEiVaatvhyje4CLWlLaun5RSrHt56jXUrnlrAenZBujxnBFhrdoT9rMovMDol4jyePl5PlYZwx7HLQzqCNKWg1lPHghfI8rvGGEven8Th8guRyDllwde2lBvA=
Authentication-Results: redhat.com; dkim=none (message not signed)
 header.d=none;redhat.com; dmarc=none action=none header.from=oracle.com;
Received: from MWHPR10MB1774.namprd10.prod.outlook.com (2603:10b6:301:9::13)
 by CO1PR10MB4691.namprd10.prod.outlook.com (2603:10b6:303:92::19) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.3825.17; Wed, 3 Feb
 2021 20:48:15 +0000
Received: from MWHPR10MB1774.namprd10.prod.outlook.com
 ([fe80::24eb:1300:dd70:4183]) by MWHPR10MB1774.namprd10.prod.outlook.com
 ([fe80::24eb:1300:dd70:4183%3]) with mapi id 15.20.3805.027; Wed, 3 Feb 2021
 20:48:15 +0000
From: Daniel Jordan <daniel.m.jordan@oracle.com>
To: Alex Williamson <alex.williamson@redhat.com>,
        Cornelia Huck <cohuck@redhat.com>
Cc: Jason Gunthorpe <jgg@nvidia.com>,
        Matthew Wilcox <willy@infradead.org>,
        Pavel Tatashin <pasha.tatashin@soleen.com>,
        Steven Sistare <steven.sistare@oracle.com>,
        kvm@vger.kernel.org, linux-kernel@vger.kernel.org,
        Daniel Jordan <daniel.m.jordan@oracle.com>
Subject: [PATCH 2/3] vfio/type1: prepare for batched pinning with struct
 vfio_batch
Date: Wed,  3 Feb 2021 15:47:55 -0500
Message-Id: <20210203204756.125734-3-daniel.m.jordan@oracle.com>
X-Mailer: git-send-email 2.30.0
In-Reply-To: <20210203204756.125734-1-daniel.m.jordan@oracle.com>
References: <20210203204756.125734-1-daniel.m.jordan@oracle.com>
X-Originating-IP: [98.229.125.203]
X-ClientProxiedBy: BL1PR13CA0215.namprd13.prod.outlook.com
 (2603:10b6:208:2bf::10) To MWHPR10MB1774.namprd10.prod.outlook.com
 (2603:10b6:301:9::13)
MIME-Version: 1.0
X-MS-Exchange-MessageSentRepresentingType: 1
Received: from localhost.localdomain (98.229.125.203) by
 BL1PR13CA0215.namprd13.prod.outlook.com (2603:10b6:208:2bf::10) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.3825.15 via Frontend
 Transport; Wed, 3 Feb 2021 20:48:13 +0000
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: 450f9811-a3bc-474b-2e43-08d8c8850709
X-MS-TrafficTypeDiagnostic: CO1PR10MB4691:
X-MS-Exchange-Transport-Forked: True
X-Microsoft-Antispam-PRVS: 
 <CO1PR10MB46910DAE4BF54CF49EE10AC1D9B49@CO1PR10MB4691.namprd10.prod.outlook.com>
X-MS-Oob-TLC-OOBClassifiers: OLM:1775;
X-MS-Exchange-SenderADCheck: 1
X-Microsoft-Antispam: BCL:0;
X-Microsoft-Antispam-Message-Info: 
 8xSy8nSzdx6vdrHb1s8X8KolF0nHHd2uj+IfwJ+YiIpKw1BZzqMaEch6uiTwSFEJUmJqUf9CmzOUkd2tlWlw98x7AMVorh+z05iA6Mxmcxm7wyhA3b5sPE7LldwI+OJmse6bYg2rjIdJsxvTSgp7djWRcD6KdttnMJoBlUH5txUt/p+xjBg/Z4ipMMXeiNSRW61A7Y2jjrBENH5k4YMNspJQ5Fl1G8hVWEJgW9I1cFLsZ8tw4c8s0xSIYbEd/6MrpZDqtlS9WMM/ibDJ7vMQDQ4i0lxkZioqfZSZaeNav7/PwMm/ieX0xwITp2o4MwQ31N6bhtvSwjcSyEnRIMtNE+6sQhc1N1oupo2+jI0RxWeqUiwxxfZ2L7Hrq7hzwnLf0TXuuAKlNi55cTmblESy90ogeKZFTYZqSgHWRj1GPwWOrQm0oRU6prBsom87+Z7F7bOiLSEf2SG8Wb2zFrWDat9fXkb5NmwPP3MgwpH0AaLa7M8lAOUjbqQB7vYSfJj1N69W0YmRBgWobZmwD4bbnOooun2JK9vWHww11+QCJbv0gR7JWRHebhqxtRqsYu1e
X-Forefront-Antispam-Report: 
 CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:MWHPR10MB1774.namprd10.prod.outlook.com;PTR:;CAT:NONE;SFS:(396003)(39860400002)(376002)(366004)(136003)(346002)(103116003)(6486002)(478600001)(36756003)(107886003)(4326008)(66946007)(8936002)(1076003)(16526019)(5660300002)(110136005)(54906003)(26005)(186003)(6506007)(69590400011)(52116002)(8676002)(86362001)(83380400001)(316002)(2906002)(6512007)(956004)(66476007)(66556008)(2616005)(6666004);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData: 
 UdnrC7sjyAMZavNdMbcdISqtExEDr6X8+a+YiYD327suJOi/T9ArOKbVix4RY8eWpQceEDq4/1Yh1x08BbITGVWaCNTSSI2vhyAJPo3mdcEcCyyIgBls+0Rkc9Oz7C3hi4WcsOeYPIiiPE++b/d72ksX6Nq4SjWM8CZu7ZLK9a3R7egwOnd6KvVYI1IczPWT0LG9meyolErQhnV4aMRKBiFbKNeejZSp+sd3FPXElidcScS2scmPIbbr66/75A/oeuOEkg4kjX1jhOQOFRpHNrKrdBBvaqVWnen/n0Mjsontn0elAK4S0KTorYIR2TJ17UU5zv1PqS7THLh1wUHtzBuxvy9m9vZGLNzAujXE5Ugf2+8LooiOIMBlhn1hw+gXtNK1o3FKGuR8e73RWtwuolsnF8EHYuNnxKHBtBGo/vbUnTAKvG2FWZmL2rvVQcB9F+Suzw0mGtmTfztBZ7ZBIYtBWdLQWsgLiJtLOSz24t5sAk0wK/llif2uXWPU9SC+KEp5A09xAp+1BJGcZEGjyCJ6JaCJdAwfApkpOtwznJnzM3UVkyBUBIcJv3HkdlJUEW/TNWqu+SPgKZQTXZm5CzVCgsXVS2odGp0F1Z4GZjId2UI8IPqyLMayjBvQNAJ9h008jItHGQVxHjsx05kjtBbmHxijxBD/yVSgFx7JLG4QO8SyftRUauA2/vviSgViA0NycQGa3Zx3L98Bf9/75YjnHeAJn6gVteiaftxh2g0WbNZ5SbYqnsG3Pi8bplyQScz6xE2cgULm3d2peHtqk0API8zH8HfLo3jgbxMBttOtoeaTBze/H9TAqiXcaVNlWJNVQLeXbNeAMKYet+fAt4lzjlWTBeRvNKRhUUTZAlH7g4bkjeiTCU5SNucDgKSkVEgJKCLvHAnq6pzxm/rXjbWsG+Pboj3sbnUkDWLJkjHhydU2eGgoENyVsjh2zNjTocP7S+4S629EXs5VZ1S5lhGLuPVyiFSOs3vRK4j8+ng8/49nPT5kuMywniPCe4dOFlmlhF0crA538NrkyS0kSDh9rieVb6tz1RX7MIH3oh+8dDYVq63+0AWVIKe3Ej8J9fAmcV4j9CNy+JCp306vPelX3pJ3knHbGteNh0oJPyynb5/kUp28Wiog8BHCEaHQJedT37OPQggASSY/G8UOuQvTCE4QSm1Hz4VbkX3vJ/vuxow+xMeDnlGyeWjXs2wbQ5W7Zrr+9jHoHK4FEkgGjrp3N921vvxOgNyRsBkdYC+uGKiEkjW1Li9mmXlbLpDDip5s1wY1WXdvCzEnlFgj3GG9lAaASU8pa2Sl+94QlJSjsjCqsJv6GvMChXeUjfE0
X-OriginatorOrg: oracle.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 450f9811-a3bc-474b-2e43-08d8c8850709
X-MS-Exchange-CrossTenant-AuthSource: MWHPR10MB1774.namprd10.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 03 Feb 2021 20:48:14.9341
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 4e2c6054-71cb-48f1-bd6c-3a9705aca71b
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: 
 iIAzH9RjzStBopsKy9Z8E0oEQDeEn3B1HailIDTHKxG9ZRI0cTSN3LOs7zEpZ1gXUkq5LPsx+wZYVyvWM5cMevlinroRV0dXAXIZ5/rfpDY=
X-MS-Exchange-Transport-CrossTenantHeadersStamped: CO1PR10MB4691
X-Proofpoint-Virus-Version: vendor=nai engine=6200 definitions=9884
 signatures=668683
X-Proofpoint-Spam-Details: rule=notspam policy=default score=0 malwarescore=0
 mlxscore=0
 suspectscore=0 spamscore=0 mlxlogscore=999 phishscore=0 adultscore=0
 bulkscore=0 classifier=spam adjust=0 reason=mlx scancount=1
 engine=8.12.0-2009150000 definitions=main-2102030124
X-Proofpoint-Virus-Version: vendor=nai engine=6200 definitions=9884
 signatures=668683
X-Proofpoint-Spam-Details: rule=notspam policy=default score=0 clxscore=1015
 impostorscore=0
 mlxscore=0 spamscore=0 bulkscore=0 priorityscore=1501 adultscore=0
 lowpriorityscore=0 malwarescore=0 phishscore=0 mlxlogscore=999
 suspectscore=0 classifier=spam adjust=0 reason=mlx scancount=1
 engine=8.12.0-2009150000 definitions=main-2102030123
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

Get ready to pin more pages at once with struct vfio_batch, which
represents a batch of pinned pages.

The struct has a fallback page pointer to avoid two unlikely scenarios:
pointlessly allocating a page if disable_hugepages is enabled or failing
the whole pinning operation if the kernel can't allocate memory.

vaddr_get_pfn() becomes vaddr_get_pfns() to prepare for handling
multiple pages, though for now only one page is stored in the pages
array.

Signed-off-by: Daniel Jordan <daniel.m.jordan@oracle.com>
---
 drivers/vfio/vfio_iommu_type1.c | 71 +++++++++++++++++++++++++++------
 1 file changed, 58 insertions(+), 13 deletions(-)

diff --git a/drivers/vfio/vfio_iommu_type1.c b/drivers/vfio/vfio_iommu_type1.c
index 4d608bc552a4..c26c1a4697e5 100644
--- a/drivers/vfio/vfio_iommu_type1.c
+++ b/drivers/vfio/vfio_iommu_type1.c
@@ -97,6 +97,12 @@ struct vfio_dma {
 	unsigned long		*bitmap;
 };
 
+struct vfio_batch {
+	struct page		**pages;	/* for pin_user_pages_remote */
+	struct page		*fallback_page; /* if pages alloc fails */
+	int			capacity;	/* length of pages array */
+};
+
 struct vfio_group {
 	struct iommu_group	*iommu_group;
 	struct list_head	next;
@@ -415,6 +421,31 @@ static int put_pfn(unsigned long pfn, int prot)
 	return 0;
 }
 
+#define VFIO_BATCH_MAX_CAPACITY (PAGE_SIZE / sizeof(struct page *))
+
+static void vfio_batch_init(struct vfio_batch *batch)
+{
+	if (unlikely(disable_hugepages))
+		goto fallback;
+
+	batch->pages = (struct page **) __get_free_page(GFP_KERNEL);
+	if (!batch->pages)
+		goto fallback;
+
+	batch->capacity = VFIO_BATCH_MAX_CAPACITY;
+	return;
+
+fallback:
+	batch->pages = &batch->fallback_page;
+	batch->capacity = 1;
+}
+
+static void vfio_batch_fini(struct vfio_batch *batch)
+{
+	if (batch->capacity == VFIO_BATCH_MAX_CAPACITY)
+		free_page((unsigned long)batch->pages);
+}
+
 static int follow_fault_pfn(struct vm_area_struct *vma, struct mm_struct *mm,
 			    unsigned long vaddr, unsigned long *pfn,
 			    bool write_fault)
@@ -445,10 +476,10 @@ static int follow_fault_pfn(struct vm_area_struct *vma, struct mm_struct *mm,
  * Returns the positive number of pfns successfully obtained or a negative
  * error code.
  */
-static int vaddr_get_pfn(struct mm_struct *mm, unsigned long vaddr,
-			 int prot, unsigned long *pfn)
+static int vaddr_get_pfns(struct mm_struct *mm, unsigned long vaddr,
+			  long npages, int prot, unsigned long *pfn,
+			  struct page **pages)
 {
-	struct page *page[1];
 	struct vm_area_struct *vma;
 	unsigned int flags = 0;
 	int ret;
@@ -457,10 +488,10 @@ static int vaddr_get_pfn(struct mm_struct *mm, unsigned long vaddr,
 		flags |= FOLL_WRITE;
 
 	mmap_read_lock(mm);
-	ret = pin_user_pages_remote(mm, vaddr, 1, flags | FOLL_LONGTERM,
-				    page, NULL, NULL);
-	if (ret == 1) {
-		*pfn = page_to_pfn(page[0]);
+	ret = pin_user_pages_remote(mm, vaddr, npages, flags | FOLL_LONGTERM,
+				    pages, NULL, NULL);
+	if (ret > 0) {
+		*pfn = page_to_pfn(pages[0]);
 		goto done;
 	}
 
@@ -493,7 +524,7 @@ static int vaddr_get_pfn(struct mm_struct *mm, unsigned long vaddr,
  */
 static long vfio_pin_pages_remote(struct vfio_dma *dma, unsigned long vaddr,
 				  long npage, unsigned long *pfn_base,
-				  unsigned long limit)
+				  unsigned long limit, struct vfio_batch *batch)
 {
 	unsigned long pfn = 0;
 	long ret, pinned = 0, lock_acct = 0;
@@ -504,7 +535,8 @@ static long vfio_pin_pages_remote(struct vfio_dma *dma, unsigned long vaddr,
 	if (!current->mm)
 		return -ENODEV;
 
-	ret = vaddr_get_pfn(current->mm, vaddr, dma->prot, pfn_base);
+	ret = vaddr_get_pfns(current->mm, vaddr, 1, dma->prot, pfn_base,
+			     batch->pages);
 	if (ret < 0)
 		return ret;
 
@@ -531,7 +563,8 @@ static long vfio_pin_pages_remote(struct vfio_dma *dma, unsigned long vaddr,
 	/* Lock all the consecutive pages from pfn_base */
 	for (vaddr += PAGE_SIZE, iova += PAGE_SIZE; pinned < npage;
 	     pinned++, vaddr += PAGE_SIZE, iova += PAGE_SIZE) {
-		ret = vaddr_get_pfn(current->mm, vaddr, dma->prot, &pfn);
+		ret = vaddr_get_pfns(current->mm, vaddr, 1, dma->prot, &pfn,
+				     batch->pages);
 		if (ret < 0)
 			break;
 
@@ -594,6 +627,7 @@ static long vfio_unpin_pages_remote(struct vfio_dma *dma, dma_addr_t iova,
 static int vfio_pin_page_external(struct vfio_dma *dma, unsigned long vaddr,
 				  unsigned long *pfn_base, bool do_accounting)
 {
+	struct page *pages[1];
 	struct mm_struct *mm;
 	int ret;
 
@@ -601,7 +635,7 @@ static int vfio_pin_page_external(struct vfio_dma *dma, unsigned long vaddr,
 	if (!mm)
 		return -ENODEV;
 
-	ret = vaddr_get_pfn(mm, vaddr, dma->prot, pfn_base);
+	ret = vaddr_get_pfns(mm, vaddr, 1, dma->prot, pfn_base, pages);
 	if (ret == 1 && do_accounting && !is_invalid_reserved_pfn(*pfn_base)) {
 		ret = vfio_lock_acct(dma, 1, true);
 		if (ret) {
@@ -1246,15 +1280,19 @@ static int vfio_pin_map_dma(struct vfio_iommu *iommu, struct vfio_dma *dma,
 {
 	dma_addr_t iova = dma->iova;
 	unsigned long vaddr = dma->vaddr;
+	struct vfio_batch batch;
 	size_t size = map_size;
 	long npage;
 	unsigned long pfn, limit = rlimit(RLIMIT_MEMLOCK) >> PAGE_SHIFT;
 	int ret = 0;
 
+	vfio_batch_init(&batch);
+
 	while (size) {
 		/* Pin a contiguous chunk of memory */
 		npage = vfio_pin_pages_remote(dma, vaddr + dma->size,
-					      size >> PAGE_SHIFT, &pfn, limit);
+					      size >> PAGE_SHIFT, &pfn, limit,
+					      &batch);
 		if (npage <= 0) {
 			WARN_ON(!npage);
 			ret = (int)npage;
@@ -1274,6 +1312,7 @@ static int vfio_pin_map_dma(struct vfio_iommu *iommu, struct vfio_dma *dma,
 		dma->size += npage << PAGE_SHIFT;
 	}
 
+	vfio_batch_fini(&batch);
 	dma->iommu_mapped = true;
 
 	if (ret)
@@ -1432,6 +1471,7 @@ static int vfio_bus_type(struct device *dev, void *data)
 static int vfio_iommu_replay(struct vfio_iommu *iommu,
 			     struct vfio_domain *domain)
 {
+	struct vfio_batch batch;
 	struct vfio_domain *d = NULL;
 	struct rb_node *n;
 	unsigned long limit = rlimit(RLIMIT_MEMLOCK) >> PAGE_SHIFT;
@@ -1442,6 +1482,8 @@ static int vfio_iommu_replay(struct vfio_iommu *iommu,
 		d = list_first_entry(&iommu->domain_list,
 				     struct vfio_domain, next);
 
+	vfio_batch_init(&batch);
+
 	n = rb_first(&iommu->dma_list);
 
 	for (; n; n = rb_next(n)) {
@@ -1489,7 +1531,8 @@ static int vfio_iommu_replay(struct vfio_iommu *iommu,
 
 				npage = vfio_pin_pages_remote(dma, vaddr,
 							      n >> PAGE_SHIFT,
-							      &pfn, limit);
+							      &pfn, limit,
+							      &batch);
 				if (npage <= 0) {
 					WARN_ON(!npage);
 					ret = (int)npage;
@@ -1522,6 +1565,7 @@ static int vfio_iommu_replay(struct vfio_iommu *iommu,
 		dma->iommu_mapped = true;
 	}
 
+	vfio_batch_fini(&batch);
 	return 0;
 
 unwind:
@@ -1562,6 +1606,7 @@ static int vfio_iommu_replay(struct vfio_iommu *iommu,
 		}
 	}
 
+	vfio_batch_fini(&batch);
 	return ret;
 }
 

From patchwork Wed Feb  3 20:47:56 2021
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Daniel Jordan <daniel.m.jordan@oracle.com>
X-Patchwork-Id: 12065309
Return-Path: <kvm-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-18.7 required=3.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,DKIM_VALID_AU,HEADER_FROM_DIFFERENT_DOMAINS,INCLUDES_CR_TRAILER,
	INCLUDES_PATCH,MAILING_LIST_MULTI,MSGID_FROM_MTA_HEADER,SPF_HELO_NONE,
	SPF_PASS,URIBL_BLOCKED,USER_AGENT_GIT autolearn=ham autolearn_force=no
	version=3.4.0
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
	by smtp.lore.kernel.org (Postfix) with ESMTP id D7A54C433E0
	for <kvm@archiver.kernel.org>; Wed,  3 Feb 2021 20:52:14 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by mail.kernel.org (Postfix) with ESMTP id 8D9A964F72
	for <kvm@archiver.kernel.org>; Wed,  3 Feb 2021 20:52:14 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S232195AbhBCUwD (ORCPT <rfc822;kvm@archiver.kernel.org>);
        Wed, 3 Feb 2021 15:52:03 -0500
Received: from userp2130.oracle.com ([156.151.31.86]:36414 "EHLO
        userp2130.oracle.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S232443AbhBCUtd (ORCPT <rfc822;kvm@vger.kernel.org>);
        Wed, 3 Feb 2021 15:49:33 -0500
Received: from pps.filterd (userp2130.oracle.com [127.0.0.1])
        by userp2130.oracle.com (8.16.0.42/8.16.0.42) with SMTP id
 113KeFL7119281;
        Wed, 3 Feb 2021 20:48:18 GMT
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=oracle.com;
 h=from : to : cc :
 subject : date : message-id : in-reply-to : references :
 content-transfer-encoding : content-type : mime-version;
 s=corp-2020-01-29; bh=x1HsHGHBL4DZdlrq2nrVX7p/QFdq5VzZ4UU2FXa3U+g=;
 b=SXIGUTwuXK+NMC/dz1IImi306/y2haSmLPbY1Iu+S5+7/IhgOBZVXpEKYJGemLWF9HHA
 9UWrBNNbJj/mPtjIzx1k4Fgfl/bLtAraakVt2L25x0amsGRnyGUmdyfc3Dqnyvb21Wzz
 MWftzJI/aeVJWehap9vpILAN8VPA1+tjcfZLZ6NscrBg8ciHaWuBY+pzKh1TrAD9JJED
 W2hBzmt9nz2fgQhfXrZAai1CFlbtjxh+uBpvo7+XrUs1bJueUWxLOm1IWAhnpNPYM7yY
 fSiC+uJ7Nn7zKomgJF3YPM4T/4ry7QA9IyTAaahgm8N6USJ0fi+DBkLTiv1eGKRVpRD3 bw==
Received: from userp3020.oracle.com (userp3020.oracle.com [156.151.31.79])
        by userp2130.oracle.com with ESMTP id 36cxvr4wuq-1
        (version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256
 verify=OK);
        Wed, 03 Feb 2021 20:48:18 +0000
Received: from pps.filterd (userp3020.oracle.com [127.0.0.1])
        by userp3020.oracle.com (8.16.0.42/8.16.0.42) with SMTP id
 113KkHko169343;
        Wed, 3 Feb 2021 20:48:17 GMT
Received: from nam04-bn8-obe.outbound.protection.outlook.com
 (mail-bn8nam08lp2043.outbound.protection.outlook.com [104.47.74.43])
        by userp3020.oracle.com with ESMTP id 36dh7u4fjv-2
        (version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256
 verify=OK);
        Wed, 03 Feb 2021 20:48:17 +0000
ARC-Seal: i=1; a=rsa-sha256; s=arcselector9901; d=microsoft.com; cv=none;
 b=CVLZj+1qhIj3Y61wEb2u/UhrBvO9VGh14uK+V6ASbMDuEMYrKBRW0IGNE2PgMYwYOiHL3waaaRhWsd2BMyUm9eCQG7Un3749bsJt4FTFIApVkp1WP//5SWgtxfSiR5WHvXEjj5dVjUKASfqQGB28eY1gFs+1bacU1TrLQnokBty0ONg0v3/rKtaW90xaPhEHFjD/t1JJmDou2TA7T6N4N321ideiINx0gasK4vEEdos44IMoOgDnHLHQN3mJr+PppDNhWgWuvgDRClhbw1GjPE5pQggLxMWjBYYAbTmRxowOFzKJNc5TAa9FvwN3iptjdySMX1BGxBJVGihyo18TpQ==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector9901;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=x1HsHGHBL4DZdlrq2nrVX7p/QFdq5VzZ4UU2FXa3U+g=;
 b=neL0OcvsLNCmy3FZhL9rOqnANE4wNa+4mE7LaNWm/vSzTGjxklFdoQmWecPTBkjzH2PRGwgWvTQtkOkKPEAuqMTyXAyG+sgefD9fFOQcO3SrWFT1+q+2J/jiz3vUIxkUXKZgynshNzUkcMamiIVal1FDdGLyFu63k/RkySNqAKhUAKXdk6CQC15w18VaDa+C1Dr4zemIZktF/6cJ+QrQVk5YIp9Bs7T1C9tFDcsTAUZ4oJfU5kFEld5xZDAfR1SP8mFgHu8fANV67iYNqbQXwpy4rMBll95AuGdr1NeXtwRlvFkbZfwVOQSpwGZ9L68RbkiBFEKDRs32JWLPoIFxAQ==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=oracle.com; dmarc=pass action=none header.from=oracle.com;
 dkim=pass header.d=oracle.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=oracle.onmicrosoft.com; s=selector2-oracle-onmicrosoft-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=x1HsHGHBL4DZdlrq2nrVX7p/QFdq5VzZ4UU2FXa3U+g=;
 b=IEJoW0k0UV2aYgAbwqxdgEhE1/tCvdPK7e2MuNavaBIaSsdUhP4mL1LFiKne8Q+Y34Nzk/dxNYHcEx1n8/+5TswOKrz6QhY6sHvm+3IgfVUEG5xcqkKclA3uyfGYc1yrZSmGLwBBtKU4cMhO5XzY3Tz2HmFPrvz829WoLx7vEtk=
Authentication-Results: redhat.com; dkim=none (message not signed)
 header.d=none;redhat.com; dmarc=none action=none header.from=oracle.com;
Received: from MWHPR10MB1774.namprd10.prod.outlook.com (2603:10b6:301:9::13)
 by CO1PR10MB4691.namprd10.prod.outlook.com (2603:10b6:303:92::19) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.3825.17; Wed, 3 Feb
 2021 20:48:16 +0000
Received: from MWHPR10MB1774.namprd10.prod.outlook.com
 ([fe80::24eb:1300:dd70:4183]) by MWHPR10MB1774.namprd10.prod.outlook.com
 ([fe80::24eb:1300:dd70:4183%3]) with mapi id 15.20.3805.027; Wed, 3 Feb 2021
 20:48:16 +0000
From: Daniel Jordan <daniel.m.jordan@oracle.com>
To: Alex Williamson <alex.williamson@redhat.com>,
        Cornelia Huck <cohuck@redhat.com>
Cc: Jason Gunthorpe <jgg@nvidia.com>,
        Matthew Wilcox <willy@infradead.org>,
        Pavel Tatashin <pasha.tatashin@soleen.com>,
        Steven Sistare <steven.sistare@oracle.com>,
        kvm@vger.kernel.org, linux-kernel@vger.kernel.org,
        Daniel Jordan <daniel.m.jordan@oracle.com>
Subject: [PATCH 3/3] vfio/type1: batch page pinning
Date: Wed,  3 Feb 2021 15:47:56 -0500
Message-Id: <20210203204756.125734-4-daniel.m.jordan@oracle.com>
X-Mailer: git-send-email 2.30.0
In-Reply-To: <20210203204756.125734-1-daniel.m.jordan@oracle.com>
References: <20210203204756.125734-1-daniel.m.jordan@oracle.com>
X-Originating-IP: [98.229.125.203]
X-ClientProxiedBy: BL1PR13CA0215.namprd13.prod.outlook.com
 (2603:10b6:208:2bf::10) To MWHPR10MB1774.namprd10.prod.outlook.com
 (2603:10b6:301:9::13)
MIME-Version: 1.0
X-MS-Exchange-MessageSentRepresentingType: 1
Received: from localhost.localdomain (98.229.125.203) by
 BL1PR13CA0215.namprd13.prod.outlook.com (2603:10b6:208:2bf::10) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.3825.15 via Frontend
 Transport; Wed, 3 Feb 2021 20:48:15 +0000
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: 06b395ec-4776-459f-33e6-08d8c88507db
X-MS-TrafficTypeDiagnostic: CO1PR10MB4691:
X-MS-Exchange-Transport-Forked: True
X-Microsoft-Antispam-PRVS: 
 <CO1PR10MB46914727CA1EE33D13773A91D9B49@CO1PR10MB4691.namprd10.prod.outlook.com>
X-MS-Oob-TLC-OOBClassifiers: OLM:3631;
X-MS-Exchange-SenderADCheck: 1
X-Microsoft-Antispam: BCL:0;
X-Microsoft-Antispam-Message-Info: 
 G1CXpS2wML9GWNaM3s2C/VW2tB5p5Ng6izqmUnvs+NFu1VZkUl9azFoGDIKNHygBr5rfwtgfnqy2fyGgkWENtpyyON150tf54crCX3kjlv2tr7sBc/lVOzPSQenDXoEE+jn7j1DL+PphdTLCLv7yjcsovqpXOiIfi+rZgINMlfv43suI8kv9NClv3czey4dZZwZz2w2xMbGmNxk3w4H+2MBweVsY5JJG1H5UxoGx0N/67kAJryVNcoo2HcH2yMGWG6Rlrj35EBX36sJtYLq0BmWiiKQTo0ZGeCDOciMlr0vxheixWq8YoH9uljZB+awPoeQSVCinAc3vMSNyXcCnLZ++aClCYRlIGES7ZfDGJzrBUPoOtgxmdFdDTrU4FzaMpBHD5QzfMYjb7sB2dUE/Rkt91Njqs4xdXEr2NUJhBdz+jGqaxa+p79QRRksJdAEg/EcNzBz4IJhCENsUNUc1P94A0ULUuBQH3FUDLWbubyxzWDX9zYWsLc5Bpc97Up6RV8qeqVamkcJKJhWcfRikiHdYL6m595991XfFWfvYMiUH39/nTUY8rlodYS1vAtOVlDbnKFt3umog39MCoYs30A==
X-Forefront-Antispam-Report: 
 CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:MWHPR10MB1774.namprd10.prod.outlook.com;PTR:;CAT:NONE;SFS:(396003)(39860400002)(376002)(366004)(136003)(346002)(103116003)(6486002)(478600001)(36756003)(107886003)(4326008)(66946007)(8936002)(1076003)(16526019)(5660300002)(110136005)(54906003)(26005)(186003)(6506007)(69590400011)(52116002)(8676002)(86362001)(83380400001)(316002)(2906002)(6512007)(956004)(66476007)(66556008)(2616005)(6666004);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData: 
 qAtPtSkXG31doFvsdmja6Uxe3HjRhy9RKMLIYQdKqLve2ujYPQVBddJO3brC0u4gyP4FY9GyR4+jXK4aFSstRKFXS16+qnitNbvEjLrmnsT1aHrzCs5o9+15/xWx9E0plMHE1Kkuw9ZTh3+VdlZCjINebrZdACgAoFB5SFeZaCdd0E/zceUIu221ULrYeMfCG6YPNVgWpCRnQ9OSCk2/dhRWADujlz8y9N34oNgvQxujzWw/MLgtloOAjUa0xr2wEcNrVcDnHYEvMmS7fYg1gsXuKV5PKnB7PVTpsb0k6O2hF0z4m63U7bWV9rkRlMzTJm+umBo3v1GUYbEJFJdq/y0o8EynprNHbJAIoOCJHws8ss8dYQnvgYJasPxXHDfkCjtZaABYEEdtz9F1n+0BSs7Nsho9Fx1neTWHiBLXngZDYPRCdbFQdZ7KuXm+pESMo6mjbc6Lb5SYin+cbkSiuOhz1YZBE0o6TBxWbtyID9zWYn9ZTTkfqPPSfw0yZv8M4KTIjFK8eFd52HPlLiYr7pu4b9j8x8fMCNekaWN2Bk/jn1R5ZwDOKWIWu3RMl6bCaO6BOmDx822vmIsUJnVlTxTGFNNwNvAwtpQUFZ23cu8eFOTAmYpg2g8J/nJbgUTSXkKw9Zyf3NcVg1LNxRE+aS+u/L73P5TEEcydygJtCEKBZ2IjjurMhP9cQC1pfSi6DMLl+BsTOO9XF8oqor0K4PW14vQYaou5L9miNKT/YS5AQW/Z+NXZC609Q3zzkd4Cl+NzJLRNxyHxOT56rOQe2dQtpB7F0PraGZOgNlJxoXWvZvM6er86vfOF/hVKl+EZUiY8qKEfAprnzgnRFtJVeidPPpxBTkXbXPiSETOPMGhRpI9zxpW3uS59bzEDaOCYfo4dGxV+G/ucKMgBzY+kCfBAOAnsxDT12XXg573Pbuihm8k2KsCYElkn9zmIsvy8/yq0IgOFNKCCv5SWL25BoVNOuMZEILAl9zs6tGpX7ri3XNuvGYzUtKhyu4vBlTkrFQTmB7t7MZw8X3OQuOkBdL1OXpRdv0OZVJDQUbvXqBQ/TwTLNqS2KJmjmqGxVu+g1ttyOR0PJqn1QljMv/vrht7eNoEWyFVh30w5M6eRGUB3bhd9n+jkx99TgMiAsHHPgbSUa3LrNDlLSB7bAWUuSAsYsfhBdGguJc6BbNqlNJ0ZLOf5ulKyyx0XP/IwZTNG7/DnGQrVv4pgljWuMpuunGMJ5pvU0qWw2epLpkpdICFXzL5H7ga7aUiGVSjl33F/GFD3AkD+atPqyMoydob+k4gT+Uus/owRiayZ8pkvN7oyMwvN7LLP0yYmJpTGBZ/D
X-OriginatorOrg: oracle.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 06b395ec-4776-459f-33e6-08d8c88507db
X-MS-Exchange-CrossTenant-AuthSource: MWHPR10MB1774.namprd10.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 03 Feb 2021 20:48:16.3635
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 4e2c6054-71cb-48f1-bd6c-3a9705aca71b
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: 
 ivnwRNmVXAI0QlczbKhxhXhKmDEWP80Ikn7VItJ14HixxuAy4cIfs9xuLIUBgzir9pyhS7B0z0btSpqug31WsoSO+7CNcpt6VjFziO989Fs=
X-MS-Exchange-Transport-CrossTenantHeadersStamped: CO1PR10MB4691
X-Proofpoint-Virus-Version: vendor=nai engine=6200 definitions=9884
 signatures=668683
X-Proofpoint-Spam-Details: rule=notspam policy=default score=0 malwarescore=0
 mlxscore=0
 suspectscore=0 spamscore=0 mlxlogscore=999 phishscore=0 adultscore=0
 bulkscore=0 classifier=spam adjust=0 reason=mlx scancount=1
 engine=8.12.0-2009150000 definitions=main-2102030124
X-Proofpoint-Virus-Version: vendor=nai engine=6200 definitions=9884
 signatures=668683
X-Proofpoint-Spam-Details: rule=notspam policy=default score=0 malwarescore=0
 mlxlogscore=999
 mlxscore=0 priorityscore=1501 spamscore=0 impostorscore=0 clxscore=1015
 suspectscore=0 lowpriorityscore=0 phishscore=0 adultscore=0 bulkscore=0
 classifier=spam adjust=0 reason=mlx scancount=1 engine=8.12.0-2009150000
 definitions=main-2102030123
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

Pinning one 4K page at a time is inefficient, so do it in batches of 512
instead.  This is just an optimization with no functional change
intended, and in particular the driver still calls iommu_map() with the
largest physically contiguous range possible.

Add two fields in vfio_batch to remember where to start between calls to
vfio_pin_pages_remote(), and use vfio_batch_unpin() to handle remaining
pages in the batch in case of error.

qemu pins pages for guests around 8% faster on my test system, a
two-node Broadwell server with 128G memory per node.  The qemu process
was bound to one node with its allocations constrained there as well.

                             base               test
          guest              ----------------   ----------------
       mem (GB)   speedup    avg sec    (std)   avg sec    (std)
              1      7.4%       0.61   (0.00)      0.56   (0.00)
              2      8.3%       0.93   (0.00)      0.85   (0.00)
              4      8.4%       1.46   (0.00)      1.34   (0.00)
              8      8.6%       2.54   (0.01)      2.32   (0.00)
             16      8.3%       4.66   (0.00)      4.27   (0.01)
             32      8.3%       8.94   (0.01)      8.20   (0.01)
             64      8.2%      17.47   (0.01)     16.04   (0.03)
            120      8.5%      32.45   (0.13)     29.69   (0.01)

perf diff confirms less time spent in pup.  Here are the top ten
functions:

             Baseline  Delta Abs  Symbol

               78.63%     +6.64%  clear_page_erms
                1.50%     -1.50%  __gup_longterm_locked
                1.27%     -0.78%  __get_user_pages
                          +0.76%  kvm_zap_rmapp.constprop.0
                0.54%     -0.53%  vmacache_find
                0.55%     -0.51%  get_pfnblock_flags_mask
                0.48%     -0.48%  __get_user_pages_remote
                          +0.39%  slot_rmap_walk_next
                          +0.32%  vfio_pin_map_dma
                          +0.26%  kvm_handle_hva_range
                ...

Suggested-by: Matthew Wilcox (Oracle) <willy@infradead.org>
Signed-off-by: Daniel Jordan <daniel.m.jordan@oracle.com>
---
 drivers/vfio/vfio_iommu_type1.c | 133 +++++++++++++++++++++-----------
 1 file changed, 88 insertions(+), 45 deletions(-)

diff --git a/drivers/vfio/vfio_iommu_type1.c b/drivers/vfio/vfio_iommu_type1.c
index c26c1a4697e5..ac59bfc4e332 100644
--- a/drivers/vfio/vfio_iommu_type1.c
+++ b/drivers/vfio/vfio_iommu_type1.c
@@ -101,6 +101,8 @@ struct vfio_batch {
 	struct page		**pages;	/* for pin_user_pages_remote */
 	struct page		*fallback_page; /* if pages alloc fails */
 	int			capacity;	/* length of pages array */
+	int			size;		/* of batch currently */
+	int			offset;		/* of next entry in pages */
 };
 
 struct vfio_group {
@@ -425,6 +427,9 @@ static int put_pfn(unsigned long pfn, int prot)
 
 static void vfio_batch_init(struct vfio_batch *batch)
 {
+	batch->size = 0;
+	batch->offset = 0;
+
 	if (unlikely(disable_hugepages))
 		goto fallback;
 
@@ -440,6 +445,17 @@ static void vfio_batch_init(struct vfio_batch *batch)
 	batch->capacity = 1;
 }
 
+static void vfio_batch_unpin(struct vfio_batch *batch, struct vfio_dma *dma)
+{
+	while (batch->size) {
+		unsigned long pfn = page_to_pfn(batch->pages[batch->offset]);
+
+		put_pfn(pfn, dma->prot);
+		batch->offset++;
+		batch->size--;
+	}
+}
+
 static void vfio_batch_fini(struct vfio_batch *batch)
 {
 	if (batch->capacity == VFIO_BATCH_MAX_CAPACITY)
@@ -526,65 +542,88 @@ static long vfio_pin_pages_remote(struct vfio_dma *dma, unsigned long vaddr,
 				  long npage, unsigned long *pfn_base,
 				  unsigned long limit, struct vfio_batch *batch)
 {
-	unsigned long pfn = 0;
+	unsigned long pfn;
+	struct mm_struct *mm = current->mm;
 	long ret, pinned = 0, lock_acct = 0;
 	bool rsvd;
 	dma_addr_t iova = vaddr - dma->vaddr + dma->iova;
 
 	/* This code path is only user initiated */
-	if (!current->mm)
+	if (!mm)
 		return -ENODEV;
 
-	ret = vaddr_get_pfns(current->mm, vaddr, 1, dma->prot, pfn_base,
-			     batch->pages);
-	if (ret < 0)
-		return ret;
-
-	pinned++;
-	rsvd = is_invalid_reserved_pfn(*pfn_base);
-
-	/*
-	 * Reserved pages aren't counted against the user, externally pinned
-	 * pages are already counted against the user.
-	 */
-	if (!rsvd && !vfio_find_vpfn(dma, iova)) {
-		if (!dma->lock_cap && current->mm->locked_vm + 1 > limit) {
-			put_pfn(*pfn_base, dma->prot);
-			pr_warn("%s: RLIMIT_MEMLOCK (%ld) exceeded\n", __func__,
-					limit << PAGE_SHIFT);
-			return -ENOMEM;
-		}
-		lock_acct++;
+	if (batch->size) {
+		/* Leftover pages in batch from an earlier call. */
+		*pfn_base = page_to_pfn(batch->pages[batch->offset]);
+		pfn = *pfn_base;
+		rsvd = is_invalid_reserved_pfn(*pfn_base);
+	} else {
+		*pfn_base = 0;
 	}
 
-	if (unlikely(disable_hugepages))
-		goto out;
+	while (npage) {
+		if (!batch->size) {
+			/* Empty batch, so refill it. */
+			long req_pages = min_t(long, npage, batch->capacity);
 
-	/* Lock all the consecutive pages from pfn_base */
-	for (vaddr += PAGE_SIZE, iova += PAGE_SIZE; pinned < npage;
-	     pinned++, vaddr += PAGE_SIZE, iova += PAGE_SIZE) {
-		ret = vaddr_get_pfns(current->mm, vaddr, 1, dma->prot, &pfn,
-				     batch->pages);
-		if (ret < 0)
-			break;
+			ret = vaddr_get_pfns(mm, vaddr, req_pages, dma->prot,
+					     &pfn, batch->pages);
+			if (ret < 0)
+				return ret;
 
-		if (pfn != *pfn_base + pinned ||
-		    rsvd != is_invalid_reserved_pfn(pfn)) {
-			put_pfn(pfn, dma->prot);
-			break;
+			batch->size = ret;
+			batch->offset = 0;
+
+			if (!*pfn_base) {
+				*pfn_base = pfn;
+				rsvd = is_invalid_reserved_pfn(*pfn_base);
+			}
 		}
 
-		if (!rsvd && !vfio_find_vpfn(dma, iova)) {
-			if (!dma->lock_cap &&
-			    current->mm->locked_vm + lock_acct + 1 > limit) {
-				put_pfn(pfn, dma->prot);
-				pr_warn("%s: RLIMIT_MEMLOCK (%ld) exceeded\n",
-					__func__, limit << PAGE_SHIFT);
-				ret = -ENOMEM;
-				goto unpin_out;
+		/*
+		 * pfn is preset for the first iteration of this inner loop and
+		 * updated at the end to handle a VM_PFNMAP pfn.  In that case,
+		 * batch->pages isn't valid (there's no struct page), so allow
+		 * batch->pages to be touched only when there's more than one
+		 * pfn to check, which guarantees the pfns are from a
+		 * !VM_PFNMAP vma.
+		 */
+		while (true) {
+			if (pfn != *pfn_base + pinned ||
+			    rsvd != is_invalid_reserved_pfn(pfn))
+				goto out;
+
+			/*
+			 * Reserved pages aren't counted against the user,
+			 * externally pinned pages are already counted against
+			 * the user.
+			 */
+			if (!rsvd && !vfio_find_vpfn(dma, iova)) {
+				if (!dma->lock_cap &&
+				    mm->locked_vm + lock_acct + 1 > limit) {
+					pr_warn("%s: RLIMIT_MEMLOCK (%ld) exceeded\n",
+						__func__, limit << PAGE_SHIFT);
+					ret = -ENOMEM;
+					goto unpin_out;
+				}
+				lock_acct++;
 			}
-			lock_acct++;
+
+			pinned++;
+			npage--;
+			vaddr += PAGE_SIZE;
+			iova += PAGE_SIZE;
+			batch->offset++;
+			batch->size--;
+
+			if (!batch->size)
+				break;
+
+			pfn = page_to_pfn(batch->pages[batch->offset]);
 		}
+
+		if (unlikely(disable_hugepages))
+			break;
 	}
 
 out:
@@ -596,6 +635,7 @@ static long vfio_pin_pages_remote(struct vfio_dma *dma, unsigned long vaddr,
 			for (pfn = *pfn_base ; pinned ; pfn++, pinned--)
 				put_pfn(pfn, dma->prot);
 		}
+		vfio_batch_unpin(batch, dma);
 
 		return ret;
 	}
@@ -1305,6 +1345,7 @@ static int vfio_pin_map_dma(struct vfio_iommu *iommu, struct vfio_dma *dma,
 		if (ret) {
 			vfio_unpin_pages_remote(dma, iova + dma->size, pfn,
 						npage, true);
+			vfio_batch_unpin(&batch, dma);
 			break;
 		}
 
@@ -1546,11 +1587,13 @@ static int vfio_iommu_replay(struct vfio_iommu *iommu,
 			ret = iommu_map(domain->domain, iova, phys,
 					size, dma->prot | domain->prot);
 			if (ret) {
-				if (!dma->iommu_mapped)
+				if (!dma->iommu_mapped) {
 					vfio_unpin_pages_remote(dma, iova,
 							phys >> PAGE_SHIFT,
 							size >> PAGE_SHIFT,
 							true);
+					vfio_batch_unpin(&batch, dma);
+				}
 				goto unwind;
 			}
 
