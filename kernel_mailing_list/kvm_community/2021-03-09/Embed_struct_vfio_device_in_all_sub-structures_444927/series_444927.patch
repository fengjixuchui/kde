From patchwork Tue Mar  9 21:38:43 2021
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Jason Gunthorpe <jgg@nvidia.com>
X-Patchwork-Id: 12126579
Return-Path: <kvm-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-16.0 required=3.0 tests=BAYES_00,DKIMWL_WL_HIGH,
	DKIM_SIGNED,DKIM_VALID,DKIM_VALID_AU,HEADER_FROM_DIFFERENT_DOMAINS,
	INCLUDES_CR_TRAILER,INCLUDES_PATCH,MAILING_LIST_MULTI,MSGID_FROM_MTA_HEADER,
	SPF_HELO_NONE,SPF_PASS autolearn=ham autolearn_force=no version=3.4.0
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 6C1E0C4332B
	for <kvm@archiver.kernel.org>; Tue,  9 Mar 2021 21:39:45 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by mail.kernel.org (Postfix) with ESMTP id 4E90B64FC6
	for <kvm@archiver.kernel.org>; Tue,  9 Mar 2021 21:39:45 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S232064AbhCIVjI (ORCPT <rfc822;kvm@archiver.kernel.org>);
        Tue, 9 Mar 2021 16:39:08 -0500
Received: from mail-bn7nam10on2073.outbound.protection.outlook.com
 ([40.107.92.73]:49607
        "EHLO NAM10-BN7-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S231800AbhCIVi5 (ORCPT <rfc822;kvm@vger.kernel.org>);
        Tue, 9 Mar 2021 16:38:57 -0500
ARC-Seal: i=1; a=rsa-sha256; s=arcselector9901; d=microsoft.com; cv=none;
 b=V4YkKX7LgG/Z+7RqEJpiz7QFe1tZqSov20IJEBjdyZCUwTgpQeb+97knwB83WVPIO5tZtCQLqDMTWucu6ezslFm2gAa5RR33s6ozaUpRy8b78S++RViouIq+zhAkqWGNMgQouR4kAdoCfn8vIGV9vSEgeNq9c3NoSnNjmpir9KebKCIcQDn0vHg3ckBqZ7jTtannU8+tIvqknVDhOHVkCrQLyUTfGhME3gmO2/mbeXgHC0oA1DRbNXakwKt9orinqt55frgKngvxOsEzJzSwfato5Fkr+xDE69dX72SAHyRk1Im+KUj+kC6vSdmlsQ4UpOOHRHeZnmiGorIMiuDlwg==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector9901;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=WZpCFJ7cCp6ZAqV2j9vkC6lIDX4134nSQAyR4xJGRzw=;
 b=OkFgMEpBqFRx0mxEtQ+YsvK6StXM9yq3hKaCFLYY0Se3YA9hcziKUJGXzDpV8672CDWl1xMu/5CORgDw5dR9S3jiizIAnCUb4CZrfff3tJuWzrFUYl0Trt3V+GhPSH+Vx9whHSih+826yGLwwzRrNZqsAr3iA3oSa5ihVHFBevtSZiG5UjRSt9fq5/SEoM+j93PacMFUfcKD2h87tLqoniQVg7FIq0WTqQpoajeJNDWvoBej8D3L2TV4fzZd4huWfdX7BbfHUgd1JnDPl0/HjdSgVYbZW+41S+t3fonNF/xfGUFYcFL6FJJSpqZw31D1bKN9a66GYfT4xg9E/uxgLQ==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=nvidia.com; dmarc=pass action=none header.from=nvidia.com;
 dkim=pass header.d=nvidia.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=Nvidia.com;
 s=selector2;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=WZpCFJ7cCp6ZAqV2j9vkC6lIDX4134nSQAyR4xJGRzw=;
 b=e6aHmOf59BUo7VJeNDsIG66OmV4XYnkalWVlcrwV/0t7hxWPfyYlJ/LDysPQs6vLcOzydLa7gM0hs6YmfLsY/xxq8DyooJ1tIRYdBBMYJtxKCWIyCkjZXQq07ChfFnTh/aoBNSOosxzfnXh+7ossfoo1veA9VpjY7hVGlmnYshSS64FDmW/plBMMi2aboNzZAsr1+UWhHZr4UlIfBld9Uk+le+lhF6tbUuFaN3Mm0c0ZwVEZ9kMgFVHtIw/0k3EUrLtJdbr4iPgu7XHqFXK+epWlJzPzvNE8W9Hdg6tKotlJVDjgtcFYXHXVqC/xU9lL0nsas+nwylq+x1YeBfy7yg==
Authentication-Results: redhat.com; dkim=none (message not signed)
 header.d=none;redhat.com; dmarc=none action=none header.from=nvidia.com;
Received: from DM6PR12MB3834.namprd12.prod.outlook.com (2603:10b6:5:14a::12)
 by DM5PR1201MB2489.namprd12.prod.outlook.com (2603:10b6:3:e2::22) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.3912.17; Tue, 9 Mar
 2021 21:38:55 +0000
Received: from DM6PR12MB3834.namprd12.prod.outlook.com
 ([fe80::1c62:7fa3:617b:ab87]) by DM6PR12MB3834.namprd12.prod.outlook.com
 ([fe80::1c62:7fa3:617b:ab87%6]) with mapi id 15.20.3912.027; Tue, 9 Mar 2021
 21:38:55 +0000
From: Jason Gunthorpe <jgg@nvidia.com>
To: Alex Williamson <alex.williamson@redhat.com>,
        Cornelia Huck <cohuck@redhat.com>, kvm@vger.kernel.org
Cc: "Raj, Ashok" <ashok.raj@intel.com>,
        Dan Williams <dan.j.williams@intel.com>,
        Daniel Vetter <daniel@ffwll.ch>,
        Christoph Hellwig <hch@lst.de>,
        Leon Romanovsky <leonro@nvidia.com>,
        Max Gurtovoy <mgurtovoy@nvidia.com>,
        Tarun Gupta <targupta@nvidia.com>
Subject: [PATCH 01/10] vfio: Simplify the lifetime logic for vfio_device
Date: Tue,  9 Mar 2021 17:38:43 -0400
Message-Id: <1-v1-7355d38b9344+17481-vfio1_jgg@nvidia.com>
In-Reply-To: <0-v1-7355d38b9344+17481-vfio1_jgg@nvidia.com>
References: 
X-Originating-IP: [142.162.115.133]
X-ClientProxiedBy: MN2PR20CA0010.namprd20.prod.outlook.com
 (2603:10b6:208:e8::23) To DM6PR12MB3834.namprd12.prod.outlook.com
 (2603:10b6:5:14a::12)
MIME-Version: 1.0
X-MS-Exchange-MessageSentRepresentingType: 1
Received: from mlx.ziepe.ca (142.162.115.133) by
 MN2PR20CA0010.namprd20.prod.outlook.com (2603:10b6:208:e8::23) with Microsoft
 SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.3912.17 via Frontend
 Transport; Tue, 9 Mar 2021 21:38:53 +0000
Received: from jgg by mlx with local (Exim 4.94)        (envelope-from
 <jgg@nvidia.com>)        id 1lJk44-00AVIa-M1; Tue, 09 Mar 2021 17:38:52 -0400
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: 69dc1eec-6450-4876-d7f7-08d8e343bc70
X-MS-TrafficTypeDiagnostic: DM5PR1201MB2489:
X-MS-Exchange-Transport-Forked: True
X-Microsoft-Antispam-PRVS: 
 <DM5PR1201MB24890C8905E11D12FF61CE78C2929@DM5PR1201MB2489.namprd12.prod.outlook.com>
X-MS-Oob-TLC-OOBClassifiers: OLM:6790;
X-MS-Exchange-SenderADCheck: 1
X-Microsoft-Antispam: BCL:0;
X-Microsoft-Antispam-Message-Info: 
 R30bNbO3gL67xSg38wlTqNoHgE5ZoIpRIPoPxCpWXspA+2/dbPfTP8Tu2KJJk6lZfJOLQyh1ALMsMZSsaeO8nEHYuZeVRq7V00lSxH44BtzLPtzIRjPrPnzDPJmG0xfWI7KG/8AwWQ/mlbNErTa9EasjOOqhZ2svuiwJ/DKAKlunUu2LZUCOqcUaatHxn5epMJVJOOhlhPJKK1YvT2Bg2lTWGiqHIHP8sixbnn5CofIZtTEqIGj0PVI0OXyTbIBwq/hbI67ne0WJsoHiRjiv41K3DDSbQ/fgfSdwXi7vsYh0LkazBB+I5HQVsn59qM/C2xFtknHtmfQHllJ50i8vhZ9WdivTIbES6YFU3djB0gJLJgB628mTi5BCc9pwjTfrjloiStXrLu1cRWr780qQ0svAGcDVKCwRBEEPqrXa8JpACPfijSmP7eHgU7HrsTU9f0DmmBjauQK47K8pijlHOpIbYHepwlmeBs0o5TggjK+bbA65rNPakwWHloKNORX4GHMcgEcYAzIAbkUSCwKXCOS3YGTzoxNFxfDwXZ5ztk9ncnWRz79WCFUK2F0Bhc3W
X-Forefront-Antispam-Report: 
 CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB3834.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(4636009)(136003)(346002)(376002)(39860400002)(396003)(366004)(6666004)(26005)(36756003)(316002)(5660300002)(4326008)(478600001)(54906003)(110136005)(9746002)(426003)(66556008)(66476007)(2616005)(9786002)(8936002)(86362001)(186003)(2906002)(8676002)(107886003)(83380400001)(66946007)(4216001);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData: 
 I5N7wTkM6m8XN/0hS3Q5g48kRtDmjYHX23/2lWvZ7AEidrvjo8pMIplls/k+6x3GLD5RVpizohAH1lYkQ9+Q2rDoWGmeMUStJW3Mh0y+q6E/FhzmWS56jV9lfgcW+cHd0QKKcmMbWWRtX4jIaE8Q4r1D4Qif5gyDQ2XQREuE/D6PFmkRAeT1bE/VctlAay21RJmETDuspC3zwelIeypmyQus6wvvkRDLtMym2kKa57XkqqQ52UhhUxBwJ9ZfLwObO5CBIpmLy4rVJ0f5SinIPNNpVBnbwVKYjWubvCUWVXhRdOR5+jy1avzOhyfCkjAToe6jxxx2IdTqy4vhow//m1qo9jVxSHrzeKBPvLCRmn7zPGeTRMxbcY9AfCrhFWk2OgvfoVoSyygndadkr/z8J8ZWTxiIEbOjef6/fHTuMsOTmexM3Qfz/cmkD04RqM1529MeK5V4R7i8+QkJXBSSu37jMfFeeSUgIP0MASXSHa0uN7oACunxw5gr4x5YEGP4fWyzK9QY5dFw83envY8nASTKlkvasyuMjrcvmmm0/hRthuvaXP5+LFKTBkda0Z5GBW5eW8SaFRZr30uBWnZUC4167waTJq74xvZky/ENVYF3IxGeCt0/ooIgSQcageWstdj2BFN3fuJJVdre3btfAOirg3vZiInLVE1KEfjvaUZkETD9Ix2SFSKtvFZCL9o30Hmsh78u9JU8c4Z5zZhjLpNb1j+83itz23PrqF5l67oROLRqv+7UHMm8qWMIu/Mc7C5EvIJqfBQ+GpYADMi7peT94CBy7InmUWWHGvGPgXQgnZus+J0oLqgrFUYS4N5DKP5kPyBpY4GdUAFgr6kbsW+Ypg9+0TP1AO0bW7g21Cf14me4CLEqjWqSxgE2aYHJVzDG4IuddD6IOA+D84xKfJhh6E+hJ4YOb4r7VHJ7Trb0ZDEB6nJaP2TcoAQG3WncqK291Mf37tnRasl1zk028yAXOypGfDZ8Mfsx1TEIrsdb5GNyWmp0QdPyWFJMPGjT3b3uBsm1yYGx1V5sytLEZiUoeqLUuTCt9gxnl2kD0bXihPCGtmLMNKErLFz37ek0NimvJ5TondgG64s5c1pz5RCZ6TdhJF7VGalMtWMcjulK/K3eqDH6CmuYMFPkP8LNUVJ57tVHPaN4X/KBOXGoDFLoVTIJFkkU251N4MRqa1yh0y/R5ywTWJUjSibQbTrep2NvC/i238/+0Q9pOmerxoJj1f5GYFxon+YRTEjGKbMs7/DlZkKDw758OmbaEbw1YAWM+Kh7NFG7GAND7LG73fK6qFYdlUuAGKm3G+vduDFx3EgseN8h/w42WbULqK6PA+weWc9pF1VMg8T/tc0j9Q==
X-OriginatorOrg: Nvidia.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 69dc1eec-6450-4876-d7f7-08d8e343bc70
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB3834.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 09 Mar 2021 21:38:54.2148
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 43083d15-7273-40c1-b7db-39efd9ccc17a
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: 
 E3Abc73AoLpGfuxOMXqr0NoOD3GippI3m83bJXlfyuUkKtUwvejs6t2izmyuSL2V
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DM5PR1201MB2489
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

The vfio_device is using a 'sleep until all refs go to zero' pattern for
its lifetime, but it is indirectly coded by repeatedly scanning the group
list waiting for the device to be removed on its own.

Switch this around to be a direct representation, use a refcount to count
the number of places that are blocking destruction and sleep directly on a
completion until that counter goes to zero. kfree the device after other
accesses have been excluded in vfio_del_group_dev(). This is a fairly
common Linux idiom.

This simplifies a couple of things:

- kref_put_mutex() is very rarely used in the kernel. Here it is being
  used to prevent a zero ref device from being seen in the group
  list. Instead allow the zero ref device to continue to exist in the
  device_list and use refcount_inc_not_zero() to exclude it once refs go
  to zero.

- get/putting the group while get/putting the device. The device already
  holds a reference to the group, set during vfio_group_create_device(),
  there is no need for extra reference traffic. Cleanly have the balancing
  group put in vfio_del_group_dev() before the kfree().

Clearly communicated lifetime rules are essential before we can embed the
struct vfio_device in other structures. This patch is organized so the
next patch will be able to alter the API to allow drivers to provide the
kfree.

Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
---
 drivers/vfio/vfio.c | 93 +++++++++++++++------------------------------
 1 file changed, 30 insertions(+), 63 deletions(-)

diff --git a/drivers/vfio/vfio.c b/drivers/vfio/vfio.c
index 38779e6fd80cb4..04e24248e77f50 100644
--- a/drivers/vfio/vfio.c
+++ b/drivers/vfio/vfio.c
@@ -46,7 +46,6 @@ static struct vfio {
 	struct mutex			group_lock;
 	struct cdev			group_cdev;
 	dev_t				group_devt;
-	wait_queue_head_t		release_q;
 } vfio;
 
 struct vfio_iommu_driver {
@@ -91,7 +90,8 @@ struct vfio_group {
 };
 
 struct vfio_device {
-	struct kref			kref;
+	refcount_t			refcount;
+	struct completion		comp;
 	struct device			*dev;
 	const struct vfio_device_ops	*ops;
 	struct vfio_group		*group;
@@ -544,14 +544,18 @@ struct vfio_device *vfio_group_create_device(struct vfio_group *group,
 	if (!device)
 		return ERR_PTR(-ENOMEM);
 
-	kref_init(&device->kref);
+	refcount_set(&device->refcount, 1);
+	init_completion(&device->comp);
 	device->dev = dev;
 	device->group = group;
 	device->ops = ops;
 	device->device_data = device_data;
 	dev_set_drvdata(dev, device);
 
-	/* No need to get group_lock, caller has group reference */
+	/*
+	 * No need to get group_lock, caller has group reference, matching put
+	 * is in vfio_del_group_dev()
+	 */
 	vfio_group_get(group);
 
 	mutex_lock(&group->device_lock);
@@ -562,37 +566,17 @@ struct vfio_device *vfio_group_create_device(struct vfio_group *group,
 	return device;
 }
 
-static void vfio_device_release(struct kref *kref)
-{
-	struct vfio_device *device = container_of(kref,
-						  struct vfio_device, kref);
-	struct vfio_group *group = device->group;
-
-	list_del(&device->group_next);
-	group->dev_counter--;
-	mutex_unlock(&group->device_lock);
-
-	dev_set_drvdata(device->dev, NULL);
-
-	kfree(device);
-
-	/* vfio_del_group_dev may be waiting for this device */
-	wake_up(&vfio.release_q);
-}
-
 /* Device reference always implies a group reference */
 void vfio_device_put(struct vfio_device *device)
 {
-	struct vfio_group *group = device->group;
-	kref_put_mutex(&device->kref, vfio_device_release, &group->device_lock);
-	vfio_group_put(group);
+	if (refcount_dec_and_test(&device->refcount))
+		complete(&device->comp);
 }
 EXPORT_SYMBOL_GPL(vfio_device_put);
 
-static void vfio_device_get(struct vfio_device *device)
+static bool vfio_device_try_get(struct vfio_device *device)
 {
-	vfio_group_get(device->group);
-	kref_get(&device->kref);
+	return refcount_inc_not_zero(&device->refcount);
 }
 
 static struct vfio_device *vfio_group_get_device(struct vfio_group *group,
@@ -602,8 +586,7 @@ static struct vfio_device *vfio_group_get_device(struct vfio_group *group,
 
 	mutex_lock(&group->device_lock);
 	list_for_each_entry(device, &group->device_list, group_next) {
-		if (device->dev == dev) {
-			vfio_device_get(device);
+		if (device->dev == dev && vfio_device_try_get(device)) {
 			mutex_unlock(&group->device_lock);
 			return device;
 		}
@@ -895,9 +878,8 @@ static struct vfio_device *vfio_device_get_from_name(struct vfio_group *group,
 			ret = !strcmp(dev_name(it->dev), buf);
 		}
 
-		if (ret) {
+		if (ret && vfio_device_try_get(it)) {
 			device = it;
-			vfio_device_get(device);
 			break;
 		}
 	}
@@ -920,19 +902,13 @@ EXPORT_SYMBOL_GPL(vfio_device_data);
  * removed.  Open file descriptors for the device... */
 void *vfio_del_group_dev(struct device *dev)
 {
-	DEFINE_WAIT_FUNC(wait, woken_wake_function);
 	struct vfio_device *device = dev_get_drvdata(dev);
 	struct vfio_group *group = device->group;
 	void *device_data = device->device_data;
 	struct vfio_unbound_dev *unbound;
 	unsigned int i = 0;
 	bool interrupted = false;
-
-	/*
-	 * The group exists so long as we have a device reference.  Get
-	 * a group reference and use it to scan for the device going away.
-	 */
-	vfio_group_get(group);
+	long rc;
 
 	/*
 	 * When the device is removed from the group, the group suddenly
@@ -953,32 +929,18 @@ void *vfio_del_group_dev(struct device *dev)
 	WARN_ON(!unbound);
 
 	vfio_device_put(device);
-
-	/*
-	 * If the device is still present in the group after the above
-	 * 'put', then it is in use and we need to request it from the
-	 * bus driver.  The driver may in turn need to request the
-	 * device from the user.  We send the request on an arbitrary
-	 * interval with counter to allow the driver to take escalating
-	 * measures to release the device if it has the ability to do so.
-	 */
-	add_wait_queue(&vfio.release_q, &wait);
-
-	do {
-		device = vfio_group_get_device(group, dev);
-		if (!device)
-			break;
-
+	rc = try_wait_for_completion(&device->comp);
+	while (rc <= 0) {
 		if (device->ops->request)
 			device->ops->request(device_data, i++);
 
-		vfio_device_put(device);
-
 		if (interrupted) {
-			wait_woken(&wait, TASK_UNINTERRUPTIBLE, HZ * 10);
+			rc = wait_for_completion_timeout(&device->comp,
+							 HZ * 10);
 		} else {
-			wait_woken(&wait, TASK_INTERRUPTIBLE, HZ * 10);
-			if (signal_pending(current)) {
+			rc = wait_for_completion_interruptible_timeout(
+				&device->comp, HZ * 10);
+			if (rc < 0) {
 				interrupted = true;
 				dev_warn(dev,
 					 "Device is currently in use, task"
@@ -987,10 +949,13 @@ void *vfio_del_group_dev(struct device *dev)
 					 current->comm, task_pid_nr(current));
 			}
 		}
+	}
 
-	} while (1);
+	mutex_lock(&group->device_lock);
+	list_del(&device->group_next);
+	group->dev_counter--;
+	mutex_unlock(&group->device_lock);
 
-	remove_wait_queue(&vfio.release_q, &wait);
 	/*
 	 * In order to support multiple devices per group, devices can be
 	 * plucked from the group while other devices in the group are still
@@ -1008,7 +973,10 @@ void *vfio_del_group_dev(struct device *dev)
 	if (list_empty(&group->device_list))
 		wait_event(group->container_q, !group->container);
 
+	/* Matches the get in vfio_group_create_device() */
 	vfio_group_put(group);
+	dev_set_drvdata(dev, NULL);
+	kfree(device);
 
 	return device_data;
 }
@@ -2379,7 +2347,6 @@ static int __init vfio_init(void)
 	mutex_init(&vfio.iommu_drivers_lock);
 	INIT_LIST_HEAD(&vfio.group_list);
 	INIT_LIST_HEAD(&vfio.iommu_drivers_list);
-	init_waitqueue_head(&vfio.release_q);
 
 	ret = misc_register(&vfio_dev);
 	if (ret) {

From patchwork Tue Mar  9 21:38:44 2021
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Jason Gunthorpe <jgg@nvidia.com>
X-Patchwork-Id: 12126583
Return-Path: <kvm-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-16.0 required=3.0 tests=BAYES_00,DKIMWL_WL_HIGH,
	DKIM_SIGNED,DKIM_VALID,DKIM_VALID_AU,HEADER_FROM_DIFFERENT_DOMAINS,
	INCLUDES_CR_TRAILER,INCLUDES_PATCH,MAILING_LIST_MULTI,MSGID_FROM_MTA_HEADER,
	SPF_HELO_NONE,SPF_PASS autolearn=unavailable autolearn_force=no version=3.4.0
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
	by smtp.lore.kernel.org (Postfix) with ESMTP id A1309C4332E
	for <kvm@archiver.kernel.org>; Tue,  9 Mar 2021 21:39:45 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by mail.kernel.org (Postfix) with ESMTP id 860AF64FD1
	for <kvm@archiver.kernel.org>; Tue,  9 Mar 2021 21:39:45 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S232073AbhCIVjK (ORCPT <rfc822;kvm@archiver.kernel.org>);
        Tue, 9 Mar 2021 16:39:10 -0500
Received: from mail-bn7nam10on2073.outbound.protection.outlook.com
 ([40.107.92.73]:49607
        "EHLO NAM10-BN7-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S231859AbhCIVi5 (ORCPT <rfc822;kvm@vger.kernel.org>);
        Tue, 9 Mar 2021 16:38:57 -0500
ARC-Seal: i=1; a=rsa-sha256; s=arcselector9901; d=microsoft.com; cv=none;
 b=AbkxRIO29BijacP6UWBTjxTYvlnXQxnpvvZzo+jw1/EnRHROpoPpmI21rU+GEljZ7iZKt5D8Z6HvrQAA4nYTpTESxiCbdeDroxYcMjFp9MiGT0A2nnC76qboLaSCxPu0jsRDKNwWnpBfvopPn1UjsuUQZCzeAHA0tgf5z2eQBJFTaxcIk4zJFfAonxA3m8jvq2UQm0YjqUBpV2sE2aYvqJD65VF56RM9PheNP+FXW+mdbcgLnmisH9O10SwaCb+Rlc6KOA6LMFMNdJ87OpgALmeaPRApY9oH4z3IrQEcTViETamQS3iMUuL3pmPK7lUScO3IehEy4IUhwokWe3MpQQ==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector9901;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=crWEqmM+Da669DP/L5wYzC4CpvMA2sM0GfG0jfA5hE8=;
 b=Sa1gZKjr4PSTiDulKZqcdVt1qNyP1tVrhC/zQdRdivXQwbtaeQSOi76ZcZZh6aA4NwEjbUBK3erdcMDS6OPOBq0FFt1iD0ZsNPef+A5Ip3zgkVGZthU7SYEP3UJ1UDx0aNyJKfNQQZwjaSxOTIoHW00qzTkiPTNxayLuWyFFD/CwCzAykgLcxshhGB/FycAgdwlv8HZW1x2mfkHTSVZIxKB70Cpcw604h6SPlOlsr2SY0tvEILAVBZ/s/pnRohx2QfjOgUUb2coKopCtVadNR4lfCAs+IKW1Jl88KV4JZt3ITdnK/fnlFEhVqCRtE78o0h59I6LoBIbioFPkztl+9Q==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=nvidia.com; dmarc=pass action=none header.from=nvidia.com;
 dkim=pass header.d=nvidia.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=Nvidia.com;
 s=selector2;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=crWEqmM+Da669DP/L5wYzC4CpvMA2sM0GfG0jfA5hE8=;
 b=DvHaHBdq0srMh0jRWchT3NbmGWxl2L77mTjBm1c4CYE8dxMPT17FdUuX6W5LegF1fCmIHl2QXa8YcLiZMHsU+7u7oHxkgc07Su4XtCltivmkMXyM+nE9NyL2VF5Yw05ro4KMQZo75r0m2i1yW/H+hPLeBq0FTWwSlI1FaYHOTpUGUJ2hryDas2u+kTc2MyX4MzOSJQuDyhzbp4DLpK9Gk6dePsMGa14HEIWshrBUkdF5IpMVWyi99CwYYNC5lWgTWYUY/b9TOzSV9Eqk5tNYqmfTB9FkXW5hfYF5H6loIc2aD7pHFf1/VLdGufjV9MH1SAhZavKtyaVYxX5amMCtwQ==
Authentication-Results: redhat.com; dkim=none (message not signed)
 header.d=none;redhat.com; dmarc=none action=none header.from=nvidia.com;
Received: from DM6PR12MB3834.namprd12.prod.outlook.com (2603:10b6:5:14a::12)
 by DM5PR1201MB2489.namprd12.prod.outlook.com (2603:10b6:3:e2::22) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.3912.17; Tue, 9 Mar
 2021 21:38:55 +0000
Received: from DM6PR12MB3834.namprd12.prod.outlook.com
 ([fe80::1c62:7fa3:617b:ab87]) by DM6PR12MB3834.namprd12.prod.outlook.com
 ([fe80::1c62:7fa3:617b:ab87%6]) with mapi id 15.20.3912.027; Tue, 9 Mar 2021
 21:38:55 +0000
From: Jason Gunthorpe <jgg@nvidia.com>
To: Alex Williamson <alex.williamson@redhat.com>,
        Cornelia Huck <cohuck@redhat.com>,
        Jonathan Corbet <corbet@lwn.net>, kvm@vger.kernel.org,
        linux-doc@vger.kernel.org
Cc: "Raj, Ashok" <ashok.raj@intel.com>,
        Dan Williams <dan.j.williams@intel.com>,
        Daniel Vetter <daniel@ffwll.ch>,
        Christoph Hellwig <hch@lst.de>,
        Leon Romanovsky <leonro@nvidia.com>,
        Max Gurtovoy <mgurtovoy@nvidia.com>,
        Tarun Gupta <targupta@nvidia.com>
Subject: [PATCH 02/10] vfio: Split creation of a vfio_device into init and
 register ops
Date: Tue,  9 Mar 2021 17:38:44 -0400
Message-Id: <2-v1-7355d38b9344+17481-vfio1_jgg@nvidia.com>
In-Reply-To: <0-v1-7355d38b9344+17481-vfio1_jgg@nvidia.com>
References: 
X-Originating-IP: [142.162.115.133]
X-ClientProxiedBy: MN2PR20CA0026.namprd20.prod.outlook.com
 (2603:10b6:208:e8::39) To DM6PR12MB3834.namprd12.prod.outlook.com
 (2603:10b6:5:14a::12)
MIME-Version: 1.0
X-MS-Exchange-MessageSentRepresentingType: 1
Received: from mlx.ziepe.ca (142.162.115.133) by
 MN2PR20CA0026.namprd20.prod.outlook.com (2603:10b6:208:e8::39) with Microsoft
 SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.3912.17 via Frontend
 Transport; Tue, 9 Mar 2021 21:38:53 +0000
Received: from jgg by mlx with local (Exim 4.94)        (envelope-from
 <jgg@nvidia.com>)        id 1lJk44-00AVIf-N0; Tue, 09 Mar 2021 17:38:52 -0400
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: b613b1dc-d65f-43c9-7759-08d8e343bc81
X-MS-TrafficTypeDiagnostic: DM5PR1201MB2489:
X-MS-Exchange-Transport-Forked: True
X-Microsoft-Antispam-PRVS: 
 <DM5PR1201MB24899AEA184CAFAB05841E51C2929@DM5PR1201MB2489.namprd12.prod.outlook.com>
X-MS-Oob-TLC-OOBClassifiers: OLM:4125;
X-MS-Exchange-SenderADCheck: 1
X-Microsoft-Antispam: BCL:0;
X-Microsoft-Antispam-Message-Info: 
 TBlc+jeLTtRWBVX7h66F4bgLtp+lgLdsJ6hSVQjBGKShZU6EDlumgoRU2LNuFkWQcG2FRFbieEM+haXU4i/8nFqILnuAeOSIl0mI765Op+hVO0gVzVdp82TuXFXq7zhlwWZcz05U/DVn8dAYyvWPrSJBbev1IxmZuU5stHLxLb+1Gf3JXB1hmoHLZdRU1QKwQSzGJq5qhrAC803A25uO4/v6NN0sGfJTHdUpdCg0YYr/+Xvp3ZDB+vBHjIQMcivrwY9iMr2+DA5cwF6RPDnNjNMt9+dVlNqzd/q+q6QiScA78VH/jEpe+ZnK62qNqtvjoeSXq5Qh7g15mOgYaT0V8oOSw/tLPq38jJDB/ZIdo96TXpsPd2L3DsqctgUwiLi9sUYpR8lJXCv0Qb74mh8a2FHpzI5+YfLniEqqqoerdUV2Gk4oHyhsbJDgjX6GchU8tYc4fUOJ0MVraCMKAJIb9Qmn34MlfhPPY+dJFaAC7lloU+sjSDMlrIlMkcuet7RsnpZJbVbGtLnxaUmBbeKu8c21ZfJ6PrOCJE/UaKB9NhZiH6X/tTxvwOmCt2pL0D+9
X-Forefront-Antispam-Report: 
 CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB3834.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(4636009)(136003)(346002)(376002)(39860400002)(396003)(366004)(6666004)(26005)(36756003)(316002)(5660300002)(4326008)(478600001)(54906003)(110136005)(9746002)(426003)(66556008)(66476007)(2616005)(9786002)(8936002)(86362001)(186003)(2906002)(8676002)(107886003)(30864003)(83380400001)(66946007)(4216001);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData: 
 YufTQI+Bj3nU618QbzabMCG+PD3k9M1lqUUTGBbN+K9NBNw1iVDJcWsHyRjGX1uEjn926aZVbnUvd6c6Mu+KYziL1sduuiG8EaIdMhnaRp/L3booY5soc61R6FYsz8zaK32qOQfDMK8Xz+h+fOwWTq5JzWUZyP3MSUZqfUfCZxXj+HR/k//OisqjZHHmszBBg9bFBRTMf5eCKhIivVe59GN9nk2zfXfJFccSTaKylNXyODxQvBHeJqAT5zKOSAx2Pkx5kCOutcqTWq7vUwu64sAc4/jrUqV2TbE0X335zOcCiUOKE+II0yzvmPhMk130mYY8u34OeAdRWVLCMlzLAkyU2zgVGmRHt/dD8i/CQP8vkn5C8oVveDIwr5VDFoLODr2At+ddbRaGds53fWx/G/sKY15x26kxE2t/fVkGd4whnAjRv3PjZ/Q+567vfrOSy5wUqsxIUQ3t2ADUoz/YBiHt6syo7azV8L1SVi0vIsYp9WH+VZZ4+DMKP0DR4/0MQD5k4LP5kFskwto5k3PvRMTSVPqvOPfFp3z1zEhpS3RA1zjsziPVeD+pe1ybVqotfh9WLmbVcQUZo5ZEPGlpEAN79OzWBg1wLxN6Q5awVpZIWZo2cHUNC2G3b/MA7Y7ePkP3hQB3f+BGkGd4uu2fWBSs4APAUWmqPA80FogYwkFO1V3i19F6ekvfL3syljdv6T3vM3ljenasltUo9UIGEUxLwGIO5ZRmx7FvC8VSKIcngjOfVvmD30OLkc4bY2EmWKaOLG9yXe3g2CIqOjxvX0HOWhfVZepoIL6QjdrM6ypTqGGa/9LwH9v9YG5Bb81CYGdjexm6sgGITH9bP5s04iPScet/M1UQg0DtOpHz55Aa6RsqYXy4TAJtrzeMTU9GWah0M7oC11MJQwfRa3D28jv5gtiVwvz8zVpZeM9a2SSuAp8z27ynPNk4Ei+y6T3p0p3GcZnyd04Cifcy+QpGUVYeVDFIqtWpF3loXwILbdQ4qejEPteMMo89CGlyMZ/0n3jCgMzuQVLwqKarS2iMO5CSv6+3duHeP/IvMRrKF2b5fqT90JkLvAukMXcvB62nt+4MaNMkj2jkNEf98dCzhQYXxYQJcNSpynFgJAmTHZxpTpzpwg1r2ZjLYvnNTQCnAcsk20zoWAGKXs0raBmFG7ejXV37fnJpS1Zk/DMrGI7Q0zQzNaPcJa37sgsI5y6FDfU7bS30hFb5zWJL4n9PQg1O7KwmZEi1e5z1Prj7VG6h/KtD8BqT3JuuyOvQgGhLRQpcyM8CrZlG3cZYSJ1SBKaF5rKUcV7nSpHb2R/AAP5AN5CGKgaEZDNJmTTIPpbtQqcfayeQFBydyOL8dgTu+A==
X-OriginatorOrg: Nvidia.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 b613b1dc-d65f-43c9-7759-08d8e343bc81
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB3834.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 09 Mar 2021 21:38:54.2467
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 43083d15-7273-40c1-b7db-39efd9ccc17a
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: 
 ObgjD5J59rxifiqUFSF+PyDKwts5YAWlSAMdoio9Ykt9klOa+3zBcb+Nk+owNKxy
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DM5PR1201MB2489
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

This makes the struct vfio_pci_device part of the public interface so it
can be used with container_of and so forth, as is typical for a Linux
subystem.

This is the first step to bring some type-safety to the vfio interface by
allowing the replacement of 'void *' and 'struct device *' inputs with a
simple and clear 'struct vfio_pci_device *'

For now the self-allocating vfio_add_group_dev() interface is kept so each
user can be updated as a separate patch.

The expected usage pattern is

  driver core probe() function:
     my_device = kzalloc(sizeof(*mydevice));
     vfio_init_group_dev(&my_device->vdev, dev, ops, mydevice);
     /* other driver specific prep */
     vfio_register_group_dev(&my_device->vdev);
     dev_set_drvdata(my_device);

  driver core remove() function:
     my_device = dev_get_drvdata(dev);
     vfio_unregister_group_dev(&my_device->vdev);
     /* other driver specific tear down */
     kfree(my_device);

Allowing the driver to be able to use the drvdata and vifo_device to go
to/from its own data.

The pattern also makes it clear that vfio_register_group_dev() must be
last in the sequence, as once it is called the core code can immediately
start calling ops. The init/register gap is provided to allow for the
driver to do setup before ops can be called and thus avoid races.

Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
---
 Documentation/driver-api/vfio.rst |  31 ++++---
 drivers/vfio/vfio.c               | 132 ++++++++++++++----------------
 include/linux/vfio.h              |  16 ++++
 3 files changed, 96 insertions(+), 83 deletions(-)

diff --git a/Documentation/driver-api/vfio.rst b/Documentation/driver-api/vfio.rst
index f1a4d3c3ba0bb1..d3a02300913a7f 100644
--- a/Documentation/driver-api/vfio.rst
+++ b/Documentation/driver-api/vfio.rst
@@ -249,18 +249,23 @@ VFIO bus driver API
 
 VFIO bus drivers, such as vfio-pci make use of only a few interfaces
 into VFIO core.  When devices are bound and unbound to the driver,
-the driver should call vfio_add_group_dev() and vfio_del_group_dev()
-respectively::
-
-	extern int vfio_add_group_dev(struct device *dev,
-				      const struct vfio_device_ops *ops,
-				      void *device_data);
-
-	extern void *vfio_del_group_dev(struct device *dev);
-
-vfio_add_group_dev() indicates to the core to begin tracking the
-iommu_group of the specified dev and register the dev as owned by
-a VFIO bus driver.  The driver provides an ops structure for callbacks
+the driver should call vfio_register_group_dev() and
+vfio_unregister_group_dev() respectively::
+
+	void vfio_init_group_dev(struct vfio_device *device,
+				struct device *dev,
+				const struct vfio_device_ops *ops,
+				void *device_data);
+	int vfio_register_group_dev(struct vfio_device *device);
+	void vfio_unregister_group_dev(struct vfio_device *device);
+
+The driver should embed the vfio_device in its own structure and call
+vfio_init_group_dev() to pre-configure it before going to registration.
+vfio_register_group_dev() indicates to the core to begin tracking the
+iommu_group of the specified dev and register the dev as owned by a VFIO bus
+driver. Once vfio_register_group_dev() returns it is possible for userspace to
+start accessing the driver, thus the driver should ensure it is completely
+ready before calling it. The driver provides an ops structure for callbacks
 similar to a file operations structure::
 
 	struct vfio_device_ops {
@@ -276,7 +281,7 @@ similar to a file operations structure::
 	};
 
 Each function is passed the device_data that was originally registered
-in the vfio_add_group_dev() call above.  This allows the bus driver
+in the vfio_register_group_dev() call above.  This allows the bus driver
 an easy place to store its opaque, private data.  The open/release
 callbacks are issued when a new file descriptor is created for a
 device (via VFIO_GROUP_GET_DEVICE_FD).  The ioctl interface provides
diff --git a/drivers/vfio/vfio.c b/drivers/vfio/vfio.c
index 04e24248e77f50..cfa06ae3b9018b 100644
--- a/drivers/vfio/vfio.c
+++ b/drivers/vfio/vfio.c
@@ -89,16 +89,6 @@ struct vfio_group {
 	struct blocking_notifier_head	notifier;
 };
 
-struct vfio_device {
-	refcount_t			refcount;
-	struct completion		comp;
-	struct device			*dev;
-	const struct vfio_device_ops	*ops;
-	struct vfio_group		*group;
-	struct list_head		group_next;
-	void				*device_data;
-};
-
 #ifdef CONFIG_VFIO_NOIOMMU
 static bool noiommu __read_mostly;
 module_param_named(enable_unsafe_noiommu_mode,
@@ -532,40 +522,6 @@ static struct vfio_group *vfio_group_get_from_dev(struct device *dev)
 /**
  * Device objects - create, release, get, put, search
  */
-static
-struct vfio_device *vfio_group_create_device(struct vfio_group *group,
-					     struct device *dev,
-					     const struct vfio_device_ops *ops,
-					     void *device_data)
-{
-	struct vfio_device *device;
-
-	device = kzalloc(sizeof(*device), GFP_KERNEL);
-	if (!device)
-		return ERR_PTR(-ENOMEM);
-
-	refcount_set(&device->refcount, 1);
-	init_completion(&device->comp);
-	device->dev = dev;
-	device->group = group;
-	device->ops = ops;
-	device->device_data = device_data;
-	dev_set_drvdata(dev, device);
-
-	/*
-	 * No need to get group_lock, caller has group reference, matching put
-	 * is in vfio_del_group_dev()
-	 */
-	vfio_group_get(group);
-
-	mutex_lock(&group->device_lock);
-	list_add(&device->group_next, &group->device_list);
-	group->dev_counter++;
-	mutex_unlock(&group->device_lock);
-
-	return device;
-}
-
 /* Device reference always implies a group reference */
 void vfio_device_put(struct vfio_device *device)
 {
@@ -784,14 +740,23 @@ static int vfio_iommu_group_notifier(struct notifier_block *nb,
 /**
  * VFIO driver API
  */
-int vfio_add_group_dev(struct device *dev,
-		       const struct vfio_device_ops *ops, void *device_data)
+void vfio_init_group_dev(struct vfio_device *device, struct device *dev,
+			 const struct vfio_device_ops *ops, void *device_data)
 {
+	init_completion(&device->comp);
+	device->dev = dev;
+	device->ops = ops;
+	device->device_data = device_data;
+}
+EXPORT_SYMBOL_GPL(vfio_init_group_dev);
+
+int vfio_register_group_dev(struct vfio_device *device)
+{
+	struct vfio_device *existing_device;
 	struct iommu_group *iommu_group;
 	struct vfio_group *group;
-	struct vfio_device *device;
 
-	iommu_group = iommu_group_get(dev);
+	iommu_group = iommu_group_get(device->dev);
 	if (!iommu_group)
 		return -EINVAL;
 
@@ -810,30 +775,51 @@ int vfio_add_group_dev(struct device *dev,
 		iommu_group_put(iommu_group);
 	}
 
-	device = vfio_group_get_device(group, dev);
-	if (device) {
-		dev_WARN(dev, "Device already exists on group %d\n",
+	existing_device = vfio_group_get_device(group, device->dev);
+	if (existing_device) {
+		dev_WARN(device->dev, "Device already exists on group %d\n",
 			 iommu_group_id(iommu_group));
-		vfio_device_put(device);
+		vfio_device_put(existing_device);
 		vfio_group_put(group);
 		return -EBUSY;
 	}
 
-	device = vfio_group_create_device(group, dev, ops, device_data);
-	if (IS_ERR(device)) {
-		vfio_group_put(group);
-		return PTR_ERR(device);
-	}
+	/* Our reference on group is moved to the device */
+	device->group = group;
 
-	/*
-	 * Drop all but the vfio_device reference.  The vfio_device holds
-	 * a reference to the vfio_group, which holds a reference to the
-	 * iommu_group.
-	 */
-	vfio_group_put(group);
+	/* Refcounting can't start until the driver calls register */
+	refcount_set(&device->refcount, 1);
+
+	mutex_lock(&group->device_lock);
+	list_add(&device->group_next, &group->device_list);
+	group->dev_counter++;
+	mutex_unlock(&group->device_lock);
 
 	return 0;
 }
+EXPORT_SYMBOL_GPL(vfio_register_group_dev);
+
+int vfio_add_group_dev(struct device *dev, const struct vfio_device_ops *ops,
+		       void *device_data)
+{
+	struct vfio_device *device;
+	int ret;
+
+	device = kzalloc(sizeof(*device), GFP_KERNEL);
+	if (!device)
+		return -ENOMEM;
+
+	vfio_init_group_dev(device, dev, ops, device_data);
+	ret = vfio_register_group_dev(device);
+	if (ret)
+		goto err_kfree;
+	dev_set_drvdata(dev, device);
+	return 0;
+
+err_kfree:
+	kfree(device);
+	return ret;
+}
 EXPORT_SYMBOL_GPL(vfio_add_group_dev);
 
 /**
@@ -900,11 +886,9 @@ EXPORT_SYMBOL_GPL(vfio_device_data);
 /*
  * Decrement the device reference count and wait for the device to be
  * removed.  Open file descriptors for the device... */
-void *vfio_del_group_dev(struct device *dev)
+void vfio_unregister_group_dev(struct vfio_device *device)
 {
-	struct vfio_device *device = dev_get_drvdata(dev);
 	struct vfio_group *group = device->group;
-	void *device_data = device->device_data;
 	struct vfio_unbound_dev *unbound;
 	unsigned int i = 0;
 	bool interrupted = false;
@@ -921,7 +905,7 @@ void *vfio_del_group_dev(struct device *dev)
 	 */
 	unbound = kzalloc(sizeof(*unbound), GFP_KERNEL);
 	if (unbound) {
-		unbound->dev = dev;
+		unbound->dev = device->dev;
 		mutex_lock(&group->unbound_lock);
 		list_add(&unbound->unbound_next, &group->unbound_list);
 		mutex_unlock(&group->unbound_lock);
@@ -932,7 +916,7 @@ void *vfio_del_group_dev(struct device *dev)
 	rc = try_wait_for_completion(&device->comp);
 	while (rc <= 0) {
 		if (device->ops->request)
-			device->ops->request(device_data, i++);
+			device->ops->request(device->device_data, i++);
 
 		if (interrupted) {
 			rc = wait_for_completion_timeout(&device->comp,
@@ -942,7 +926,7 @@ void *vfio_del_group_dev(struct device *dev)
 				&device->comp, HZ * 10);
 			if (rc < 0) {
 				interrupted = true;
-				dev_warn(dev,
+				dev_warn(device->dev,
 					 "Device is currently in use, task"
 					 " \"%s\" (%d) "
 					 "blocked until device is released",
@@ -975,9 +959,17 @@ void *vfio_del_group_dev(struct device *dev)
 
 	/* Matches the get in vfio_group_create_device() */
 	vfio_group_put(group);
+}
+EXPORT_SYMBOL_GPL(vfio_unregister_group_dev);
+
+void *vfio_del_group_dev(struct device *dev)
+{
+	struct vfio_device *device = dev_get_drvdata(dev);
+	void *device_data = device->device_data;
+
+	vfio_unregister_group_dev(device);
 	dev_set_drvdata(dev, NULL);
 	kfree(device);
-
 	return device_data;
 }
 EXPORT_SYMBOL_GPL(vfio_del_group_dev);
diff --git a/include/linux/vfio.h b/include/linux/vfio.h
index b7e18bde5aa8b3..ad8b579d67d34a 100644
--- a/include/linux/vfio.h
+++ b/include/linux/vfio.h
@@ -15,6 +15,18 @@
 #include <linux/poll.h>
 #include <uapi/linux/vfio.h>
 
+struct vfio_device {
+	struct device *dev;
+	const struct vfio_device_ops *ops;
+	struct vfio_group *group;
+
+	/* Members below here are private, not for driver use */
+	refcount_t refcount;
+	struct completion comp;
+	struct list_head group_next;
+	void *device_data;
+};
+
 /**
  * struct vfio_device_ops - VFIO bus driver device callbacks
  *
@@ -48,11 +60,15 @@ struct vfio_device_ops {
 extern struct iommu_group *vfio_iommu_group_get(struct device *dev);
 extern void vfio_iommu_group_put(struct iommu_group *group, struct device *dev);
 
+void vfio_init_group_dev(struct vfio_device *device, struct device *dev,
+			 const struct vfio_device_ops *ops, void *device_data);
+int vfio_register_group_dev(struct vfio_device *device);
 extern int vfio_add_group_dev(struct device *dev,
 			      const struct vfio_device_ops *ops,
 			      void *device_data);
 
 extern void *vfio_del_group_dev(struct device *dev);
+void vfio_unregister_group_dev(struct vfio_device *device);
 extern struct vfio_device *vfio_device_get_from_dev(struct device *dev);
 extern void vfio_device_put(struct vfio_device *device);
 extern void *vfio_device_data(struct vfio_device *device);

From patchwork Tue Mar  9 21:38:45 2021
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Jason Gunthorpe <jgg@nvidia.com>
X-Patchwork-Id: 12126593
Return-Path: <kvm-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-16.0 required=3.0 tests=BAYES_00,DKIMWL_WL_HIGH,
	DKIM_SIGNED,DKIM_VALID,DKIM_VALID_AU,HEADER_FROM_DIFFERENT_DOMAINS,
	INCLUDES_CR_TRAILER,INCLUDES_PATCH,MAILING_LIST_MULTI,MSGID_FROM_MTA_HEADER,
	SPF_HELO_NONE,SPF_PASS autolearn=ham autolearn_force=no version=3.4.0
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
	by smtp.lore.kernel.org (Postfix) with ESMTP id AA805C43333
	for <kvm@archiver.kernel.org>; Tue,  9 Mar 2021 21:39:45 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by mail.kernel.org (Postfix) with ESMTP id 9716164FD3
	for <kvm@archiver.kernel.org>; Tue,  9 Mar 2021 21:39:45 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S232071AbhCIVjJ (ORCPT <rfc822;kvm@archiver.kernel.org>);
        Tue, 9 Mar 2021 16:39:09 -0500
Received: from mail-bn7nam10on2073.outbound.protection.outlook.com
 ([40.107.92.73]:49607
        "EHLO NAM10-BN7-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S231894AbhCIVi6 (ORCPT <rfc822;kvm@vger.kernel.org>);
        Tue, 9 Mar 2021 16:38:58 -0500
ARC-Seal: i=1; a=rsa-sha256; s=arcselector9901; d=microsoft.com; cv=none;
 b=KlkZyRrfeTD8lYh5D4VIMMoL0RUGgvsFMM9HvHwsRmkfP1nDZonDYv/t+5KxgyphhHlbaX+Gg4BBr9JIm4Ta3H0IQzKO9fQE3h2XVEMKNuR/cAm2eh9pU2uuWivzRuVxk6iiLcLZZ+zs6ORhxBMbCmjSRFQHGGK7qVhXFJkndInG0Ms0Kn4jpIiUmOEJPGjaYmgWh98s6eiZCtqJBQ6tJuz0rF/iuKfH06jsLUXIB6w2oQ0HPtazewisET8v19tLTYfQ08xNiNFcXEfvJ8J0es9pGgjwTgvc1Idrhq5SBVzhfHt+Jtb0a31VRwU6no/mDuFW8uGNBPWC24PyjJzQIQ==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector9901;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=9f9DBzewDDncQNMQrir+ASCLSEiAcXrv9ZjSenurhKY=;
 b=aYfjbeNoluD5LzphoY0To+jzNkrU9i6emfDjfbbFzdlOChKM8U95aATzt2b692ha0m9/M3zrjHaEolbstSe86IoUuiKLBuOwCF84bVHEIb/zl2x/8miCzGrb6yNIKR0ZK4KU9k3k3gnQ1Ani5DHQMogwS0pWvXFstrSi3IO3AZg6MXGSkXw7lm7+4xnHzKFudTYQ18dikVLbma9ZjOd5x9v+ynL4tlUHMVcjnn62ovSQLXOzZaqU+c0OETEIDySO30WFLcefrfKTMfwwXNmRxUlDIxzATEMphFCKKM4lw2GG3rCd0yOaybzK9kEmJLxb1qhonlsi9sT+9BzSDshBfg==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=nvidia.com; dmarc=pass action=none header.from=nvidia.com;
 dkim=pass header.d=nvidia.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=Nvidia.com;
 s=selector2;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=9f9DBzewDDncQNMQrir+ASCLSEiAcXrv9ZjSenurhKY=;
 b=o6tF+q3Ft5MpaVfJkfGNspSc5I1E0/hEflabE3kS+An0K9O9HYoNk1tEPWksK7YIJurUpJ2nsXGHwjeV2wFnubRoeSGf8fyDOZB2+WXkrnYeWcY2abvx1InjaDP9AhH4cG7HLDh9cQUkUpp8zLDTeXQ4Q4aj3OVDNv6n2eHICAZM6Foj0XX4MK+Ur5Np3KJ2BYm/DWfHTsWVAJ9lxOAnUQT/FiCUuwC0EbY9zW57+0lmRHue04dpO62EufoHJrD4CVHNM0QHA/t12/MXs/bvtDymS57odOjKFpP7d6rMfVy7zWLUWv1JwASu348mQ3Zbl9oY6jxvGruftoZtkDA+Cw==
Authentication-Results: redhat.com; dkim=none (message not signed)
 header.d=none;redhat.com; dmarc=none action=none header.from=nvidia.com;
Received: from DM6PR12MB3834.namprd12.prod.outlook.com (2603:10b6:5:14a::12)
 by DM5PR1201MB2489.namprd12.prod.outlook.com (2603:10b6:3:e2::22) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.3912.17; Tue, 9 Mar
 2021 21:38:56 +0000
Received: from DM6PR12MB3834.namprd12.prod.outlook.com
 ([fe80::1c62:7fa3:617b:ab87]) by DM6PR12MB3834.namprd12.prod.outlook.com
 ([fe80::1c62:7fa3:617b:ab87%6]) with mapi id 15.20.3912.027; Tue, 9 Mar 2021
 21:38:56 +0000
From: Jason Gunthorpe <jgg@nvidia.com>
To: Alex Williamson <alex.williamson@redhat.com>,
        Cornelia Huck <cohuck@redhat.com>,
        Eric Auger <eric.auger@redhat.com>, kvm@vger.kernel.org
Cc: "Raj, Ashok" <ashok.raj@intel.com>,
        Dan Williams <dan.j.williams@intel.com>,
        Daniel Vetter <daniel@ffwll.ch>,
        Christoph Hellwig <hch@lst.de>,
        Leon Romanovsky <leonro@nvidia.com>,
        Max Gurtovoy <mgurtovoy@nvidia.com>,
        Tarun Gupta <targupta@nvidia.com>
Subject: [PATCH 03/10] vfio/platform: Use
 vfio_init/register/unregister_group_dev
Date: Tue,  9 Mar 2021 17:38:45 -0400
Message-Id: <3-v1-7355d38b9344+17481-vfio1_jgg@nvidia.com>
In-Reply-To: <0-v1-7355d38b9344+17481-vfio1_jgg@nvidia.com>
References: 
X-Originating-IP: [142.162.115.133]
X-ClientProxiedBy: MN2PR19CA0066.namprd19.prod.outlook.com
 (2603:10b6:208:19b::43) To DM6PR12MB3834.namprd12.prod.outlook.com
 (2603:10b6:5:14a::12)
MIME-Version: 1.0
X-MS-Exchange-MessageSentRepresentingType: 1
Received: from mlx.ziepe.ca (142.162.115.133) by
 MN2PR19CA0066.namprd19.prod.outlook.com (2603:10b6:208:19b::43) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.3912.17 via Frontend
 Transport; Tue, 9 Mar 2021 21:38:55 +0000
Received: from jgg by mlx with local (Exim 4.94)        (envelope-from
 <jgg@nvidia.com>)        id 1lJk44-00AVIj-Ox; Tue, 09 Mar 2021 17:38:52 -0400
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: cf5b29a2-c8a1-4c71-69c7-08d8e343bd47
X-MS-TrafficTypeDiagnostic: DM5PR1201MB2489:
X-MS-Exchange-Transport-Forked: True
X-Microsoft-Antispam-PRVS: 
 <DM5PR1201MB24898B3E8561C3025481F073C2929@DM5PR1201MB2489.namprd12.prod.outlook.com>
X-MS-Oob-TLC-OOBClassifiers: OLM:4941;
X-MS-Exchange-SenderADCheck: 1
X-Microsoft-Antispam: BCL:0;
X-Microsoft-Antispam-Message-Info: 
 u7copqZAHCHitW16XHNwze9DHSvyiB6SLGVtY9TLCJlkGwrrbPJN7J6j5vE1URFwgmniC5dKa9NEvl9i3iqGLXNfT83i5Tf9qSKwtYCq79hYP0w2nI+V96sh+TJo2Ck8ZliMYYFlpNl3MEqJiAF70EnyAh2s6CcCv4RuiITL2yjqFoXh7gKHJ/EEHvTZZ+H0eK192jNQdtQRJ4pFKgNg6u7jL2ZG0VP7fQhqCiAWE9qBjBC9FIREFnGewflOakXUD5NhPUIZiD61MId/5IZnk8dISz0Gv//WwaMVktCHlBsaa8opmGgvtVWdHi9zapZWnMl+cGxRsvsaZBaUd8YDkXSlLejKFYbmHpda1S0LMqQkyBDzWU2qH3N+OKmdVMeMboa7TQ+MNVzY20L7OtK84D/4i0nBcue6PsXD26Gj7r1fuWhujIU7gBflbX3PZH7xxWdSlDjH/M4NCHVciwJZ031CI+eXzZIQpGYA5qv9cO0CPxqIwNhKdpRfX2hOe8OwrQ33nxfWZ/7O9kIaH6vC5AwAq/pOh+Xei+GAxoNqqGDf+8PZ5t1PLDQxdQ7GOR88
X-Forefront-Antispam-Report: 
 CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB3834.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(4636009)(136003)(346002)(376002)(39860400002)(396003)(366004)(6666004)(26005)(36756003)(316002)(5660300002)(4326008)(478600001)(54906003)(110136005)(9746002)(426003)(66556008)(66476007)(2616005)(9786002)(8936002)(86362001)(186003)(2906002)(8676002)(107886003)(83380400001)(66946007)(4216001);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData: 
 Ne+n2Wy71n3TLxaJ1gmSAPffQRe8FMRMItwOxT4x3Bd9xDUSChmPJk5Ou8pcUxlSda9wOUgo4nbuk8FHZOUhMBsKlErdJq5dydg51z6azIkTrX7eyT1vGfR61kfgTFqmi06MSIDdLWDrqDDd3lIbnx0mgK+kIlCLhU7Ky3+v1RBnXzekYxSijtLGrGSOiLclD+R9SkVgZY2D8uin0ta1Ch1XZdNC5PF1hPEaq5W1iQxba6pAaETZnuf4HhKqTM3pYlyTw48HkmUCHqNwOJsGhVuyiYxct3eDPhhqBMhGmlZCIM44heYWYgJqeXcJwtGTzm2vhdvvc27t0c9PnnuhhWAlo/LFJInDAi4OJ+XhsMbSjpNmcDfE2sdOIiBiNlwVYJsRABIjOPY3CcseRP4ur78PPeAw27cmdi75ftSAZzKhecYq5i+kee2f2ZWeUOD7VTq4v1ld0Po5yGcRWTduNZM/AoL2YfXRkNx+cM8t/yId2CQvohPRdWfXCRfs2/NVmbcZG/eYOmzMpBn53yJAzaonf6eS0iiG7mpC6mZKk5P0BLPaa8myCS/Ub0XaDdImTi59wc/03n83U22ZqxLAdNLVjEPz8+E3NTKUWiDBkQYHu+XnNKaA7POuFir30Sc/8K4e7i52W+nbtRh7QzbE5p7/KcMtfZ9u0gzWZDI2kqQIpp8L+cA5FIzJxmZePnaIk/IsSDw1Yq84+eIOoehy6mTpyNL9aZa1BK8Hj8o1qpe3A878BuRs/BP0ph3oFCTA0zSCDmeMJAUePxMT8VUdynaRZhKNR1lgnNj5sI0vsZQqsU/UdmprqTyPhb7MosJYwtAzVoPjh9qO6/sIOyGN7J3dMS4jvx76Qec3QG2AeHx4WkiGsUu0QteNS3Tax0+Dd1+ZEBSFWYe58E3SoGiW7N0uye6wolMIGeDRPnZ7O41dvXc8fdEIdSvIbbAkISWKbM2go7sh8xWHqYEQdRGYHeThlHKPIN/WpXgPC4TaBYQ1LqROCT33IK38sBRZKpCLsm665wvHiN4LVZg73mhEVBUSCTYk/kGuWZZ0h+gWUwqFL/jDwF+WPRLGnP6bLusODwJJQ8weO69F/p0P6/9x6ScZ1G8068vy2neyc7q/ohJKYuUBILv7ETA1Yjuo7AWZot63NQB6dkmOL9FvbeYp1ooSyxcrmeTfClffxOjhn39pV2sZAAfqhtqHEsg+RcTlSGXLwVcK7gQptcsluqDA/8BX7naxVYZcMDwgfce/odhwyh/xqprA8pABAsaM26GvFzSLo6qLXpg/Pya5J8/dzmLXA2RfjlSGRkWOcj33sfHaddAO1MsYMW3x51y7NUmLAi4NLT4fQsmsVx1f4MMdaw==
X-OriginatorOrg: Nvidia.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 cf5b29a2-c8a1-4c71-69c7-08d8e343bd47
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB3834.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 09 Mar 2021 21:38:55.5780
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 43083d15-7273-40c1-b7db-39efd9ccc17a
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: 
 rbJ7fKimuXRuoQcOIo/PAJxyKVJV2C0/NhT3wcNxFiIV9cPsNViYqLWQ2HSUKH7e
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DM5PR1201MB2489
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

platform already allocates a struct vfio_platform_device with exactly
the same lifetime as vfio_device, switch to the new API and embed
vfio_device in vfio_platform_device.

Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
---
 drivers/vfio/platform/vfio_amba.c             |  8 ++++---
 drivers/vfio/platform/vfio_platform.c         | 21 ++++++++---------
 drivers/vfio/platform/vfio_platform_common.c  | 23 +++++++------------
 drivers/vfio/platform/vfio_platform_private.h |  5 ++--
 4 files changed, 26 insertions(+), 31 deletions(-)

diff --git a/drivers/vfio/platform/vfio_amba.c b/drivers/vfio/platform/vfio_amba.c
index 3626c21501017e..f970eb2a999f29 100644
--- a/drivers/vfio/platform/vfio_amba.c
+++ b/drivers/vfio/platform/vfio_amba.c
@@ -66,16 +66,18 @@ static int vfio_amba_probe(struct amba_device *adev, const struct amba_id *id)
 	if (ret) {
 		kfree(vdev->name);
 		kfree(vdev);
+		return ret;
 	}
 
-	return ret;
+	dev_set_drvdata(&adev->dev, vdev);
+	return 0;
 }
 
 static void vfio_amba_remove(struct amba_device *adev)
 {
-	struct vfio_platform_device *vdev =
-		vfio_platform_remove_common(&adev->dev);
+	struct vfio_platform_device *vdev = dev_get_drvdata(&adev->dev);
 
+	vfio_platform_remove_common(vdev);
 	kfree(vdev->name);
 	kfree(vdev);
 }
diff --git a/drivers/vfio/platform/vfio_platform.c b/drivers/vfio/platform/vfio_platform.c
index 9fb6818cea12cb..f7b3f64ecc7f6c 100644
--- a/drivers/vfio/platform/vfio_platform.c
+++ b/drivers/vfio/platform/vfio_platform.c
@@ -54,23 +54,22 @@ static int vfio_platform_probe(struct platform_device *pdev)
 	vdev->reset_required = reset_required;
 
 	ret = vfio_platform_probe_common(vdev, &pdev->dev);
-	if (ret)
+	if (ret) {
 		kfree(vdev);
-
-	return ret;
+		return ret;
+	}
+	dev_set_drvdata(&pdev->dev, vdev);
+	return 0;
 }
 
 static int vfio_platform_remove(struct platform_device *pdev)
 {
-	struct vfio_platform_device *vdev;
-
-	vdev = vfio_platform_remove_common(&pdev->dev);
-	if (vdev) {
-		kfree(vdev);
-		return 0;
-	}
+	struct vfio_platform_device *vdev = dev_get_drvdata(&pdev->dev);
 
-	return -EINVAL;
+	vfio_platform_remove_common(vdev);
+	kfree(vdev->name);
+	kfree(vdev);
+	return 0;
 }
 
 static struct platform_driver vfio_platform_driver = {
diff --git a/drivers/vfio/platform/vfio_platform_common.c b/drivers/vfio/platform/vfio_platform_common.c
index fb4b385191f288..6eb749250ee41c 100644
--- a/drivers/vfio/platform/vfio_platform_common.c
+++ b/drivers/vfio/platform/vfio_platform_common.c
@@ -659,8 +659,7 @@ int vfio_platform_probe_common(struct vfio_platform_device *vdev,
 	struct iommu_group *group;
 	int ret;
 
-	if (!vdev)
-		return -EINVAL;
+	vfio_init_group_dev(&vdev->vdev, dev, &vfio_platform_ops, vdev);
 
 	ret = vfio_platform_acpi_probe(vdev, dev);
 	if (ret)
@@ -685,13 +684,13 @@ int vfio_platform_probe_common(struct vfio_platform_device *vdev,
 		goto put_reset;
 	}
 
-	ret = vfio_add_group_dev(dev, &vfio_platform_ops, vdev);
+	ret = vfio_register_group_dev(&vdev->vdev);
 	if (ret)
 		goto put_iommu;
 
 	mutex_init(&vdev->igate);
 
-	pm_runtime_enable(vdev->device);
+	pm_runtime_enable(dev);
 	return 0;
 
 put_iommu:
@@ -702,19 +701,13 @@ int vfio_platform_probe_common(struct vfio_platform_device *vdev,
 }
 EXPORT_SYMBOL_GPL(vfio_platform_probe_common);
 
-struct vfio_platform_device *vfio_platform_remove_common(struct device *dev)
+void vfio_platform_remove_common(struct vfio_platform_device *vdev)
 {
-	struct vfio_platform_device *vdev;
-
-	vdev = vfio_del_group_dev(dev);
+	vfio_unregister_group_dev(&vdev->vdev);
 
-	if (vdev) {
-		pm_runtime_disable(vdev->device);
-		vfio_platform_put_reset(vdev);
-		vfio_iommu_group_put(dev->iommu_group, dev);
-	}
-
-	return vdev;
+	pm_runtime_disable(vdev->device);
+	vfio_platform_put_reset(vdev);
+	vfio_iommu_group_put(vdev->vdev.dev->iommu_group, vdev->vdev.dev);
 }
 EXPORT_SYMBOL_GPL(vfio_platform_remove_common);
 
diff --git a/drivers/vfio/platform/vfio_platform_private.h b/drivers/vfio/platform/vfio_platform_private.h
index 289089910643ac..a5ba82c8cbc354 100644
--- a/drivers/vfio/platform/vfio_platform_private.h
+++ b/drivers/vfio/platform/vfio_platform_private.h
@@ -9,6 +9,7 @@
 
 #include <linux/types.h>
 #include <linux/interrupt.h>
+#include <linux/vfio.h>
 
 #define VFIO_PLATFORM_OFFSET_SHIFT   40
 #define VFIO_PLATFORM_OFFSET_MASK (((u64)(1) << VFIO_PLATFORM_OFFSET_SHIFT) - 1)
@@ -42,6 +43,7 @@ struct vfio_platform_region {
 };
 
 struct vfio_platform_device {
+	struct vfio_device		vdev;
 	struct vfio_platform_region	*regions;
 	u32				num_regions;
 	struct vfio_platform_irq	*irqs;
@@ -80,8 +82,7 @@ struct vfio_platform_reset_node {
 
 extern int vfio_platform_probe_common(struct vfio_platform_device *vdev,
 				      struct device *dev);
-extern struct vfio_platform_device *vfio_platform_remove_common
-				     (struct device *dev);
+void vfio_platform_remove_common(struct vfio_platform_device *vdev);
 
 extern int vfio_platform_irq_init(struct vfio_platform_device *vdev);
 extern void vfio_platform_irq_cleanup(struct vfio_platform_device *vdev);

From patchwork Tue Mar  9 21:38:46 2021
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Jason Gunthorpe <jgg@nvidia.com>
X-Patchwork-Id: 12126585
Return-Path: <kvm-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-16.0 required=3.0 tests=BAYES_00,DKIMWL_WL_HIGH,
	DKIM_SIGNED,DKIM_VALID,DKIM_VALID_AU,HEADER_FROM_DIFFERENT_DOMAINS,
	INCLUDES_CR_TRAILER,INCLUDES_PATCH,MAILING_LIST_MULTI,MSGID_FROM_MTA_HEADER,
	SPF_HELO_NONE,SPF_PASS autolearn=ham autolearn_force=no version=3.4.0
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
	by smtp.lore.kernel.org (Postfix) with ESMTP id D43BCC4321A
	for <kvm@archiver.kernel.org>; Tue,  9 Mar 2021 21:39:45 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by mail.kernel.org (Postfix) with ESMTP id BE1CE64FCB
	for <kvm@archiver.kernel.org>; Tue,  9 Mar 2021 21:39:45 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S232078AbhCIVjL (ORCPT <rfc822;kvm@archiver.kernel.org>);
        Tue, 9 Mar 2021 16:39:11 -0500
Received: from mail-bn8nam12on2044.outbound.protection.outlook.com
 ([40.107.237.44]:47776
        "EHLO NAM12-BN8-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S232035AbhCIVjA (ORCPT <rfc822;kvm@vger.kernel.org>);
        Tue, 9 Mar 2021 16:39:00 -0500
ARC-Seal: i=1; a=rsa-sha256; s=arcselector9901; d=microsoft.com; cv=none;
 b=R75jtXERmsBMgkOpzopU5m2IAzjUBiUipAgzDRrhScuUkyUO6Ja2+SQEmgD3Vrdd5VzfjpUDNU5QQ8x+040G6UeyT1uoAje69DLmjTQfNRdz91CWNyPdWpGoi3AuZ+BHI/hDhYJoaXjreyAWiZwOnlGBp5IzRy3bWTgDYeR9zil/z0lwjviitGtov8Hu9JPe30MEMk75DnuzeKFt7CPzqNkR+9H0157PVKvG8Wow/MAWS3j+qHT/fNTRHTx9Oiowlk9LFR4BaZsil6BjqVWnH388q9amytaxpDtPUERa5WjXTqvt8paT3hPRRj1c8ZXbpZKJq1NgQlDiqrRDaYm6xA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector9901;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=i/s6BxxhtS5ho34pulIne5hnPitsX2ZJS2IZWfjG7Ek=;
 b=CmwLKZSZhYRJyo/R5QJ7xq5VlQvlLH6H3S24YYWKSpcrUqQDWhhWjAN1wqeR/ICJrd4J0qrp373Xd8v47BAaEvZ5TKyxF3ipE4v8weUVvzgsxV0Er9Z0STJlA65mEFTuWnpfy8S3yiB/F7G/Jh9DfXftYnDuOdqKxZx6+z/cyc2uFxEYlx/Wg71H/6TESAXucjsuZeBXB2OJW3jmMHSpCBGWshT0ecFID/aeSF9KNHAo/RGwcXvfoEwnDY7zQm70FU1Fh9rc3XS51p8fWkPtOl3JVY1l5JGloTY+3jwxPrgJyTF9S33c6npfZLvjJiS3F1MQ+UB/d2E/3O2EEivZeA==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=nvidia.com; dmarc=pass action=none header.from=nvidia.com;
 dkim=pass header.d=nvidia.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=Nvidia.com;
 s=selector2;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=i/s6BxxhtS5ho34pulIne5hnPitsX2ZJS2IZWfjG7Ek=;
 b=lzv81OgRfnu0LSgKJBFPGUA0u0DeXOrB10JO1zdwXYFO+Vx7qd/a2sk8pmMeb5S+ncSwGA4AfmLXb6Gf7QEZHPeidYgTWZJqDmaR6MrAPum1hIu1s0mibBnHTmWug2TvqaNYw9+n+0oFF8D6MpR3TxobDo0CJjKwTsoaQtHSuF1inwtbJIdXSAubYWlsFQi9DffvrR5ka5jzh291+7I/NWCbSbS8PxV2CxnwX3EG8kUGhRMYCBgMf3y2rbS4ur9dqaWQjnKLsOFvaO15u91jcKZ6h4K47OKrGccQ1uplqi3L64cpSKLR0Kr2xjriWMKTUV86AjY4HwQpyDZMrNzsiQ==
Authentication-Results: redhat.com; dkim=none (message not signed)
 header.d=none;redhat.com; dmarc=none action=none header.from=nvidia.com;
Received: from DM6PR12MB3834.namprd12.prod.outlook.com (2603:10b6:5:14a::12)
 by DM5PR12MB1243.namprd12.prod.outlook.com (2603:10b6:3:74::22) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.3912.17; Tue, 9 Mar
 2021 21:38:57 +0000
Received: from DM6PR12MB3834.namprd12.prod.outlook.com
 ([fe80::1c62:7fa3:617b:ab87]) by DM6PR12MB3834.namprd12.prod.outlook.com
 ([fe80::1c62:7fa3:617b:ab87%6]) with mapi id 15.20.3912.027; Tue, 9 Mar 2021
 21:38:57 +0000
From: Jason Gunthorpe <jgg@nvidia.com>
To: Alex Williamson <alex.williamson@redhat.com>,
        Cornelia Huck <cohuck@redhat.com>,
        Diana Craciun <diana.craciun@oss.nxp.com>, kvm@vger.kernel.org
Cc: "Raj, Ashok" <ashok.raj@intel.com>,
        Dan Williams <dan.j.williams@intel.com>,
        Daniel Vetter <daniel@ffwll.ch>,
        Christoph Hellwig <hch@lst.de>,
        Leon Romanovsky <leonro@nvidia.com>,
        Max Gurtovoy <mgurtovoy@nvidia.com>,
        Tarun Gupta <targupta@nvidia.com>
Subject: [PATCH 04/10] vfio/fsl-mc: Use
 vfio_init/register/unregister_group_dev
Date: Tue,  9 Mar 2021 17:38:46 -0400
Message-Id: <4-v1-7355d38b9344+17481-vfio1_jgg@nvidia.com>
In-Reply-To: <0-v1-7355d38b9344+17481-vfio1_jgg@nvidia.com>
References: 
X-Originating-IP: [142.162.115.133]
X-ClientProxiedBy: BL0PR0102CA0055.prod.exchangelabs.com
 (2603:10b6:208:25::32) To DM6PR12MB3834.namprd12.prod.outlook.com
 (2603:10b6:5:14a::12)
MIME-Version: 1.0
X-MS-Exchange-MessageSentRepresentingType: 1
Received: from mlx.ziepe.ca (142.162.115.133) by
 BL0PR0102CA0055.prod.exchangelabs.com (2603:10b6:208:25::32) with Microsoft
 SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.3912.17 via Frontend
 Transport; Tue, 9 Mar 2021 21:38:56 +0000
Received: from jgg by mlx with local (Exim 4.94)        (envelope-from
 <jgg@nvidia.com>)        id 1lJk44-00AVIn-QE; Tue, 09 Mar 2021 17:38:52 -0400
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: 889cf6ab-123b-4599-c2b1-08d8e343be25
X-MS-TrafficTypeDiagnostic: DM5PR12MB1243:
X-MS-Exchange-Transport-Forked: True
X-Microsoft-Antispam-PRVS: 
 <DM5PR12MB12435AA2422E6B54AF8F84A5C2929@DM5PR12MB1243.namprd12.prod.outlook.com>
X-MS-Oob-TLC-OOBClassifiers: OLM:3631;
X-MS-Exchange-SenderADCheck: 1
X-Microsoft-Antispam: BCL:0;
X-Microsoft-Antispam-Message-Info: 
 jVqw4berub8EgAWlNUIupEfrRkDGrJ8zLYQqrVcCqNAW8F4aqaMM/f6nfsZPzytI2nqBk1+Dln578wPYoa5OKSMAbMrAE8TlhDLsx+7LF/eu2+awEjLGXqagbgKf7uQrNa/pEEFH2TdDXawZhxCzv5bCcSQCiYaKj3xQnUD/F095ZYOnqmPeTduKjnYflWUmyxcy6sAAOD20L+mwrsMZSFLt6Br18tcJqWaq5OBmq6Dskb+ApWNPLTXvHsKkNllopZjMKZXWQQiMYcgx0SlZXBT0C1Vgpu4DLSKzUY8X6LiVv1l+1GmTdNjiirki7MY2ofpCRkJg5GqYBW0bRDhsgXFXnATwwMYyHtbdQ2X3PU1xbPk7HuQ/b89h5Jf41g3sDuqheHmFYadKEjmSCa0Mhak35403mj/KHwPPGGRLSxVoNjX1Pg8SCaY4GngEXY2EQPSEtTfEFC05wdDpmu/UM8Rk7sGCj0DC3iR78RpEnrPf3x5ZiyoOBgelp6FgN9NuZcgLs9T/8ABWKADmQsdY1ce2rdseEU15YJraNJi/5tWc2R3p5H4Pw8HS1A4RdkxR
X-Forefront-Antispam-Report: 
 CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB3834.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(4636009)(39860400002)(366004)(396003)(376002)(136003)(346002)(2616005)(83380400001)(426003)(66556008)(9786002)(66476007)(9746002)(107886003)(66946007)(8936002)(186003)(2906002)(86362001)(8676002)(26005)(36756003)(6666004)(54906003)(4326008)(316002)(5660300002)(110136005)(478600001)(4216001);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData: 
 t/aU6M/nIkpdljpKM+xt+L7T/KKlXhfMCaQiDUb2Ttrvc6/6FKiyqRCy93lfaLahdWISQNq99YVytGbWjz2gBrugRg8RCXf3jyU/Zarhxuj7VPR5bTuDVZMf7q//R64CjAC71H03ODOf2cYx8ecpqMZApVEq4gqfRY89+PKf+kIBOeXfv8eULDvpyFnW7TqIt/pggK7egjL0+nRg7RJa+9pWQHpT4/t9p5EeAfNUfv5FG0hyEM/zC7swgYNmTpsGkmnp1fjWmRwpk8tS5G/znHd9nD4qWuYd6uIsZvbgyj7pnZ3Mzbw+OJir9fbYUq0EOp/0ogkfqYVFk58tBbvfxEBBrYlkZ6GpnIeo1aIv034NUgbS4Zq3B6rMjKjrSRbVr7fX1i3prRJYG8DohBBpqKHnk/REwwkNL+3FzvqKrqZq4UXaAcOv68grWSCm24yqigqlsROhMmDFd46DdrquwTO8VLLGTN1KOxeZ6KWYWoykKBb4P8OqxmvaW3P94toBiSPi+EtbrKe2l3E+TyGIi8NJdFjmG0sr2W1Y0zptE8PovZYuf25W/+F1H05VPXRPPiq0Q7V3n3zTDtBpdMGNEnGa3901sJwcBytQ3tShKsAYSPEj6/B3PcBJbejGiyR9B4dfJPG+egoRw7qLmfq0ASDe4baLHXEr0H8L64pDOlk29+xDl2wWzXM0/srH6SKWakfx6HfqK6yIK0bWknGy9eMGiUBrgcIs5DJEQmhxXfNmKMYjN3TifGlUwM1fuQyopmFbu0qNiYc8jiz6rvoES/wpSmc5uGkE3lod0JpHt0UkVnhfB5817yc1xR3zQ2NE9HQObLpiqNPpUIETtVlYBBLjq8mvynZ6Z2zpJcSxrNxdA+Tq/v/OHQYR6MMBUSoea1n3NrvaF+T1283MAmQqvAUrEZ4EffKojExa72ve+ei0DgNS0f/sZ3FCQ0iKb6QngjJ9QLdEpfFmrAUMzL/PWtOs9tQ+KltMBMN3DDsx5lD7tNR+lJtgUdTzJEG1oWbTrxTXxN9j/1arSNmF9ZG0s1ZRStTIAo98efKrmN14Ez2oamEfpkR0iItWjiiyJfKtb9L95fNhCj9u3oUqDXEPHSgMJu6rIwTfUvrqy4e2iFQUJy1JZrN9lcgCQDLfjZKeIoTMMGXoFF25qTPVuzlChD0UTXtg+nbF+YhXvaJjx5xZjEt5bZ6yuwVYRrVaxsS3Z2MQeJwB/kGhHth0RlW1e7uXYOIIHXmu3wEzhx8ECgxQbtLFH1bOfGbOS/4snCd+f9EzF2eFONKfeCLbdSFS9zJYnROJaMM+aopDX6FV/sWqdOQdy5ed+2ppq+7S794HoN1+wHePl8Z7eIp6WR/odg==
X-OriginatorOrg: Nvidia.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 889cf6ab-123b-4599-c2b1-08d8e343be25
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB3834.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 09 Mar 2021 21:38:56.6953
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 43083d15-7273-40c1-b7db-39efd9ccc17a
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: 
 AWiw8y2juHXSivRvtJMfDMcCUgaQ75AIzbGsCjpGJ1bIBXsKaeFqpAJUDCJ9pYWx
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DM5PR12MB1243
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

fsl-mc already allocates a struct vfio_fsl_mc_device with exactly the same
lifetime as vfio_device, switch to the new API and embed vfio_device in
vfio_fsl_mc_device. While here remove the devm usage for the vdev, this
code is clean and doesn't need devm.

Add a note the probe ordering is racy.

Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
---
 drivers/vfio/fsl-mc/vfio_fsl_mc.c         | 30 +++++++++++++----------
 drivers/vfio/fsl-mc/vfio_fsl_mc_private.h |  1 +
 2 files changed, 18 insertions(+), 13 deletions(-)

diff --git a/drivers/vfio/fsl-mc/vfio_fsl_mc.c b/drivers/vfio/fsl-mc/vfio_fsl_mc.c
index f27e25112c4037..ddee6ed20c4523 100644
--- a/drivers/vfio/fsl-mc/vfio_fsl_mc.c
+++ b/drivers/vfio/fsl-mc/vfio_fsl_mc.c
@@ -600,20 +600,28 @@ static int vfio_fsl_mc_probe(struct fsl_mc_device *mc_dev)
 		return -EINVAL;
 	}
 
-	vdev = devm_kzalloc(dev, sizeof(*vdev), GFP_KERNEL);
+	vdev = kzalloc(sizeof(*vdev), GFP_KERNEL);
 	if (!vdev) {
 		ret = -ENOMEM;
 		goto out_group_put;
 	}
 
+	vfio_init_group_dev(&vdev->vdev, dev, &vfio_fsl_mc_ops, vdev);
+	mutex_init(&vdev->igate);
 	vdev->mc_dev = mc_dev;
 
-	ret = vfio_add_group_dev(dev, &vfio_fsl_mc_ops, vdev);
+	ret = vfio_register_group_dev(&vdev->vdev);
 	if (ret) {
 		dev_err(dev, "VFIO_FSL_MC: Failed to add to vfio group\n");
-		goto out_group_put;
+		goto out_kfree;
 	}
+	dev_set_drvdata(dev, vdev);
 
+	/*
+	 * FIXME: vfio_register_group_dev() allows VFIO_GROUP_GET_DEVICE_FD to
+	 * immediately return the device to userspace, but we haven't finished
+	 * setting it up yet.
+	 */
 	ret = vfio_fsl_mc_reflck_attach(vdev);
 	if (ret)
 		goto out_group_dev;
@@ -621,15 +629,14 @@ static int vfio_fsl_mc_probe(struct fsl_mc_device *mc_dev)
 	ret = vfio_fsl_mc_init_device(vdev);
 	if (ret)
 		goto out_reflck;
-
-	mutex_init(&vdev->igate);
-
 	return 0;
 
 out_reflck:
 	vfio_fsl_mc_reflck_put(vdev->reflck);
 out_group_dev:
-	vfio_del_group_dev(dev);
+	vfio_unregister_group_dev(&vdev->vdev);
+out_kfree:
+	kfree(vdev);
 out_group_put:
 	vfio_iommu_group_put(group, dev);
 	return ret;
@@ -637,13 +644,10 @@ static int vfio_fsl_mc_probe(struct fsl_mc_device *mc_dev)
 
 static int vfio_fsl_mc_remove(struct fsl_mc_device *mc_dev)
 {
-	struct vfio_fsl_mc_device *vdev;
 	struct device *dev = &mc_dev->dev;
+	struct vfio_fsl_mc_device *vdev = dev_get_drvdata(dev);
 
-	vdev = vfio_del_group_dev(dev);
-	if (!vdev)
-		return -EINVAL;
-
+	vfio_unregister_group_dev(&vdev->vdev);
 	mutex_destroy(&vdev->igate);
 
 	vfio_fsl_mc_reflck_put(vdev->reflck);
@@ -656,8 +660,8 @@ static int vfio_fsl_mc_remove(struct fsl_mc_device *mc_dev)
 	if (vdev->nb.notifier_call)
 		bus_unregister_notifier(&fsl_mc_bus_type, &vdev->nb);
 
+	kfree(vdev);
 	vfio_iommu_group_put(mc_dev->dev.iommu_group, dev);
-
 	return 0;
 }
 
diff --git a/drivers/vfio/fsl-mc/vfio_fsl_mc_private.h b/drivers/vfio/fsl-mc/vfio_fsl_mc_private.h
index a97ee691ed47ec..89700e00e77d10 100644
--- a/drivers/vfio/fsl-mc/vfio_fsl_mc_private.h
+++ b/drivers/vfio/fsl-mc/vfio_fsl_mc_private.h
@@ -36,6 +36,7 @@ struct vfio_fsl_mc_region {
 };
 
 struct vfio_fsl_mc_device {
+	struct vfio_device		vdev;
 	struct fsl_mc_device		*mc_dev;
 	struct notifier_block        nb;
 	int				refcnt;

From patchwork Tue Mar  9 21:38:47 2021
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Jason Gunthorpe <jgg@nvidia.com>
X-Patchwork-Id: 12126591
Return-Path: <kvm-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-16.0 required=3.0 tests=BAYES_00,DKIMWL_WL_HIGH,
	DKIM_SIGNED,DKIM_VALID,DKIM_VALID_AU,HEADER_FROM_DIFFERENT_DOMAINS,
	INCLUDES_CR_TRAILER,INCLUDES_PATCH,MAILING_LIST_MULTI,MSGID_FROM_MTA_HEADER,
	SPF_HELO_NONE,SPF_PASS autolearn=ham autolearn_force=no version=3.4.0
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 158CDC43603
	for <kvm@archiver.kernel.org>; Tue,  9 Mar 2021 21:39:46 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by mail.kernel.org (Postfix) with ESMTP id 0093D64FC6
	for <kvm@archiver.kernel.org>; Tue,  9 Mar 2021 21:39:45 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S232098AbhCIVjN (ORCPT <rfc822;kvm@archiver.kernel.org>);
        Tue, 9 Mar 2021 16:39:13 -0500
Received: from mail-bn8nam12on2044.outbound.protection.outlook.com
 ([40.107.237.44]:47776
        "EHLO NAM12-BN8-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S232047AbhCIVjB (ORCPT <rfc822;kvm@vger.kernel.org>);
        Tue, 9 Mar 2021 16:39:01 -0500
ARC-Seal: i=1; a=rsa-sha256; s=arcselector9901; d=microsoft.com; cv=none;
 b=Ya/U+euTkTXWUyibPqSE2EXLqtQs8adqnCZQKeC3VWTlbPR02NxqgGQb0onLGQvhvINkxvkyfhhXcqX63TP9zbzvu9vtcvXuXBGqV2PtdT3XTkJQUpIeYPAY/vjEjNRdOCEOVhKTDHsTsQdUOjTYeDpJYC+GTIXuZVBSEYoM7nEyxBriQMrbCuGrOmPoMWFQuIJrVeQvuhL7rx0jw6GIKzytXTg/scbSsDttRMnFQjndYl43RMpAdDwl8H1cw0rCDRoq/WD8gueotVKe+Qpm+1YmRMHAffI86rbe4/zfgxmN9aQArp61WuVh4Cc5/N5f11sXCB0Nh81/VdSJtTUFHw==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector9901;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=QCnuUv9jJ4dH+FM81j7kPIA7zBllj/9wThcH0AZB0OU=;
 b=FrhHV+OmRKvRnSD9JphX25mzxGDA1UuFZ3/6oylHuzrqrV9S2ED5e8q/34nZr3C552TdHjLbTZlFv+g6cBf3lo84qs6oScUgLC8upbQwPsk+JRrI8WiCs2gC9rt0JnMP9h2A3YDwEUiRWtZq7rVEnGxq/YlJcbVhbJeKgYOyAcjComtRGeVCha0/orlvvJC3Txfp+GQc/7LNpydbnAS/nJlg6q3cUi9u7EfBXcHFfGebF6LHcSD79aRAfQXTqoD4k+Hh4/WjgrTmwA4KVN0N13q3BkL3mA+ZiTCgzc7m8zU2v49P0fgW3A0zoGeFoGZj+BEs/KJNhblQ3pCFaSezHg==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=nvidia.com; dmarc=pass action=none header.from=nvidia.com;
 dkim=pass header.d=nvidia.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=Nvidia.com;
 s=selector2;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=QCnuUv9jJ4dH+FM81j7kPIA7zBllj/9wThcH0AZB0OU=;
 b=dB3hK5q1a9ZZjApxUpKaUqQT9B4LCePdAy95ZgfhRH1yPtdUkpztD4G0l2s1qZWde1+VG6wQRziJwEUhkhLj/qKU1gT4LNa4jhz/Tcr9Fpx3dCwnp4H+/4vETPe7Uvm2w0tlFDOZpSKS4NlXRAkpFwfpvTPfMiUw20ia35fTXgLmxX/aNjfqIIsOt34JRFpsFzymPlxplWVg+JyX1QxgasTpSefi2sNRBraRLHPUqgYXWFSRANeA2hpv96hNuGdO/V0im76otNzq4AtXzHO4pK/rqwlQfwa+elRdYzezAM1jAEWC6oh3y2Ps0BqF5MbWJ5brfiMMNTKxqE+WqX0TLQ==
Authentication-Results: redhat.com; dkim=none (message not signed)
 header.d=none;redhat.com; dmarc=none action=none header.from=nvidia.com;
Received: from DM6PR12MB3834.namprd12.prod.outlook.com (2603:10b6:5:14a::12)
 by DM5PR12MB1243.namprd12.prod.outlook.com (2603:10b6:3:74::22) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.3912.17; Tue, 9 Mar
 2021 21:38:59 +0000
Received: from DM6PR12MB3834.namprd12.prod.outlook.com
 ([fe80::1c62:7fa3:617b:ab87]) by DM6PR12MB3834.namprd12.prod.outlook.com
 ([fe80::1c62:7fa3:617b:ab87%6]) with mapi id 15.20.3912.027; Tue, 9 Mar 2021
 21:38:59 +0000
From: Jason Gunthorpe <jgg@nvidia.com>
To: Alex Williamson <alex.williamson@redhat.com>,
        Cornelia Huck <cohuck@redhat.com>, kvm@vger.kernel.org
Cc: "Raj, Ashok" <ashok.raj@intel.com>,
        Dan Williams <dan.j.williams@intel.com>,
        Daniel Vetter <daniel@ffwll.ch>,
        Christoph Hellwig <hch@lst.de>,
        Leon Romanovsky <leonro@nvidia.com>,
        Max Gurtovoy <mgurtovoy@nvidia.com>,
        Tarun Gupta <targupta@nvidia.com>
Subject: [PATCH 05/10] vfio/pci: Use vfio_init/register/unregister_group_dev
Date: Tue,  9 Mar 2021 17:38:47 -0400
Message-Id: <5-v1-7355d38b9344+17481-vfio1_jgg@nvidia.com>
In-Reply-To: <0-v1-7355d38b9344+17481-vfio1_jgg@nvidia.com>
References: 
X-Originating-IP: [142.162.115.133]
X-ClientProxiedBy: MN2PR20CA0020.namprd20.prod.outlook.com
 (2603:10b6:208:e8::33) To DM6PR12MB3834.namprd12.prod.outlook.com
 (2603:10b6:5:14a::12)
MIME-Version: 1.0
X-MS-Exchange-MessageSentRepresentingType: 1
Received: from mlx.ziepe.ca (142.162.115.133) by
 MN2PR20CA0020.namprd20.prod.outlook.com (2603:10b6:208:e8::33) with Microsoft
 SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.3912.17 via Frontend
 Transport; Tue, 9 Mar 2021 21:38:58 +0000
Received: from jgg by mlx with local (Exim 4.94)        (envelope-from
 <jgg@nvidia.com>)        id 1lJk44-00AVIr-RP; Tue, 09 Mar 2021 17:38:52 -0400
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: e066bd65-7600-47b0-3d97-08d8e343bf0f
X-MS-TrafficTypeDiagnostic: DM5PR12MB1243:
X-MS-Exchange-Transport-Forked: True
X-Microsoft-Antispam-PRVS: 
 <DM5PR12MB1243C36B699248C83072D043C2929@DM5PR12MB1243.namprd12.prod.outlook.com>
X-MS-Oob-TLC-OOBClassifiers: OLM:5797;
X-MS-Exchange-SenderADCheck: 1
X-Microsoft-Antispam: BCL:0;
X-Microsoft-Antispam-Message-Info: 
 2r0UYsi9s+CTa3xuYsdrNPGfCKzm1e/N9u2psySgDBCwzEJ/dr/J9MwkiQRvbgUV3/byYXKE1JZHy7JlrFU05nin+meWN0NlNMPZDcEHLT9e8/7mKa9f5/GywdkWH0daPhdncl8YqXuTQdmBj1XUdRcWOYGixlFQKQFhdFP3XcswswY89J0vTqw68TiYvj1xjMWNJkPCXma0DU3HXny24GcA9HRnlpP2JYbRzTvYMBfuHiW/XJesKVg/0nRjLBAnmjhGh2WAG2CQ1kxoOlxcq47TPRU3N3FLvrQyDrjS2dLU5GxUcWamuDg6RzAUVUAd1gsrl39OWbWuKedARlKa6EXWDHkngandYatgoRYqWTMqW+prDbQ5LRGIVAcrIxKIQdiAf2IpqY0E5kttgzJ1yjkdgD0Hq2cZX10AFYzbJPgKh7dGSRdGgROtYPNKUAISAP8X3hWQYASbmtz59LK9vAys3Wu77kh17Mg9vozoBY1v4oJAKLelKWkuS5+iWSBvb9Mm4jeZhLcI8bJvmWMdRCZtdFKx9aVYhMhZK1r8mihfk6uut34maTQuTkeXLlsg
X-Forefront-Antispam-Report: 
 CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB3834.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(4636009)(39860400002)(366004)(396003)(376002)(136003)(346002)(2616005)(83380400001)(426003)(66556008)(9786002)(66476007)(9746002)(107886003)(66946007)(8936002)(186003)(2906002)(86362001)(8676002)(26005)(36756003)(6666004)(54906003)(4326008)(316002)(5660300002)(110136005)(478600001)(4216001);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData: 
 G3b6wXREGRFhmBv9hVoEs3nmc9DVkgOAh51pcV0jYeesoDoofiNRuPDL3HVwSZr/zijgaSS9jYlSfa/r+fNi7NRPBnNOYrukxO09wdv1KvP9aKAzAsO4wcPXjpoNdyJ3STCZQiCdGJNV4OuBrHBwPIR3MjGT09fm2ewZvlNm0IGr4JFzSQ3oT3LWs83p2YkMOLx9y3ivNboi451b8q0EeXGas4WWt2/DQulhjRT1mVNqHxg7JhOYm3TtogxvFNXAErafPO9LfjV2xSbVTRSl3bTQAr6GUOZXhA8UxqLDzb72R7n0l3aCUBCW3yeWV2N6WNGzW6UwEl24TkkoZ4PVnbFyIlW3aLqK4pE2xNEcsvcV6PMDFS0qvJhMmgYFmXWWX1DaoA3pS2EYXLEu9tM19kni1kTEFNaGJwiMeqIRGVcGUXm8SRKMEbH7zBzyyoblXfB6TwcO8Brn4cnZ8FNzw/6rnnaUZRSdCCVOARG0LB876fJP9kpR8IkIvyJb/PO8XASIwdYCxAb+kg15b7jHoNBDWKW5tg2wSjKrEM2ZyY2rwdIyMlCAllpFu9utWNccYu5lD226OlFvywYv9Pqbsb8TfwiC7x4td05iZbWp7RJtGL0FNADue/0Pv/JaznqUobIwlbsYpZuWiYBrB88n4IRoeBUd0+mRh5bHNfXDdMzuhexFxN5mqf0QU88u+cbMFyhbO2S2Udr2RLApwkFQ7Uu1hcqVE7yaZQrVyPK8TShWxsMpv9zmFEefwh/TKlx6aKzuCKYBi6i+WgYZdWlSpGhqhj2XkdJNtky2ZW1WD9l16DCZD+6QkZqYS2gYpUzi1AttaON32gpB1bSTLmzod37miHrceK009ue9ftH604W5J5n7nVcmlrNZhow8ZzVGdBuCaMNU5w7DWdSggVzXgmUV5DVsg9L6/zIJn37jZSYz3clsKY2PrIW+zIu8lcJFLxccAr1wGBCzJXfuCvGSyeFY1LA/MJUoQl7laSQhrSxdZ3cbCz7HEj728Ayv8jhz4xn+u0sVkbRs0CeeczGIWf/XEjkcgTIQVAXLsBtwFjIp8Gm2gw8fL4Oy+1vj4bnbGAzokoHnxlQka2cMuLcLMDVvh5p+Z2b8S7dmUk6QZCZS43HNmVn88gzSuMXkWG6Spvdh3FmAqI7pqQEJziyCrZEe5gK9XLj7SdFzWFisYpQmDKJCFFZtOWJSHZjlwp/7hQRuQCY15XuwL4asF/juTNgN5zwgtEyUQvUanfpCQvVYHO+49ALVQYah6I1bPNQHQaRFCIGlwCdIt/xYN4XfgplRoiP6hxXvdyWC8gxeToCPdaVRGllVSURKuFBmzhbnK6mg9FuIy08KKf/F7y7oIw==
X-OriginatorOrg: Nvidia.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 e066bd65-7600-47b0-3d97-08d8e343bf0f
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB3834.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 09 Mar 2021 21:38:58.4344
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 43083d15-7273-40c1-b7db-39efd9ccc17a
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: 
 vFcxI7nwpuTA6zVm6xJ6fkMMFHLvzrv5cVmhl9daBjjDptMo5SBK8HXW9hCX1j+x
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DM5PR12MB1243
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

pci already allocates a struct vfio_pci_device with exactly the same
lifetime as vfio_device, switch to the new API and embed vfio_device in
vfio_pci_device.

Add a note the probe ordering is racy.

Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
---
 drivers/vfio/pci/vfio_pci.c         | 17 +++++++++++------
 drivers/vfio/pci/vfio_pci_private.h |  1 +
 2 files changed, 12 insertions(+), 6 deletions(-)

diff --git a/drivers/vfio/pci/vfio_pci.c b/drivers/vfio/pci/vfio_pci.c
index 65e7e6b44578c2..fae573c6f86bdf 100644
--- a/drivers/vfio/pci/vfio_pci.c
+++ b/drivers/vfio/pci/vfio_pci.c
@@ -1957,6 +1957,7 @@ static int vfio_pci_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 		goto out_group_put;
 	}
 
+	vfio_init_group_dev(&vdev->vdev, &pdev->dev, &vfio_pci_ops, vdev);
 	vdev->pdev = pdev;
 	vdev->irq_type = VFIO_PCI_NUM_IRQS;
 	mutex_init(&vdev->igate);
@@ -1968,7 +1969,12 @@ static int vfio_pci_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 	INIT_LIST_HEAD(&vdev->vma_list);
 	init_rwsem(&vdev->memory_lock);
 
-	ret = vfio_add_group_dev(&pdev->dev, &vfio_pci_ops, vdev);
+	/*
+	 * FIXME: vfio_register_group_dev() allows VFIO_GROUP_GET_DEVICE_FD to
+	 * immediately return the device to userspace, but we haven't finished
+	 * setting it up yet.
+	 */
+	ret = vfio_register_group_dev(&vdev->vdev);
 	if (ret)
 		goto out_free;
 
@@ -2014,6 +2020,7 @@ static int vfio_pci_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 		vfio_pci_set_power_state(vdev, PCI_D3hot);
 	}
 
+	dev_set_drvdata(&pdev->dev, vdev);
 	return ret;
 
 out_vf_token:
@@ -2021,7 +2028,7 @@ static int vfio_pci_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 out_reflck:
 	vfio_pci_reflck_put(vdev->reflck);
 out_del_group_dev:
-	vfio_del_group_dev(&pdev->dev);
+	vfio_unregister_group_dev(&vdev->vdev);
 out_free:
 	kfree(vdev);
 out_group_put:
@@ -2031,13 +2038,11 @@ static int vfio_pci_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 
 static void vfio_pci_remove(struct pci_dev *pdev)
 {
-	struct vfio_pci_device *vdev;
+	struct vfio_pci_device *vdev = dev_get_drvdata(&pdev->dev);
 
 	pci_disable_sriov(pdev);
 
-	vdev = vfio_del_group_dev(&pdev->dev);
-	if (!vdev)
-		return;
+	vfio_unregister_group_dev(&vdev->vdev);
 
 	if (vdev->vf_token) {
 		WARN_ON(vdev->vf_token->users);
diff --git a/drivers/vfio/pci/vfio_pci_private.h b/drivers/vfio/pci/vfio_pci_private.h
index 9cd1882a05af69..8755a0febd054a 100644
--- a/drivers/vfio/pci/vfio_pci_private.h
+++ b/drivers/vfio/pci/vfio_pci_private.h
@@ -100,6 +100,7 @@ struct vfio_pci_mmap_vma {
 };
 
 struct vfio_pci_device {
+	struct vfio_device	vdev;
 	struct pci_dev		*pdev;
 	void __iomem		*barmap[PCI_STD_NUM_BARS];
 	bool			bar_mmap_supported[PCI_STD_NUM_BARS];

From patchwork Tue Mar  9 21:38:48 2021
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Jason Gunthorpe <jgg@nvidia.com>
X-Patchwork-Id: 12126595
Return-Path: <kvm-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-16.0 required=3.0 tests=BAYES_00,DKIMWL_WL_HIGH,
	DKIM_SIGNED,DKIM_VALID,DKIM_VALID_AU,HEADER_FROM_DIFFERENT_DOMAINS,
	INCLUDES_CR_TRAILER,INCLUDES_PATCH,MAILING_LIST_MULTI,MSGID_FROM_MTA_HEADER,
	SPF_HELO_NONE,SPF_PASS autolearn=ham autolearn_force=no version=3.4.0
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 283D3C43619
	for <kvm@archiver.kernel.org>; Tue,  9 Mar 2021 21:39:46 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by mail.kernel.org (Postfix) with ESMTP id DEE8A64FCA
	for <kvm@archiver.kernel.org>; Tue,  9 Mar 2021 21:39:44 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S232067AbhCIVjJ (ORCPT <rfc822;kvm@archiver.kernel.org>);
        Tue, 9 Mar 2021 16:39:09 -0500
Received: from mail-bn7nam10on2073.outbound.protection.outlook.com
 ([40.107.92.73]:49607
        "EHLO NAM10-BN7-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S232016AbhCIVi6 (ORCPT <rfc822;kvm@vger.kernel.org>);
        Tue, 9 Mar 2021 16:38:58 -0500
ARC-Seal: i=1; a=rsa-sha256; s=arcselector9901; d=microsoft.com; cv=none;
 b=J5j1qiZKHTQaiCznXq/K6PdXcBXThwPx8L1OtrLOEQQT7FVa1ZHta3J4i2z820LIu7xe6V/evBPNyf27Y2BgcnJE/Y2O4CnRoIzCku/Q6nvRPEXoQKBkNjgezfwOqvOVIlwiJtMeV9olvYqiAsvzWUNP8uFiqSs/bRsSmWQQcTtCV+fb2fv4PoPqtFuztn8Ujem3Gyv9sBWs8Ki1Xur51BHIaZEsB36raCd869jBvOWqXxWpgtAf60NPCHjeSZPt8ErpRPmJUU/M9ehLzem+9QyLeUDcnuG2OfgHtI1ORz8rqaqdLMG75pkM46w1FzppMTMsP34zvO4T9zd2mWMzRQ==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector9901;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=LMQA4dWEDJuNUMCZeVI8jPtMdUXGyYBpT4peb2t74qo=;
 b=dgRG6CzFAqIN5WKBYWcLiKjWFSZREI5+LTko8xsFqdjFeZrgtUE2Fh4hp0CuFI66uUA8ucFksJjwxdn+CfWjiTSw0d47ctt3BUhcJmpPTmvT/zQvuxZ7KJKIHUOkYpvLosNye3kFZRBbkxFL/4quqkOXzqnVmhTSe3YqQwZuETFySYPqw4f47bSGLTIdLJwqhmCT0wR0MV9FOpqB03oPUVsug0SZk+vVpkXiuWvm1a/fGdSMNFzi/Y/8dTR/CYzo07MlNDs3XUndgaRPntfbFxvwNl9yi6yPbbc2WhJYFVSfsdelb+MKERNKoksZp0HJTHf9CZzxSFAArywWzjJfkw==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=nvidia.com; dmarc=pass action=none header.from=nvidia.com;
 dkim=pass header.d=nvidia.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=Nvidia.com;
 s=selector2;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=LMQA4dWEDJuNUMCZeVI8jPtMdUXGyYBpT4peb2t74qo=;
 b=sYDJz1MCriFgJ3ciUoyF/DILIZ3Dz7eKHJaAaCSOMq5PBO5Gsw+c7s8478WDgUP53g3gwHuluDYQ3qrMrjJkalqSdnWj+bbC9B0qM4jrb95otg+axrKCB53BijoaPSlVnxUq2avIh3iQjJ/C0OGzLWFi8Nw+6/ys9yUT3b61WObsvihqQFiYNlok2chZgXXWISJjqUXUmorMi62YZzpZuDXi6r2hpYJ+81XwNhTxJCyXj+9o9QGpELkzPtSwVSa4UcEDttQszBqCR44UWXrkrnH/AB5mkGuWJRTsR7OuoV8hW1OZryuTZzxUOnlnMarr9+cRfLl1xqHw+WJBwcQ2NQ==
Authentication-Results: redhat.com; dkim=none (message not signed)
 header.d=none;redhat.com; dmarc=none action=none header.from=nvidia.com;
Received: from DM6PR12MB3834.namprd12.prod.outlook.com (2603:10b6:5:14a::12)
 by DM5PR1201MB2489.namprd12.prod.outlook.com (2603:10b6:3:e2::22) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.3912.17; Tue, 9 Mar
 2021 21:38:56 +0000
Received: from DM6PR12MB3834.namprd12.prod.outlook.com
 ([fe80::1c62:7fa3:617b:ab87]) by DM6PR12MB3834.namprd12.prod.outlook.com
 ([fe80::1c62:7fa3:617b:ab87%6]) with mapi id 15.20.3912.027; Tue, 9 Mar 2021
 21:38:56 +0000
From: Jason Gunthorpe <jgg@nvidia.com>
To: Alex Williamson <alex.williamson@redhat.com>,
        Cornelia Huck <cohuck@redhat.com>, kvm@vger.kernel.org,
        Kirti Wankhede <kwankhede@nvidia.com>
Cc: "Raj, Ashok" <ashok.raj@intel.com>,
        Dan Williams <dan.j.williams@intel.com>,
        Daniel Vetter <daniel@ffwll.ch>,
        Christoph Hellwig <hch@lst.de>,
        Leon Romanovsky <leonro@nvidia.com>,
        Max Gurtovoy <mgurtovoy@nvidia.com>,
        Tarun Gupta <targupta@nvidia.com>
Subject: [PATCH 06/10] vfio/mdev: Use vfio_init/register/unregister_group_dev
Date: Tue,  9 Mar 2021 17:38:48 -0400
Message-Id: <6-v1-7355d38b9344+17481-vfio1_jgg@nvidia.com>
In-Reply-To: <0-v1-7355d38b9344+17481-vfio1_jgg@nvidia.com>
References: 
X-Originating-IP: [142.162.115.133]
X-ClientProxiedBy: MN2PR15CA0029.namprd15.prod.outlook.com
 (2603:10b6:208:1b4::42) To DM6PR12MB3834.namprd12.prod.outlook.com
 (2603:10b6:5:14a::12)
MIME-Version: 1.0
X-MS-Exchange-MessageSentRepresentingType: 1
Received: from mlx.ziepe.ca (142.162.115.133) by
 MN2PR15CA0029.namprd15.prod.outlook.com (2603:10b6:208:1b4::42) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.3912.17 via Frontend
 Transport; Tue, 9 Mar 2021 21:38:55 +0000
Received: from jgg by mlx with local (Exim 4.94)        (envelope-from
 <jgg@nvidia.com>)        id 1lJk44-00AVIv-SW; Tue, 09 Mar 2021 17:38:52 -0400
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: 4905d41d-b13b-4559-7696-08d8e343bd4a
X-MS-TrafficTypeDiagnostic: DM5PR1201MB2489:
X-MS-Exchange-Transport-Forked: True
X-Microsoft-Antispam-PRVS: 
 <DM5PR1201MB24895EE981D43D1A71D4F693C2929@DM5PR1201MB2489.namprd12.prod.outlook.com>
X-MS-Oob-TLC-OOBClassifiers: OLM:3631;
X-MS-Exchange-SenderADCheck: 1
X-Microsoft-Antispam: BCL:0;
X-Microsoft-Antispam-Message-Info: 
 QQYJ2ha2CLIrDAn12eN8WG//yCpo5qQUZOE25I2YtDtnRqGQgV+sCw7M3ycERyCAyA6+ajBwD+7NDMUWYSt0dPaVv8Umy2dcgjOGmyEzEq/NteiOA89laz4WIbVcUb6WeaVz+j4AZNc97s4SmD6qDm6e3I03M6T+32YNAuBIjCXgAGqlAbwwFtSm2SKf6WBLq1XeooADXvJr8U0Vn6J1K/fC35Sk4FdJkWDq+xNzXaQ+SvA1wxRkWDN1xpNuvtSRJprAaM999J5MlZJPLWjgvMSnJR3wVhH6ltfrTVjqyCAgHDK0jUxcr+Wa61iUQ4RY6YiW0J/NVydTmaD9C1SXOfsTioso1UPe9MFZhXXx1+LWLHD5e7YhWqz79vDYynQQ85y1NNGJ91OPPYa0Jg4WW7h/DA8v/TlSRC7Q2i9XDI1QB9aqk1M8fqkjNN5rpM3bBqJkmqpPote2AdXLb8uatSAM8CaWj9vPH3i4tkq52XeK8ANUlWP69YhbZjrXFvh4P84/N7wXHKklRq0q659YvdXa1PIoCXBCvUVC3sgL68u+/yvIwGkIfkrQMnd8bdu5
X-Forefront-Antispam-Report: 
 CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB3834.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(4636009)(136003)(346002)(376002)(39860400002)(396003)(366004)(6666004)(26005)(36756003)(316002)(5660300002)(4326008)(478600001)(54906003)(110136005)(9746002)(426003)(66556008)(66476007)(2616005)(9786002)(6636002)(8936002)(86362001)(186003)(2906002)(8676002)(107886003)(83380400001)(66946007)(4216001);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData: 
 BwoyZZnmeaDlF9ceLZg9vyZbGDCBCoibtCTU9k15NPUTBuhEVz6sP5bgts2bIQMdKq1+6KQMt7Z3wdL6A2JnjqgGEGlTd5TEswtXiDJI+6mYk1taF43MJsYubdK0zf/ZVV+k0QQXxhd7BKvLYXCcSpEYg586pthDlJ7dchT+u157UgJfCcUlAdn3qpdLsZ8HvPwt0ZBAE2gI90b88lNl3IXS9UqGkqbGceGKme6D54E0uIW8i4vO9jpFoExWUqMuD7N7nt55O1KZJFVIKvfd2JfE0/1YLjVXG506o5V2sVLdH13NI8V/wsa0Pli0UM8xnypFY5d9gPoJTy20Z9FmEiSQ1jolrhSwYzFQ3P2XPy/iEZWYB+BZTrTeHozfB2410fiMpF05zwwvREEPS3LoE4UFGFn4DtLOtQ3mqJ0tFjpJoI1V6NsVwpwBZfoiZc7nOxzKrCub+8/ZFxPxR8/AAd5N4Mx2yGDNIhyFYNegoyzkHElE+nfib+9Lbb3xKrofXHXH3gHK2oaI5VujhwcbxT4+pTGfZpYZYQNW9YupHU3P3UVBcIFERqpihxAHD7dWQg/TCQvCab9JVlR/bFMlh72re/PWZgtIkL9XXkS6wxoBiWKyK3KSjhOACNUflqL9RnyYOYlzMAoa7EXivKxqavrCMm/im3TgdxiV18mCh5dKZ6UFxc3rgryHvMGKrE/iKauzF2ENYpzDhVLacZs77MlSLEnYnXKLB4R6Fz2lII8DN91o1MD034glr7QVLMqYAMmMM5OdSzgeRMOX/+hTGSlYSXi1UK7s7Uv/CQ3oDGbh+5SKuPwcDKsiNT8SR7xesd7WxLbMPQlcH0I6udjBR7/j5pwiYoEqaKsmWPvnw1YzdguMkTg9gPoFosKTY1Wiq6KmQT2ym8jXvVqBmvngUJRzpnJahLfmAxAOQt7/6v9YjEpRHiVN7gO53AsoW27Fti4qNabqZh4XeYX/LFW2Q9ylHSe+0aaLXwmWJciludZm+9vxCVlr3mHFdd9of6RTugNvekAqnMsUNj6C6AyOqmOfDXnLsFPAmL9larWOjvjorTPjQSy9FVhUN1m6CwdEJ6mPK6XbaLA0Xqhsvs8lIpjO/f1krVXZ6A4FEL8/pEKddMyKuNmHv/nwGaBG0xzrwUp7F4Ww3kxL/ubfwWb48zgJwQoQfLRgEeN6FKm9ej96dcvDVQdzdlMJrMrsZzFDoBAIPFaPDUJKie4lWZglm+oL6tBzrGduspi4ipnn3/HBGpzXbR3LWo0J9Dz1zrhs7Tq5HwVvD0N+WUzmsUBI0nQfPWNnPZb/Km32UKorYEZUwxqfqHBOGUSxfLBDRjvD6jtB6iOwJZjBOLmZ34ULzw==
X-OriginatorOrg: Nvidia.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 4905d41d-b13b-4559-7696-08d8e343bd4a
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB3834.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 09 Mar 2021 21:38:55.6080
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 43083d15-7273-40c1-b7db-39efd9ccc17a
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: 
 Vd57UgnjEEpvPUOzt/Rx0zrJ0G/2ga109jD2LK9CMcg44HkUsGHPh7MKPkCRTorh
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DM5PR1201MB2489
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

mdev gets little benefit because it doesn't actually do anything, however
it is the last user, so move the code here for now.

Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
---
 drivers/vfio/mdev/vfio_mdev.c | 24 +++++++++++++++++++--
 drivers/vfio/vfio.c           | 39 ++---------------------------------
 include/linux/vfio.h          |  5 -----
 3 files changed, 24 insertions(+), 44 deletions(-)

diff --git a/drivers/vfio/mdev/vfio_mdev.c b/drivers/vfio/mdev/vfio_mdev.c
index b52eea128549ee..4469aaf31b56cb 100644
--- a/drivers/vfio/mdev/vfio_mdev.c
+++ b/drivers/vfio/mdev/vfio_mdev.c
@@ -21,6 +21,10 @@
 #define DRIVER_AUTHOR   "NVIDIA Corporation"
 #define DRIVER_DESC     "VFIO based driver for Mediated device"
 
+struct mdev_vfio_device {
+	struct vfio_device vdev;
+};
+
 static int vfio_mdev_open(void *device_data)
 {
 	struct mdev_device *mdev = device_data;
@@ -124,13 +128,29 @@ static const struct vfio_device_ops vfio_mdev_dev_ops = {
 static int vfio_mdev_probe(struct device *dev)
 {
 	struct mdev_device *mdev = to_mdev_device(dev);
+	struct mdev_vfio_device *mvdev;
+	int ret;
 
-	return vfio_add_group_dev(dev, &vfio_mdev_dev_ops, mdev);
+	mvdev = kzalloc(sizeof(*mvdev), GFP_KERNEL);
+	if (!mvdev)
+		return -ENOMEM;
+
+	vfio_init_group_dev(&mvdev->vdev, &mdev->dev, &vfio_mdev_dev_ops, mdev);
+	ret = vfio_register_group_dev(&mvdev->vdev);
+	if (ret) {
+		kfree(mvdev);
+		return ret;
+	}
+	dev_set_drvdata(&mdev->dev, mvdev);
+	return 0;
 }
 
 static void vfio_mdev_remove(struct device *dev)
 {
-	vfio_del_group_dev(dev);
+	struct mdev_vfio_device *mvdev = dev_get_drvdata(dev);
+
+	vfio_unregister_group_dev(&mvdev->vdev);
+	kfree(mvdev);
 }
 
 static struct mdev_driver vfio_mdev_driver = {
diff --git a/drivers/vfio/vfio.c b/drivers/vfio/vfio.c
index cfa06ae3b9018b..2d6d7cc1d1ebf9 100644
--- a/drivers/vfio/vfio.c
+++ b/drivers/vfio/vfio.c
@@ -99,8 +99,8 @@ MODULE_PARM_DESC(enable_unsafe_noiommu_mode, "Enable UNSAFE, no-IOMMU mode.  Thi
 /*
  * vfio_iommu_group_{get,put} are only intended for VFIO bus driver probe
  * and remove functions, any use cases other than acquiring the first
- * reference for the purpose of calling vfio_add_group_dev() or removing
- * that symmetric reference after vfio_del_group_dev() should use the raw
+ * reference for the purpose of calling vfio_register_group_dev() or removing
+ * that symmetric reference after vfio_unregister_group_dev() should use the raw
  * iommu_group_{get,put} functions.  In particular, vfio_iommu_group_put()
  * removes the device from the dummy group and cannot be nested.
  */
@@ -799,29 +799,6 @@ int vfio_register_group_dev(struct vfio_device *device)
 }
 EXPORT_SYMBOL_GPL(vfio_register_group_dev);
 
-int vfio_add_group_dev(struct device *dev, const struct vfio_device_ops *ops,
-		       void *device_data)
-{
-	struct vfio_device *device;
-	int ret;
-
-	device = kzalloc(sizeof(*device), GFP_KERNEL);
-	if (!device)
-		return -ENOMEM;
-
-	vfio_init_group_dev(device, dev, ops, device_data);
-	ret = vfio_register_group_dev(device);
-	if (ret)
-		goto err_kfree;
-	dev_set_drvdata(dev, device);
-	return 0;
-
-err_kfree:
-	kfree(device);
-	return ret;
-}
-EXPORT_SYMBOL_GPL(vfio_add_group_dev);
-
 /**
  * Get a reference to the vfio_device for a device.  Even if the
  * caller thinks they own the device, they could be racing with a
@@ -962,18 +939,6 @@ void vfio_unregister_group_dev(struct vfio_device *device)
 }
 EXPORT_SYMBOL_GPL(vfio_unregister_group_dev);
 
-void *vfio_del_group_dev(struct device *dev)
-{
-	struct vfio_device *device = dev_get_drvdata(dev);
-	void *device_data = device->device_data;
-
-	vfio_unregister_group_dev(device);
-	dev_set_drvdata(dev, NULL);
-	kfree(device);
-	return device_data;
-}
-EXPORT_SYMBOL_GPL(vfio_del_group_dev);
-
 /**
  * VFIO base fd, /dev/vfio/vfio
  */
diff --git a/include/linux/vfio.h b/include/linux/vfio.h
index ad8b579d67d34a..4995faf51efeae 100644
--- a/include/linux/vfio.h
+++ b/include/linux/vfio.h
@@ -63,11 +63,6 @@ extern void vfio_iommu_group_put(struct iommu_group *group, struct device *dev);
 void vfio_init_group_dev(struct vfio_device *device, struct device *dev,
 			 const struct vfio_device_ops *ops, void *device_data);
 int vfio_register_group_dev(struct vfio_device *device);
-extern int vfio_add_group_dev(struct device *dev,
-			      const struct vfio_device_ops *ops,
-			      void *device_data);
-
-extern void *vfio_del_group_dev(struct device *dev);
 void vfio_unregister_group_dev(struct vfio_device *device);
 extern struct vfio_device *vfio_device_get_from_dev(struct device *dev);
 extern void vfio_device_put(struct vfio_device *device);

From patchwork Tue Mar  9 21:38:49 2021
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Jason Gunthorpe <jgg@nvidia.com>
X-Patchwork-Id: 12126587
Return-Path: <kvm-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-16.0 required=3.0 tests=BAYES_00,DKIMWL_WL_HIGH,
	DKIM_SIGNED,DKIM_VALID,DKIM_VALID_AU,HEADER_FROM_DIFFERENT_DOMAINS,
	INCLUDES_CR_TRAILER,INCLUDES_PATCH,MAILING_LIST_MULTI,MSGID_FROM_MTA_HEADER,
	SPF_HELO_NONE,SPF_PASS autolearn=ham autolearn_force=no version=3.4.0
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
	by smtp.lore.kernel.org (Postfix) with ESMTP id C0CDFC43332
	for <kvm@archiver.kernel.org>; Tue,  9 Mar 2021 21:39:45 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by mail.kernel.org (Postfix) with ESMTP id A7C9464FAD
	for <kvm@archiver.kernel.org>; Tue,  9 Mar 2021 21:39:45 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S232084AbhCIVjL (ORCPT <rfc822;kvm@archiver.kernel.org>);
        Tue, 9 Mar 2021 16:39:11 -0500
Received: from mail-bn8nam12on2044.outbound.protection.outlook.com
 ([40.107.237.44]:47776
        "EHLO NAM12-BN8-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S232043AbhCIVjB (ORCPT <rfc822;kvm@vger.kernel.org>);
        Tue, 9 Mar 2021 16:39:01 -0500
ARC-Seal: i=1; a=rsa-sha256; s=arcselector9901; d=microsoft.com; cv=none;
 b=gf1OATYsYMr8ATpEyOjo6YKeEnqLk4JskbcmAS8KGFHejzQERzIFekUx1lZtVQYxoHdUdVpj+PuvGIzeClBZygVmqqdGnAqDJvQXXLWvju3Sth4NSLBaow2KL6Nz6ai/j4kDjGnvxk3O0y7V7zGWIRYlDsGBlOPP5BGcQAU3wQc0XznmlDSy1aG8v0xqqGmvuwm4ZEbSKN6dXHHAWTZYtll27bjLZjcJh8QX16UM4zZmjxtaDvI2jjuLIOGF1ypfK9Jbc1v/CRBirbfd2I1Bf5smXDMgOkQgbScBWRaUEWxW961GgmPd8ZsL+H34dh7pMFAb7niLqI4nAdr5II0u2Q==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector9901;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=wvO+FoZzOybXRfTmpQKM5Y49hQtyJSNJ/qn+TKPJP3U=;
 b=PQ2MIWZKJWd4oy0SBjo73pMExXDnYcfEgnhXbw++rmtitOGKPgE3mfH8qOpsiif4L8qHEnv8iHIgq5b66rzzOSoGRT7zW44c0u0Xg82WaWz+e/dV0FOeCSR7jU0r0bOWVkNMsBlkhuHWuY8dfPjqXBVn5PxQ+UsBbbUM9LDGjQhgh/ntHaO9YBl3CUVcI29vYEowR8s6s+m0LkLMh4FNIj1H19palQjIS5IvW7EPhcWwo2YWNcW6lKhu0l/m5SBUtdthSFzMMcjVS1mMjq10InVLKfywymdQZSgQiGflrHH5OPcAHbOZmLwa4fsR/NvQh1gss2bqTXOB6L9FDP98hw==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=nvidia.com; dmarc=pass action=none header.from=nvidia.com;
 dkim=pass header.d=nvidia.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=Nvidia.com;
 s=selector2;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=wvO+FoZzOybXRfTmpQKM5Y49hQtyJSNJ/qn+TKPJP3U=;
 b=Ok+uwZfmE8Zn81Gn2I0RG8Q2CaHzzYDDHIv34RlL/rdUi1LW+ELiYLiny+b58FXSx3uurwdnDkakV+tb/wE+/ZA0los9ZkvnsNOJc0plD1o4SgbQ6/G2ryTmImel9uxRIcItZZxoBaxoJftJDd7uXs5rsYMLDqxTtthfz0M7Z4aa0taVJk4DYgpumvoCUPk+c/qMD2n3O/LL5EdL/coxweckTcjl1zlqJCvl9r8O6BA6k6hwNxuAc9dVJtDucdsPdCyagfNHcklNhjwMPbkLGQo2L03Jymp4nzSIdQPxIxv7C2h90FJw11v4+khSR46Y/PA5PP5OaRbOZP6+vJsmbg==
Authentication-Results: redhat.com; dkim=none (message not signed)
 header.d=none;redhat.com; dmarc=none action=none header.from=nvidia.com;
Received: from DM6PR12MB3834.namprd12.prod.outlook.com (2603:10b6:5:14a::12)
 by DM5PR12MB1243.namprd12.prod.outlook.com (2603:10b6:3:74::22) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.3912.17; Tue, 9 Mar
 2021 21:38:58 +0000
Received: from DM6PR12MB3834.namprd12.prod.outlook.com
 ([fe80::1c62:7fa3:617b:ab87]) by DM6PR12MB3834.namprd12.prod.outlook.com
 ([fe80::1c62:7fa3:617b:ab87%6]) with mapi id 15.20.3912.027; Tue, 9 Mar 2021
 21:38:58 +0000
From: Jason Gunthorpe <jgg@nvidia.com>
To: Alex Williamson <alex.williamson@redhat.com>,
        Cornelia Huck <cohuck@redhat.com>, kvm@vger.kernel.org,
        Kirti Wankhede <kwankhede@nvidia.com>
Cc: "Raj, Ashok" <ashok.raj@intel.com>,
        Dan Williams <dan.j.williams@intel.com>,
        Daniel Vetter <daniel@ffwll.ch>,
        Christoph Hellwig <hch@lst.de>,
        Leon Romanovsky <leonro@nvidia.com>,
        Max Gurtovoy <mgurtovoy@nvidia.com>,
        Tarun Gupta <targupta@nvidia.com>
Subject: [PATCH 07/10] vfio/mdev: Make to_mdev_device() into a static inline
Date: Tue,  9 Mar 2021 17:38:49 -0400
Message-Id: <7-v1-7355d38b9344+17481-vfio1_jgg@nvidia.com>
In-Reply-To: <0-v1-7355d38b9344+17481-vfio1_jgg@nvidia.com>
References: 
X-Originating-IP: [142.162.115.133]
X-ClientProxiedBy: MN2PR19CA0062.namprd19.prod.outlook.com
 (2603:10b6:208:19b::39) To DM6PR12MB3834.namprd12.prod.outlook.com
 (2603:10b6:5:14a::12)
MIME-Version: 1.0
X-MS-Exchange-MessageSentRepresentingType: 1
Received: from mlx.ziepe.ca (142.162.115.133) by
 MN2PR19CA0062.namprd19.prod.outlook.com (2603:10b6:208:19b::39) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.3912.17 via Frontend
 Transport; Tue, 9 Mar 2021 21:38:56 +0000
Received: from jgg by mlx with local (Exim 4.94)        (envelope-from
 <jgg@nvidia.com>)        id 1lJk44-00AVJ2-Tc; Tue, 09 Mar 2021 17:38:52 -0400
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: 994d12cc-88ae-4e27-ab0f-08d8e343be41
X-MS-TrafficTypeDiagnostic: DM5PR12MB1243:
X-MS-Exchange-Transport-Forked: True
X-Microsoft-Antispam-PRVS: 
 <DM5PR12MB1243A41399C9A7013C706456C2929@DM5PR12MB1243.namprd12.prod.outlook.com>
X-MS-Oob-TLC-OOBClassifiers: OLM:4125;
X-MS-Exchange-SenderADCheck: 1
X-Microsoft-Antispam: BCL:0;
X-Microsoft-Antispam-Message-Info: 
 EwbnYQx0aECaQwkfsCPwiW2VD2VAEdh4jNbu6AdpYufsRLYELGUk0gRjZpEu3vOBoGzNBCfzYIjgbs3uocm6mQMPx8ddpmqF1nFzEl+87IMow7c/58CUIEdi08SfnV98wglgLH8VUoL+HEs3cUgk9mFBQ5tVEVT7Vp0YRSRpMbTTrNYlBBkQBdJVbgTZ8fqXje+OsWoVLgYwJnilyQmLUe0JN7iNv5p3kMBZ2rPCv5HsgtfyOkIAHQ8AWC/ECH+T/nmWSHQKZaTzJflrgImnkCqqOXmze4Pe/VbG5tlF0/k1v7J//jgLCq7Vf3xiqHcnh7K1WaM4NPTIP5dvlXrzCc6xitr9wvbsnPPnmeqBvAxXpgl3ncWTjXYvJepYiodxkEiqJqk1UkMFg388hyzJyMMY/ZM+orQUMgHSkkq2QkhA40EmrLg27+KKBhJwMuykWDubQFSG9G4VkwtXUz8m3J4OvZHZCchzpSddz4Vq1ILf1GY+VnfKtGBKMoX94fVHmNlCnbpzN7GWbX/rIQyV8mF/lz4kEY7E+TEbtfoy27F9/PtrFrMeqdk6bPlMjyth
X-Forefront-Antispam-Report: 
 CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB3834.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(4636009)(39860400002)(366004)(396003)(376002)(136003)(346002)(2616005)(83380400001)(426003)(66556008)(9786002)(66476007)(9746002)(107886003)(4744005)(66946007)(6636002)(8936002)(186003)(2906002)(86362001)(8676002)(26005)(36756003)(6666004)(54906003)(4326008)(316002)(5660300002)(110136005)(478600001)(4216001);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData: 
 h+9qe4zeIHPKhhXd8jFi6akrI79sxd7LOrc19Ef52NRxCNEUOUXg3EavKoQjsHr0SkbOMADbelANnfXN23SMbXEEmQcPFFoWIwY8UyRg3tZnrGSJMi3skx9O4226PbQJ7IeAxm573eaSt2dp9ksOzXQ4pw79fdDvbTWvqaeRMlGDiK+36S4cark4oQ1yHOgpTdbchsj3FGljKsHwn7XM+5hatZeXoWXnJ0zn+xxYtuRNqHiiFik2FSu3I+iQ2+D4i8wwyERXDpbMV9zNhjWNJUNNEjPiNlhscLx8A5QmGpwryeDdI68ZBCu8aJjVdbDlgUaNx3n0+HyuJvO7oZ7hYUsVeR+qX5h/UXy4o+e3d0/b9evLJfhaadnV9izVl+/bv4Qp1OXoDKNTtPFHSUJ4mTzBnq5y5TLYxVfnVZTDmyJrAI9IUcXUIzF3542ZAgBpPBYQ0LmzKyv/LVPMDntdZv+XCIbw+6aLQSyE54Xd7LnUzu3+N64/A7mIuLA+JN+h+Rqulkg3f2TkgSGmyblpU2hM5OKyiXECmYcdOkm+q5Aym2QXiWMJRfSWRSbR+6lQYqeMJ6WQdGXQ82PSTrrrgQSCrye91SEj8KcfHZPf0hxB5G7ah+IeVpgnb1YdWYSZFX70LRUpBro87jmGtMpmm3DKGB0E7XXGR+Q6JiUPSIoGd7OFzUATuUvvbdGpvRySMO2xl6C6NbMaXgBjbCEPtzBV6DWH4peEEKYcSEtObg2MQOLI1gXIZYBqlTrGy2IU3/ssKvKn7b9V/vgSGrrTiJ11XHxqmDYD9LfAIHvaBvBOUHOcbuhKTE5iAtTm3ll7lLT0BugCzNp+VkEgqWHThRMSoXUtbIzgIq4URiFxQnq35jEd6pwCFSXLOp/eBYSpUxS9Yd0XeHrMSTKBNgUweyMbWgHNUcZFUSfFlZq0QiyskMQNjgp4wsBRNt+QGLMMudaGtRQBGDMMRdLaPDlzy0Wxxx9ULZ0O1fvUhfqB6D91CrYpAmJA7NBz+0D1okcr3avof3q89iBRr+6SJ2r+emCG5fYnOeJMdTT0J001JrIXCF967qqV/2DGa6uVbK4/smfLYg/AaEF8x7TOo62dFvCVTOXeVmRmF2+ZJJPgpE6WYSAWUlyBfadHe5cdL9gJwq+zpu+sq4vWYXUWMWZ9TqdlGmVHkru28FGfkx9Ss33qsZKDXAF1twmQcbFJo943x/vMxerjbyPjFBDLNd9b3rcTErQx80KM6ettR6TK6FrhvmuK8gYjcMMr3xCIfrEzZbfdSJLq7/LtPkJgSpqS7PEcOE9P7uwaeS6rMbemlvvuxxL3nbJ2c7GitRzk8mQ4MqD4D1CW6PcTCX7um3no5g==
X-OriginatorOrg: Nvidia.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 994d12cc-88ae-4e27-ab0f-08d8e343be41
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB3834.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 09 Mar 2021 21:38:57.0252
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 43083d15-7273-40c1-b7db-39efd9ccc17a
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: 
 6Pw9jdcNLp6KHRFyH0aOH+putVOOzR2rn2rerjxLf9pYfwjs6c3/loOY61GkdDie
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DM5PR12MB1243
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

The macro wrongly uses 'dev' as both the macro argument and the member
name, which means it fails compilation if any caller uses a word other
than 'dev' as the single argument. Fix this defect by making it into
proper static inline, which is more clear and typesafe anyhow.

Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
---
 drivers/vfio/mdev/mdev_private.h | 5 ++++-
 1 file changed, 4 insertions(+), 1 deletion(-)

diff --git a/drivers/vfio/mdev/mdev_private.h b/drivers/vfio/mdev/mdev_private.h
index 7d922950caaf3c..74c2e541146999 100644
--- a/drivers/vfio/mdev/mdev_private.h
+++ b/drivers/vfio/mdev/mdev_private.h
@@ -35,7 +35,10 @@ struct mdev_device {
 	bool active;
 };
 
-#define to_mdev_device(dev)	container_of(dev, struct mdev_device, dev)
+static inline struct mdev_device *to_mdev_device(struct device *dev)
+{
+	return container_of(dev, struct mdev_device, dev);
+}
 #define dev_is_mdev(d)		((d)->bus == &mdev_bus_type)
 
 struct mdev_type {

From patchwork Tue Mar  9 21:38:50 2021
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Jason Gunthorpe <jgg@nvidia.com>
X-Patchwork-Id: 12126589
Return-Path: <kvm-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-16.0 required=3.0 tests=BAYES_00,DKIMWL_WL_HIGH,
	DKIM_SIGNED,DKIM_VALID,DKIM_VALID_AU,HEADER_FROM_DIFFERENT_DOMAINS,
	INCLUDES_CR_TRAILER,INCLUDES_PATCH,MAILING_LIST_MULTI,MSGID_FROM_MTA_HEADER,
	SPF_HELO_NONE,SPF_PASS autolearn=unavailable autolearn_force=no version=3.4.0
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
	by smtp.lore.kernel.org (Postfix) with ESMTP id E3F02C432C3
	for <kvm@archiver.kernel.org>; Tue,  9 Mar 2021 21:39:45 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by mail.kernel.org (Postfix) with ESMTP id CEAC864FC6
	for <kvm@archiver.kernel.org>; Tue,  9 Mar 2021 21:39:45 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S232095AbhCIVjM (ORCPT <rfc822;kvm@archiver.kernel.org>);
        Tue, 9 Mar 2021 16:39:12 -0500
Received: from mail-bn8nam12on2044.outbound.protection.outlook.com
 ([40.107.237.44]:47776
        "EHLO NAM12-BN8-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S232048AbhCIVjC (ORCPT <rfc822;kvm@vger.kernel.org>);
        Tue, 9 Mar 2021 16:39:02 -0500
ARC-Seal: i=1; a=rsa-sha256; s=arcselector9901; d=microsoft.com; cv=none;
 b=lEuWKSHMqJ2+bW/n9B2M5R7aOlL/5oEuPr3XU2ib28clHJrSyRYrfgT82TKpukCqGRYYqFuzBXPqACXzpehk1fJZwKK0yGg+s6+1jvlN4KnMUHoFwUyRBBa1dtJK8YvRkCFDBnMHe/5OhgOPWT2Lppzip8HZJWAR2kURGoj1zxuVlbKHJ/acdZeJhsYBWmyOTQfnh/EItM4eC4xbFt5wQWx+9eKnBJc5SfPCIMvtjvJhl00lQGzClXQ7yntvETFTn9gmRMrm7/1CjwYrBa/CzhPSCg/6Ho+6VxwRFHkVSwpSPXzDL8sL6uqZ4KUfnQBwIqMiuYD/82W0iMA1x/Kt4A==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector9901;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=Ja4Rw1nKMBPlQ64FJK7oT8v0G7KO90hHEc8D88K0Pvg=;
 b=NY2q+p/X/3WE4mgmcrFllhqHl4hbS1HHdbVxlJRliP8Ts0kjdKyIfDvQAimKvLnRLTCtYX651HplHZ6Ke/L8p0mUa9uDDHnkFD3mSkSK5lBsWRzEGQ5N+QKrcumDe+5QpHw5bid5UHqHUZxujf9P4yO9xj7o0wQcTa4KeFvQqZUYL361qC2xxLgHYIPpMhVDmQDcnL85+2DfW/y/AU3oyZB+kbTSX8Y08cR/PYs/vVfnmHDFi0oRDQaC409Bn5YpWo2INRrzKji5x7SdFxiSZrS/29tDFMiLSu59J+0RSPCjBAX3PM0UpGC0HQ9YUg64krTLNFeuv406YwoQp6rutw==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=nvidia.com; dmarc=pass action=none header.from=nvidia.com;
 dkim=pass header.d=nvidia.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=Nvidia.com;
 s=selector2;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=Ja4Rw1nKMBPlQ64FJK7oT8v0G7KO90hHEc8D88K0Pvg=;
 b=e3m6fIFEzVNVkcI67ipFzXmJd2bw2GUXcaXukX+H3UQICwY+LoXXC9sjM/knEDhTtwyZ5MFTQnoozs610tVeR5G44pKSMEyYv+9CS0iyEaAtmcsGBPWqB+kJrqmwIf9Utk+nhq50LgSmUO5ogKrLI7UWB4vGbeclqqp8VbUE1cxYYJiDZ4P2YKQAohIkrHnGoHmlDC6PPB+4i58UF+wM8sLfuNDhs0ZmPYU9GpjnEh2oNNZeZA6kI1+aXrvAMRprzq15Rne4vB9FzB5q2HCvv47NM3f8nVAjc1O9o2gbJdi5WMBfULQd2i3OzpCOIykAGQOQXsdiwejXqE98tzBT0A==
Authentication-Results: redhat.com; dkim=none (message not signed)
 header.d=none;redhat.com; dmarc=none action=none header.from=nvidia.com;
Received: from DM6PR12MB3834.namprd12.prod.outlook.com (2603:10b6:5:14a::12)
 by DM5PR12MB1243.namprd12.prod.outlook.com (2603:10b6:3:74::22) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.3912.17; Tue, 9 Mar
 2021 21:38:58 +0000
Received: from DM6PR12MB3834.namprd12.prod.outlook.com
 ([fe80::1c62:7fa3:617b:ab87]) by DM6PR12MB3834.namprd12.prod.outlook.com
 ([fe80::1c62:7fa3:617b:ab87%6]) with mapi id 15.20.3912.027; Tue, 9 Mar 2021
 21:38:58 +0000
From: Jason Gunthorpe <jgg@nvidia.com>
To: Alex Williamson <alex.williamson@redhat.com>,
        Cornelia Huck <cohuck@redhat.com>,
        Jonathan Corbet <corbet@lwn.net>,
        Diana Craciun <diana.craciun@oss.nxp.com>,
        Eric Auger <eric.auger@redhat.com>, kvm@vger.kernel.org,
        Kirti Wankhede <kwankhede@nvidia.com>,
        linux-doc@vger.kernel.org
Cc: "Raj, Ashok" <ashok.raj@intel.com>,
        Dan Williams <dan.j.williams@intel.com>,
        Daniel Vetter <daniel@ffwll.ch>,
        Christoph Hellwig <hch@lst.de>,
        Leon Romanovsky <leonro@nvidia.com>,
        Max Gurtovoy <mgurtovoy@nvidia.com>,
        Tarun Gupta <targupta@nvidia.com>
Subject: [PATCH 08/10] vfio: Make vfio_device_ops pass a 'struct vfio_device
 *' instead of 'void *'
Date: Tue,  9 Mar 2021 17:38:50 -0400
Message-Id: <8-v1-7355d38b9344+17481-vfio1_jgg@nvidia.com>
In-Reply-To: <0-v1-7355d38b9344+17481-vfio1_jgg@nvidia.com>
References: 
X-Originating-IP: [142.162.115.133]
X-ClientProxiedBy: MN2PR20CA0030.namprd20.prod.outlook.com
 (2603:10b6:208:e8::43) To DM6PR12MB3834.namprd12.prod.outlook.com
 (2603:10b6:5:14a::12)
MIME-Version: 1.0
X-MS-Exchange-MessageSentRepresentingType: 1
Received: from mlx.ziepe.ca (142.162.115.133) by
 MN2PR20CA0030.namprd20.prod.outlook.com (2603:10b6:208:e8::43) with Microsoft
 SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.3912.17 via Frontend
 Transport; Tue, 9 Mar 2021 21:38:57 +0000
Received: from jgg by mlx with local (Exim 4.94)        (envelope-from
 <jgg@nvidia.com>)        id 1lJk44-00AVJ7-UT; Tue, 09 Mar 2021 17:38:52 -0400
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: 82523477-3a85-4d2a-8480-08d8e343bef8
X-MS-TrafficTypeDiagnostic: DM5PR12MB1243:
X-MS-Exchange-Transport-Forked: True
X-Microsoft-Antispam-PRVS: 
 <DM5PR12MB12434ADE22873CC51F80E0A3C2929@DM5PR12MB1243.namprd12.prod.outlook.com>
X-MS-Oob-TLC-OOBClassifiers: OLM:8882;
X-MS-Exchange-SenderADCheck: 1
X-Microsoft-Antispam: BCL:0;
X-Microsoft-Antispam-Message-Info: 
 d45jB1HFL4/20eNDiSb51KupqVIXKaUoQ2e4iWRt18aWsQ+L7f8VtEPcVC3ZIDQD+yXD3WHpxAmZeza8HP2W0tmBcxPZ1xNOc+qEKSoyBo9LpiOTrEh1rtPEdwd9WxoN1Jh5EhzVkNsUhPMyorAURSpzUWHF0NnMo64UGSxXhX5y2gZfuA1ZPhKNFRYq/0vcsNr1BgPmyydBjGYmBRfq9a/CdQ4sGVtbxVa7WnaWt6EylP1LAoun5gxXZZWkpbG9Z6pckB2iMDYDE3JT5PLcTG7bx+Oacr8NoPIeZjSx+farb5k418C3ZcZhzYzVDzSq3fP46kvdEpmXbWI3wD1VaD+FEndd4lxOWBA5hz7hsTxlS4eER8NrUI3nLwPGAulDt1a5O6bGA9v1PXFoBVXzmDjL3nxPiEPAdS7H//6UYZv7PFGXL+3VboDdaBvZe1wsFUPllFnUZ5EKzVBI4rvHfyGRYxVyzLBI48wRCW4LywThw093WTSYijQ3g6S8BNhvUWdMOW8adXDRZy02rZE+B5Yrb03ei95DL5j2vpfLNklqD6IkQvV+1p694zS7YWHS
X-Forefront-Antispam-Report: 
 CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB3834.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(4636009)(39860400002)(366004)(396003)(376002)(136003)(346002)(2616005)(83380400001)(426003)(66556008)(9786002)(66476007)(9746002)(107886003)(66946007)(30864003)(8936002)(186003)(2906002)(86362001)(8676002)(26005)(36756003)(7416002)(54906003)(4326008)(316002)(5660300002)(110136005)(478600001)(4216001);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData: 
 wLlbvj/DNcOje4YqE4fO4n8+Bgy1FuEM5aEx5aWvbzimv2Jjxb157do5WYWq0nn1TgCqGMoLTGZ57NzusGjb9Ul7a43+5daw3k/iAwQ+tRxNHgWTdc0bq8YGbzs5sKjfqtnrO4VguX8LQAgf5JlJx2Z3SX4SkkygRZbZb1DnDQmsrJfjfTZIorvIMZGwqMvILBFDp0F80+Y2SsH83q3JInc0DMlx3hjWPUnSUuyriZenzco3C7IPLNRf7xgvUM2lM+HpSt1Mgf0kVJ5KStWZP7hirlkeiFnb0No/KYmISRiH0tFrIW0p1V5oXoe+gQjW49jhcaMU/WnJuezSWZXWmz8k42+y2UV5f63WTZhUC7hmreMpRjgCwNbSATRytcXDU+d/QSsUTXYJEIdTYcQLQK5niLtyTKq0OVkufG7r1eJ2hMsHVqd2z0B1SAAQ8bWr+7cvjBx3H8R17WNMA5GfUh23fWCFJD1m+SQzUSyaM5uXG8dYSc8I4CKdHj+fj0Dtzqh5lt6cHfYXDRvnHJe8Cde7X5e8QrSQJ6yc9KjRwWozq3wOIpVU7WJWu6IyoaVmH7BHyjbTKINd+XG9HpRvJALJ5Mdh+eWimWzaTBL4vg1f/GTH59vQlGZpIXx7z3ku+6umrwVlhdyjM+LFNKhZ7ZCu2oumeH+oHwA7HHXpAB4exONw0fyAc8+WA/nf15cuozqSZcdl+cnMyKrJdQKK5rbBzp1van/PL1/DXU1NklGOjaJ7hdAiZU3akUS7jfrdqpASuuCWg468/9yL7XJRO0T7LVlvHYA2pYtufJsozGuvo3K9h9x0bMT1bYTJBoCG9NlpRaKUTM+HuNkulSSc6AF/VyHnbqG1ZcxfgfHSaqvPfSsieAofEysNbZMrhy8YJ5dPGMiXzCCNBcJMF07w9sdqKulNIgjHOm2YsJvlJqKa0jYASydhuuKDtMJUm2RXQ/rGgIG1Q96aNbIc563IRg6iGRsHH7j3hyqs0zCoQcwiIfnPmTZzDtb5TMqQlSulW30MlKaMcIFPh0BuVYfqx7Ug51CuZvrub/mMpf5OyjMz9NR1zfhCfUDofITmt+ed4p9S9fTFBbragL0uVH3m0lQpaSyZ0BBQAzcZ4nMPYsSY61FfEhyw9Wmi3C83LGJAtHMuFkQ738Dqcf3q3USmgQr9GwWbJO7H/B94/w+18ix8toXw7Xb3U7HTYO6opU50lvbGDFMobd4hC49AnUcYRVFZMo+bHy3jnePk+NMXLRmUs3PN+HEg9c/2k9v+xjbxSpUUJR+awBa1nEzuLVAKYHtQtSnWfWrYBoAKWCPKIMkHDzo+ypbTrc8wBCt6KFIlSqdMXql/o7NR9uNaW4CzUQ==
X-OriginatorOrg: Nvidia.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 82523477-3a85-4d2a-8480-08d8e343bef8
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB3834.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 09 Mar 2021 21:38:58.4234
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 43083d15-7273-40c1-b7db-39efd9ccc17a
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: 
 1Thpu2J+bJBa1Ce6C7L+ncSzbDQaITCVU/J4VGtYGxvFLDJoJfupZcHp1OuTCkX5
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DM5PR12MB1243
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

This is the standard kernel pattern, the ops associated with a struct get
the struct pointer in for typesafety. The expected design is to use
container_of to cleanly go from the subsystem level type to the driver
level type without having any type erasure in a void *.

Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
---
 Documentation/driver-api/vfio.rst            | 18 ++++----
 drivers/vfio/fsl-mc/vfio_fsl_mc.c            | 36 +++++++++------
 drivers/vfio/mdev/vfio_mdev.c                | 33 +++++++-------
 drivers/vfio/pci/vfio_pci.c                  | 47 ++++++++++++--------
 drivers/vfio/platform/vfio_platform_common.c | 33 ++++++++------
 drivers/vfio/vfio.c                          | 20 ++++-----
 include/linux/vfio.h                         | 16 +++----
 7 files changed, 117 insertions(+), 86 deletions(-)

diff --git a/Documentation/driver-api/vfio.rst b/Documentation/driver-api/vfio.rst
index d3a02300913a7f..3337f337293a32 100644
--- a/Documentation/driver-api/vfio.rst
+++ b/Documentation/driver-api/vfio.rst
@@ -269,20 +269,22 @@ ready before calling it. The driver provides an ops structure for callbacks
 similar to a file operations structure::
 
 	struct vfio_device_ops {
-		int	(*open)(void *device_data);
-		void	(*release)(void *device_data);
-		ssize_t	(*read)(void *device_data, char __user *buf,
+		int	(*open)(struct vfio_device *vdev);
+		void	(*release)(struct vfio_device *vdev);
+		ssize_t	(*read)(struct vfio_device *vdev, char __user *buf,
 				size_t count, loff_t *ppos);
-		ssize_t	(*write)(void *device_data, const char __user *buf,
+		ssize_t	(*write)(struct vfio_device *vdev,
+				 const char __user *buf,
 				 size_t size, loff_t *ppos);
-		long	(*ioctl)(void *device_data, unsigned int cmd,
+		long	(*ioctl)(struct vfio_device *vdev, unsigned int cmd,
 				 unsigned long arg);
-		int	(*mmap)(void *device_data, struct vm_area_struct *vma);
+		int	(*mmap)(struct vfio_device *vdev,
+				struct vm_area_struct *vma);
 	};
 
-Each function is passed the device_data that was originally registered
+Each function is passed the vdev that was originally registered
 in the vfio_register_group_dev() call above.  This allows the bus driver
-an easy place to store its opaque, private data.  The open/release
+to obtain its private data using container_of().  The open/release
 callbacks are issued when a new file descriptor is created for a
 device (via VFIO_GROUP_GET_DEVICE_FD).  The ioctl interface provides
 a direct pass through for VFIO_DEVICE_* ioctls.  The read/write/mmap
diff --git a/drivers/vfio/fsl-mc/vfio_fsl_mc.c b/drivers/vfio/fsl-mc/vfio_fsl_mc.c
index ddee6ed20c4523..74a5de1b791934 100644
--- a/drivers/vfio/fsl-mc/vfio_fsl_mc.c
+++ b/drivers/vfio/fsl-mc/vfio_fsl_mc.c
@@ -135,9 +135,10 @@ static void vfio_fsl_mc_regions_cleanup(struct vfio_fsl_mc_device *vdev)
 	kfree(vdev->regions);
 }
 
-static int vfio_fsl_mc_open(void *device_data)
+static int vfio_fsl_mc_open(struct vfio_device *core_vdev)
 {
-	struct vfio_fsl_mc_device *vdev = device_data;
+	struct vfio_fsl_mc_device *vdev =
+		container_of(core_vdev, struct vfio_fsl_mc_device, vdev);
 	int ret;
 
 	if (!try_module_get(THIS_MODULE))
@@ -161,9 +162,10 @@ static int vfio_fsl_mc_open(void *device_data)
 	return ret;
 }
 
-static void vfio_fsl_mc_release(void *device_data)
+static void vfio_fsl_mc_release(struct vfio_device *core_vdev)
 {
-	struct vfio_fsl_mc_device *vdev = device_data;
+	struct vfio_fsl_mc_device *vdev =
+		container_of(core_vdev, struct vfio_fsl_mc_device, vdev);
 	int ret;
 
 	mutex_lock(&vdev->reflck->lock);
@@ -197,11 +199,12 @@ static void vfio_fsl_mc_release(void *device_data)
 	module_put(THIS_MODULE);
 }
 
-static long vfio_fsl_mc_ioctl(void *device_data, unsigned int cmd,
-			      unsigned long arg)
+static long vfio_fsl_mc_ioctl(struct vfio_device *core_vdev,
+			      unsigned int cmd, unsigned long arg)
 {
 	unsigned long minsz;
-	struct vfio_fsl_mc_device *vdev = device_data;
+	struct vfio_fsl_mc_device *vdev =
+		container_of(core_vdev, struct vfio_fsl_mc_device, vdev);
 	struct fsl_mc_device *mc_dev = vdev->mc_dev;
 
 	switch (cmd) {
@@ -327,10 +330,11 @@ static long vfio_fsl_mc_ioctl(void *device_data, unsigned int cmd,
 	}
 }
 
-static ssize_t vfio_fsl_mc_read(void *device_data, char __user *buf,
+static ssize_t vfio_fsl_mc_read(struct vfio_device *core_vdev, char __user *buf,
 				size_t count, loff_t *ppos)
 {
-	struct vfio_fsl_mc_device *vdev = device_data;
+	struct vfio_fsl_mc_device *vdev =
+		container_of(core_vdev, struct vfio_fsl_mc_device, vdev);
 	unsigned int index = VFIO_FSL_MC_OFFSET_TO_INDEX(*ppos);
 	loff_t off = *ppos & VFIO_FSL_MC_OFFSET_MASK;
 	struct fsl_mc_device *mc_dev = vdev->mc_dev;
@@ -404,10 +408,12 @@ static int vfio_fsl_mc_send_command(void __iomem *ioaddr, uint64_t *cmd_data)
 	return 0;
 }
 
-static ssize_t vfio_fsl_mc_write(void *device_data, const char __user *buf,
-				 size_t count, loff_t *ppos)
+static ssize_t vfio_fsl_mc_write(struct vfio_device *core_vdev,
+				 const char __user *buf, size_t count,
+				 loff_t *ppos)
 {
-	struct vfio_fsl_mc_device *vdev = device_data;
+	struct vfio_fsl_mc_device *vdev =
+		container_of(core_vdev, struct vfio_fsl_mc_device, vdev);
 	unsigned int index = VFIO_FSL_MC_OFFSET_TO_INDEX(*ppos);
 	loff_t off = *ppos & VFIO_FSL_MC_OFFSET_MASK;
 	struct fsl_mc_device *mc_dev = vdev->mc_dev;
@@ -468,9 +474,11 @@ static int vfio_fsl_mc_mmap_mmio(struct vfio_fsl_mc_region region,
 			       size, vma->vm_page_prot);
 }
 
-static int vfio_fsl_mc_mmap(void *device_data, struct vm_area_struct *vma)
+static int vfio_fsl_mc_mmap(struct vfio_device *core_vdev,
+			    struct vm_area_struct *vma)
 {
-	struct vfio_fsl_mc_device *vdev = device_data;
+	struct vfio_fsl_mc_device *vdev =
+		container_of(core_vdev, struct vfio_fsl_mc_device, vdev);
 	struct fsl_mc_device *mc_dev = vdev->mc_dev;
 	unsigned int index;
 
diff --git a/drivers/vfio/mdev/vfio_mdev.c b/drivers/vfio/mdev/vfio_mdev.c
index 4469aaf31b56cb..e7309caa99c71b 100644
--- a/drivers/vfio/mdev/vfio_mdev.c
+++ b/drivers/vfio/mdev/vfio_mdev.c
@@ -25,10 +25,11 @@ struct mdev_vfio_device {
 	struct vfio_device vdev;
 };
 
-static int vfio_mdev_open(void *device_data)
+static int vfio_mdev_open(struct vfio_device *core_vdev)
 {
-	struct mdev_device *mdev = device_data;
+	struct mdev_device *mdev = to_mdev_device(core_vdev->dev);
 	struct mdev_parent *parent = mdev->parent;
+
 	int ret;
 
 	if (unlikely(!parent->ops->open))
@@ -44,9 +45,9 @@ static int vfio_mdev_open(void *device_data)
 	return ret;
 }
 
-static void vfio_mdev_release(void *device_data)
+static void vfio_mdev_release(struct vfio_device *core_vdev)
 {
-	struct mdev_device *mdev = device_data;
+	struct mdev_device *mdev = to_mdev_device(core_vdev->dev);
 	struct mdev_parent *parent = mdev->parent;
 
 	if (likely(parent->ops->release))
@@ -55,10 +56,10 @@ static void vfio_mdev_release(void *device_data)
 	module_put(THIS_MODULE);
 }
 
-static long vfio_mdev_unlocked_ioctl(void *device_data,
+static long vfio_mdev_unlocked_ioctl(struct vfio_device *core_vdev,
 				     unsigned int cmd, unsigned long arg)
 {
-	struct mdev_device *mdev = device_data;
+	struct mdev_device *mdev = to_mdev_device(core_vdev->dev);
 	struct mdev_parent *parent = mdev->parent;
 
 	if (unlikely(!parent->ops->ioctl))
@@ -67,10 +68,10 @@ static long vfio_mdev_unlocked_ioctl(void *device_data,
 	return parent->ops->ioctl(mdev, cmd, arg);
 }
 
-static ssize_t vfio_mdev_read(void *device_data, char __user *buf,
+static ssize_t vfio_mdev_read(struct vfio_device *core_vdev, char __user *buf,
 			      size_t count, loff_t *ppos)
 {
-	struct mdev_device *mdev = device_data;
+	struct mdev_device *mdev = to_mdev_device(core_vdev->dev);
 	struct mdev_parent *parent = mdev->parent;
 
 	if (unlikely(!parent->ops->read))
@@ -79,10 +80,11 @@ static ssize_t vfio_mdev_read(void *device_data, char __user *buf,
 	return parent->ops->read(mdev, buf, count, ppos);
 }
 
-static ssize_t vfio_mdev_write(void *device_data, const char __user *buf,
-			       size_t count, loff_t *ppos)
+static ssize_t vfio_mdev_write(struct vfio_device *core_vdev,
+			       const char __user *buf, size_t count,
+			       loff_t *ppos)
 {
-	struct mdev_device *mdev = device_data;
+	struct mdev_device *mdev = to_mdev_device(core_vdev->dev);
 	struct mdev_parent *parent = mdev->parent;
 
 	if (unlikely(!parent->ops->write))
@@ -91,9 +93,10 @@ static ssize_t vfio_mdev_write(void *device_data, const char __user *buf,
 	return parent->ops->write(mdev, buf, count, ppos);
 }
 
-static int vfio_mdev_mmap(void *device_data, struct vm_area_struct *vma)
+static int vfio_mdev_mmap(struct vfio_device *core_vdev,
+			  struct vm_area_struct *vma)
 {
-	struct mdev_device *mdev = device_data;
+	struct mdev_device *mdev = to_mdev_device(core_vdev->dev);
 	struct mdev_parent *parent = mdev->parent;
 
 	if (unlikely(!parent->ops->mmap))
@@ -102,9 +105,9 @@ static int vfio_mdev_mmap(void *device_data, struct vm_area_struct *vma)
 	return parent->ops->mmap(mdev, vma);
 }
 
-static void vfio_mdev_request(void *device_data, unsigned int count)
+static void vfio_mdev_request(struct vfio_device *core_vdev, unsigned int count)
 {
-	struct mdev_device *mdev = device_data;
+	struct mdev_device *mdev = to_mdev_device(core_vdev->dev);
 	struct mdev_parent *parent = mdev->parent;
 
 	if (parent->ops->request)
diff --git a/drivers/vfio/pci/vfio_pci.c b/drivers/vfio/pci/vfio_pci.c
index fae573c6f86bdf..af5696a96a76e0 100644
--- a/drivers/vfio/pci/vfio_pci.c
+++ b/drivers/vfio/pci/vfio_pci.c
@@ -553,9 +553,10 @@ static void vfio_pci_vf_token_user_add(struct vfio_pci_device *vdev, int val)
 	vfio_device_put(pf_dev);
 }
 
-static void vfio_pci_release(void *device_data)
+static void vfio_pci_release(struct vfio_device *core_vdev)
 {
-	struct vfio_pci_device *vdev = device_data;
+	struct vfio_pci_device *vdev =
+		container_of(core_vdev, struct vfio_pci_device, vdev);
 
 	mutex_lock(&vdev->reflck->lock);
 
@@ -581,9 +582,10 @@ static void vfio_pci_release(void *device_data)
 	module_put(THIS_MODULE);
 }
 
-static int vfio_pci_open(void *device_data)
+static int vfio_pci_open(struct vfio_device *core_vdev)
 {
-	struct vfio_pci_device *vdev = device_data;
+	struct vfio_pci_device *vdev =
+		container_of(core_vdev, struct vfio_pci_device, vdev);
 	int ret = 0;
 
 	if (!try_module_get(THIS_MODULE))
@@ -797,10 +799,11 @@ struct vfio_devices {
 	int max_index;
 };
 
-static long vfio_pci_ioctl(void *device_data,
+static long vfio_pci_ioctl(struct vfio_device *core_vdev,
 			   unsigned int cmd, unsigned long arg)
 {
-	struct vfio_pci_device *vdev = device_data;
+	struct vfio_pci_device *vdev =
+		container_of(core_vdev, struct vfio_pci_device, vdev);
 	unsigned long minsz;
 
 	if (cmd == VFIO_DEVICE_GET_INFO) {
@@ -1402,11 +1405,10 @@ static long vfio_pci_ioctl(void *device_data,
 	return -ENOTTY;
 }
 
-static ssize_t vfio_pci_rw(void *device_data, char __user *buf,
+static ssize_t vfio_pci_rw(struct vfio_pci_device *vdev, char __user *buf,
 			   size_t count, loff_t *ppos, bool iswrite)
 {
 	unsigned int index = VFIO_PCI_OFFSET_TO_INDEX(*ppos);
-	struct vfio_pci_device *vdev = device_data;
 
 	if (index >= VFIO_PCI_NUM_REGIONS + vdev->num_regions)
 		return -EINVAL;
@@ -1434,22 +1436,28 @@ static ssize_t vfio_pci_rw(void *device_data, char __user *buf,
 	return -EINVAL;
 }
 
-static ssize_t vfio_pci_read(void *device_data, char __user *buf,
+static ssize_t vfio_pci_read(struct vfio_device *core_vdev, char __user *buf,
 			     size_t count, loff_t *ppos)
 {
+	struct vfio_pci_device *vdev =
+		container_of(core_vdev, struct vfio_pci_device, vdev);
+
 	if (!count)
 		return 0;
 
-	return vfio_pci_rw(device_data, buf, count, ppos, false);
+	return vfio_pci_rw(vdev, buf, count, ppos, false);
 }
 
-static ssize_t vfio_pci_write(void *device_data, const char __user *buf,
+static ssize_t vfio_pci_write(struct vfio_device *core_vdev, const char __user *buf,
 			      size_t count, loff_t *ppos)
 {
+	struct vfio_pci_device *vdev =
+		container_of(core_vdev, struct vfio_pci_device, vdev);
+
 	if (!count)
 		return 0;
 
-	return vfio_pci_rw(device_data, (char __user *)buf, count, ppos, true);
+	return vfio_pci_rw(vdev, (char __user *)buf, count, ppos, true);
 }
 
 /* Return 1 on zap and vma_lock acquired, 0 on contention (only with @try) */
@@ -1646,9 +1654,10 @@ static const struct vm_operations_struct vfio_pci_mmap_ops = {
 	.fault = vfio_pci_mmap_fault,
 };
 
-static int vfio_pci_mmap(void *device_data, struct vm_area_struct *vma)
+static int vfio_pci_mmap(struct vfio_device *core_vdev, struct vm_area_struct *vma)
 {
-	struct vfio_pci_device *vdev = device_data;
+	struct vfio_pci_device *vdev =
+		container_of(core_vdev, struct vfio_pci_device, vdev);
 	struct pci_dev *pdev = vdev->pdev;
 	unsigned int index;
 	u64 phys_len, req_len, pgoff, req_start;
@@ -1714,9 +1723,10 @@ static int vfio_pci_mmap(void *device_data, struct vm_area_struct *vma)
 	return 0;
 }
 
-static void vfio_pci_request(void *device_data, unsigned int count)
+static void vfio_pci_request(struct vfio_device *core_vdev, unsigned int count)
 {
-	struct vfio_pci_device *vdev = device_data;
+	struct vfio_pci_device *vdev =
+		container_of(core_vdev, struct vfio_pci_device, vdev);
 	struct pci_dev *pdev = vdev->pdev;
 
 	mutex_lock(&vdev->igate);
@@ -1830,9 +1840,10 @@ static int vfio_pci_validate_vf_token(struct vfio_pci_device *vdev,
 
 #define VF_TOKEN_ARG "vf_token="
 
-static int vfio_pci_match(void *device_data, char *buf)
+static int vfio_pci_match(struct vfio_device *core_vdev, char *buf)
 {
-	struct vfio_pci_device *vdev = device_data;
+	struct vfio_pci_device *vdev =
+		container_of(core_vdev, struct vfio_pci_device, vdev);
 	bool vf_token = false;
 	uuid_t uuid;
 	int ret;
diff --git a/drivers/vfio/platform/vfio_platform_common.c b/drivers/vfio/platform/vfio_platform_common.c
index 6eb749250ee41c..f5f6b537084a67 100644
--- a/drivers/vfio/platform/vfio_platform_common.c
+++ b/drivers/vfio/platform/vfio_platform_common.c
@@ -218,9 +218,10 @@ static int vfio_platform_call_reset(struct vfio_platform_device *vdev,
 	return -EINVAL;
 }
 
-static void vfio_platform_release(void *device_data)
+static void vfio_platform_release(struct vfio_device *core_vdev)
 {
-	struct vfio_platform_device *vdev = device_data;
+	struct vfio_platform_device *vdev =
+		container_of(core_vdev, struct vfio_platform_device, vdev);
 
 	mutex_lock(&driver_lock);
 
@@ -244,9 +245,10 @@ static void vfio_platform_release(void *device_data)
 	module_put(vdev->parent_module);
 }
 
-static int vfio_platform_open(void *device_data)
+static int vfio_platform_open(struct vfio_device *core_vdev)
 {
-	struct vfio_platform_device *vdev = device_data;
+	struct vfio_platform_device *vdev =
+		container_of(core_vdev, struct vfio_platform_device, vdev);
 	int ret;
 
 	if (!try_module_get(vdev->parent_module))
@@ -293,10 +295,12 @@ static int vfio_platform_open(void *device_data)
 	return ret;
 }
 
-static long vfio_platform_ioctl(void *device_data,
+static long vfio_platform_ioctl(struct vfio_device *core_vdev,
 				unsigned int cmd, unsigned long arg)
 {
-	struct vfio_platform_device *vdev = device_data;
+	struct vfio_platform_device *vdev =
+		container_of(core_vdev, struct vfio_platform_device, vdev);
+
 	unsigned long minsz;
 
 	if (cmd == VFIO_DEVICE_GET_INFO) {
@@ -455,10 +459,11 @@ static ssize_t vfio_platform_read_mmio(struct vfio_platform_region *reg,
 	return -EFAULT;
 }
 
-static ssize_t vfio_platform_read(void *device_data, char __user *buf,
-				  size_t count, loff_t *ppos)
+static ssize_t vfio_platform_read(struct vfio_device *core_vdev,
+				  char __user *buf, size_t count, loff_t *ppos)
 {
-	struct vfio_platform_device *vdev = device_data;
+	struct vfio_platform_device *vdev =
+		container_of(core_vdev, struct vfio_platform_device, vdev);
 	unsigned int index = VFIO_PLATFORM_OFFSET_TO_INDEX(*ppos);
 	loff_t off = *ppos & VFIO_PLATFORM_OFFSET_MASK;
 
@@ -531,10 +536,11 @@ static ssize_t vfio_platform_write_mmio(struct vfio_platform_region *reg,
 	return -EFAULT;
 }
 
-static ssize_t vfio_platform_write(void *device_data, const char __user *buf,
+static ssize_t vfio_platform_write(struct vfio_device *core_vdev, const char __user *buf,
 				   size_t count, loff_t *ppos)
 {
-	struct vfio_platform_device *vdev = device_data;
+	struct vfio_platform_device *vdev =
+		container_of(core_vdev, struct vfio_platform_device, vdev);
 	unsigned int index = VFIO_PLATFORM_OFFSET_TO_INDEX(*ppos);
 	loff_t off = *ppos & VFIO_PLATFORM_OFFSET_MASK;
 
@@ -573,9 +579,10 @@ static int vfio_platform_mmap_mmio(struct vfio_platform_region region,
 			       req_len, vma->vm_page_prot);
 }
 
-static int vfio_platform_mmap(void *device_data, struct vm_area_struct *vma)
+static int vfio_platform_mmap(struct vfio_device *core_vdev, struct vm_area_struct *vma)
 {
-	struct vfio_platform_device *vdev = device_data;
+	struct vfio_platform_device *vdev =
+		container_of(core_vdev, struct vfio_platform_device, vdev);
 	unsigned int index;
 
 	index = vma->vm_pgoff >> (VFIO_PLATFORM_OFFSET_SHIFT - PAGE_SHIFT);
diff --git a/drivers/vfio/vfio.c b/drivers/vfio/vfio.c
index 2d6d7cc1d1ebf9..01de47d1810b6b 100644
--- a/drivers/vfio/vfio.c
+++ b/drivers/vfio/vfio.c
@@ -832,7 +832,7 @@ static struct vfio_device *vfio_device_get_from_name(struct vfio_group *group,
 		int ret;
 
 		if (it->ops->match) {
-			ret = it->ops->match(it->device_data, buf);
+			ret = it->ops->match(it, buf);
 			if (ret < 0) {
 				device = ERR_PTR(ret);
 				break;
@@ -893,7 +893,7 @@ void vfio_unregister_group_dev(struct vfio_device *device)
 	rc = try_wait_for_completion(&device->comp);
 	while (rc <= 0) {
 		if (device->ops->request)
-			device->ops->request(device->device_data, i++);
+			device->ops->request(device, i++);
 
 		if (interrupted) {
 			rc = wait_for_completion_timeout(&device->comp,
@@ -1379,7 +1379,7 @@ static int vfio_group_get_device_fd(struct vfio_group *group, char *buf)
 	if (IS_ERR(device))
 		return PTR_ERR(device);
 
-	ret = device->ops->open(device->device_data);
+	ret = device->ops->open(device);
 	if (ret) {
 		vfio_device_put(device);
 		return ret;
@@ -1391,7 +1391,7 @@ static int vfio_group_get_device_fd(struct vfio_group *group, char *buf)
 	 */
 	ret = get_unused_fd_flags(O_CLOEXEC);
 	if (ret < 0) {
-		device->ops->release(device->device_data);
+		device->ops->release(device);
 		vfio_device_put(device);
 		return ret;
 	}
@@ -1401,7 +1401,7 @@ static int vfio_group_get_device_fd(struct vfio_group *group, char *buf)
 	if (IS_ERR(filep)) {
 		put_unused_fd(ret);
 		ret = PTR_ERR(filep);
-		device->ops->release(device->device_data);
+		device->ops->release(device);
 		vfio_device_put(device);
 		return ret;
 	}
@@ -1558,7 +1558,7 @@ static int vfio_device_fops_release(struct inode *inode, struct file *filep)
 {
 	struct vfio_device *device = filep->private_data;
 
-	device->ops->release(device->device_data);
+	device->ops->release(device);
 
 	vfio_group_try_dissolve_container(device->group);
 
@@ -1575,7 +1575,7 @@ static long vfio_device_fops_unl_ioctl(struct file *filep,
 	if (unlikely(!device->ops->ioctl))
 		return -EINVAL;
 
-	return device->ops->ioctl(device->device_data, cmd, arg);
+	return device->ops->ioctl(device, cmd, arg);
 }
 
 static ssize_t vfio_device_fops_read(struct file *filep, char __user *buf,
@@ -1586,7 +1586,7 @@ static ssize_t vfio_device_fops_read(struct file *filep, char __user *buf,
 	if (unlikely(!device->ops->read))
 		return -EINVAL;
 
-	return device->ops->read(device->device_data, buf, count, ppos);
+	return device->ops->read(device, buf, count, ppos);
 }
 
 static ssize_t vfio_device_fops_write(struct file *filep,
@@ -1598,7 +1598,7 @@ static ssize_t vfio_device_fops_write(struct file *filep,
 	if (unlikely(!device->ops->write))
 		return -EINVAL;
 
-	return device->ops->write(device->device_data, buf, count, ppos);
+	return device->ops->write(device, buf, count, ppos);
 }
 
 static int vfio_device_fops_mmap(struct file *filep, struct vm_area_struct *vma)
@@ -1608,7 +1608,7 @@ static int vfio_device_fops_mmap(struct file *filep, struct vm_area_struct *vma)
 	if (unlikely(!device->ops->mmap))
 		return -EINVAL;
 
-	return device->ops->mmap(device->device_data, vma);
+	return device->ops->mmap(device, vma);
 }
 
 static const struct file_operations vfio_device_fops = {
diff --git a/include/linux/vfio.h b/include/linux/vfio.h
index 4995faf51efeae..784c34c0a28763 100644
--- a/include/linux/vfio.h
+++ b/include/linux/vfio.h
@@ -44,17 +44,17 @@ struct vfio_device {
  */
 struct vfio_device_ops {
 	char	*name;
-	int	(*open)(void *device_data);
-	void	(*release)(void *device_data);
-	ssize_t	(*read)(void *device_data, char __user *buf,
+	int	(*open)(struct vfio_device *vdev);
+	void	(*release)(struct vfio_device *vdev);
+	ssize_t	(*read)(struct vfio_device *vdev, char __user *buf,
 			size_t count, loff_t *ppos);
-	ssize_t	(*write)(void *device_data, const char __user *buf,
+	ssize_t	(*write)(struct vfio_device *vdev, const char __user *buf,
 			 size_t count, loff_t *size);
-	long	(*ioctl)(void *device_data, unsigned int cmd,
+	long	(*ioctl)(struct vfio_device *vdev, unsigned int cmd,
 			 unsigned long arg);
-	int	(*mmap)(void *device_data, struct vm_area_struct *vma);
-	void	(*request)(void *device_data, unsigned int count);
-	int	(*match)(void *device_data, char *buf);
+	int	(*mmap)(struct vfio_device *vdev, struct vm_area_struct *vma);
+	void	(*request)(struct vfio_device *vdev, unsigned int count);
+	int	(*match)(struct vfio_device *vdev, char *buf);
 };
 
 extern struct iommu_group *vfio_iommu_group_get(struct device *dev);

From patchwork Tue Mar  9 21:38:51 2021
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Jason Gunthorpe <jgg@nvidia.com>
X-Patchwork-Id: 12126597
Return-Path: <kvm-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-16.0 required=3.0 tests=BAYES_00,DKIMWL_WL_HIGH,
	DKIM_SIGNED,DKIM_VALID,DKIM_VALID_AU,HEADER_FROM_DIFFERENT_DOMAINS,
	INCLUDES_CR_TRAILER,INCLUDES_PATCH,MAILING_LIST_MULTI,MSGID_FROM_MTA_HEADER,
	SPF_HELO_NONE,SPF_PASS autolearn=ham autolearn_force=no version=3.4.0
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 00C46C4360C
	for <kvm@archiver.kernel.org>; Tue,  9 Mar 2021 21:39:46 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by mail.kernel.org (Postfix) with ESMTP id DF95964FAD
	for <kvm@archiver.kernel.org>; Tue,  9 Mar 2021 21:39:45 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S232091AbhCIVjL (ORCPT <rfc822;kvm@archiver.kernel.org>);
        Tue, 9 Mar 2021 16:39:11 -0500
Received: from mail-bn8nam12on2044.outbound.protection.outlook.com
 ([40.107.237.44]:47776
        "EHLO NAM12-BN8-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S232039AbhCIVjB (ORCPT <rfc822;kvm@vger.kernel.org>);
        Tue, 9 Mar 2021 16:39:01 -0500
ARC-Seal: i=1; a=rsa-sha256; s=arcselector9901; d=microsoft.com; cv=none;
 b=iZkmL7T7d8xQwtvZ4zUrFT0uXWZXTgw1FgDF5xpUiVlLUGmqWj8h01iYhDNBELnuZIBcIZHs0ec/hBO2rUzM+yaPJ5f6ZOq9sBpMlInMLOZ6f9PQi9W/mYj3HzWQGpM/YJwlLrBHE4gGJIE8cATU11h0AztywSDUIctk0/l5z/cccBVVx6eBQkrt7POQ1+JkwVs924L9zTEZB8fjCTn5mNXv1WnjG/cUD2LCOoRPGNJjKMEJ+q5OtAGq6QlDOIlgCqlSlwekh9G54C3UCGk74dAE2VXF9wu1r53vYYyGEZ5n2MD6hxhh8P4FEYNcErhKA/8yjeaY6iknYt1M8ilqpA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector9901;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=g6Wg67zR2Nd9NFi7Dy7BBNJJIXLR52eRUOecS05SWyM=;
 b=WIln/iEYAJQUiAWWDmkD27nNFg9N4DYyupUtbWEGj5UFH3BMxVEe3spd2b1MOY1iv1xkrAbwI05WFuaTZ5ReIVZukyWZSj3enfBjveNWaabbOxRecZ3J5Z3GWcIP9SCHkYzXPYbB1wx7b0y8CEpEihLxikdDVtL4QlwHCM6zBbTCCapSXyEax9xZYZETe1H+zqMB3TLTzrU8BsEPZXvQXuwalr+Sct2lEpLPMwIqyEpCoZ9WDafD6SoIpDx5fRg9bScbMxmShH73hH5eWM0AVRJlJdEY06BD9lTVOLyFY/CZlvRLHzb4UnoLRvlgMJE7e46mkAVvEhfmT+FlahUhPA==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=nvidia.com; dmarc=pass action=none header.from=nvidia.com;
 dkim=pass header.d=nvidia.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=Nvidia.com;
 s=selector2;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=g6Wg67zR2Nd9NFi7Dy7BBNJJIXLR52eRUOecS05SWyM=;
 b=cVK7Yy709gE2erhRHrRMvESwZSITgTeOMKDa6oFhGkSuoPyNVl3gwakXrCFl7YhffPYTNfJzFvdnteRhQVeof9tADWh60Us6MUAMgQ2rnqXJx3+UomLGiYxQLHrlcY2FZyPgAYAN8SgyvMFV1PIjwRMgi/0Zz3DwtgNijDV1IS0h7JbOmoIhCT/PXalrdOyeDxPrH9xMYBAv7qvdBVr/ue1MwNJUJOH7fGZ/6AS0K+e1p1KZvWMji4qm+ltPiQPLxycGEHgQlXwNzlIr1jFKZV/nXDoF3oV2e89quAV2ncp8B+6qgpSBpuWDeUUR//p4D9apw42DmWJGfmmGVRya0A==
Authentication-Results: redhat.com; dkim=none (message not signed)
 header.d=none;redhat.com; dmarc=none action=none header.from=nvidia.com;
Received: from DM6PR12MB3834.namprd12.prod.outlook.com (2603:10b6:5:14a::12)
 by DM5PR12MB1243.namprd12.prod.outlook.com (2603:10b6:3:74::22) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.3912.17; Tue, 9 Mar
 2021 21:38:57 +0000
Received: from DM6PR12MB3834.namprd12.prod.outlook.com
 ([fe80::1c62:7fa3:617b:ab87]) by DM6PR12MB3834.namprd12.prod.outlook.com
 ([fe80::1c62:7fa3:617b:ab87%6]) with mapi id 15.20.3912.027; Tue, 9 Mar 2021
 21:38:57 +0000
From: Jason Gunthorpe <jgg@nvidia.com>
To: Alex Williamson <alex.williamson@redhat.com>,
        Cornelia Huck <cohuck@redhat.com>, kvm@vger.kernel.org
Cc: "Raj, Ashok" <ashok.raj@intel.com>,
        Dan Williams <dan.j.williams@intel.com>,
        Daniel Vetter <daniel@ffwll.ch>,
        Christoph Hellwig <hch@lst.de>,
        Leon Romanovsky <leonro@nvidia.com>,
        Max Gurtovoy <mgurtovoy@nvidia.com>,
        Tarun Gupta <targupta@nvidia.com>
Subject: [PATCH 09/10] vfio/pci: Replace uses of vfio_device_data() with
 container_of
Date: Tue,  9 Mar 2021 17:38:51 -0400
Message-Id: <9-v1-7355d38b9344+17481-vfio1_jgg@nvidia.com>
In-Reply-To: <0-v1-7355d38b9344+17481-vfio1_jgg@nvidia.com>
References: 
X-Originating-IP: [142.162.115.133]
X-ClientProxiedBy: BL0PR0102CA0048.prod.exchangelabs.com
 (2603:10b6:208:25::25) To DM6PR12MB3834.namprd12.prod.outlook.com
 (2603:10b6:5:14a::12)
MIME-Version: 1.0
X-MS-Exchange-MessageSentRepresentingType: 1
Received: from mlx.ziepe.ca (142.162.115.133) by
 BL0PR0102CA0048.prod.exchangelabs.com (2603:10b6:208:25::25) with Microsoft
 SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.3912.17 via Frontend
 Transport; Tue, 9 Mar 2021 21:38:56 +0000
Received: from jgg by mlx with local (Exim 4.94)        (envelope-from
 <jgg@nvidia.com>)        id 1lJk44-00AVJA-Vg; Tue, 09 Mar 2021 17:38:52 -0400
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: 4bde2340-025c-428d-f928-08d8e343be41
X-MS-TrafficTypeDiagnostic: DM5PR12MB1243:
X-MS-Exchange-Transport-Forked: True
X-Microsoft-Antispam-PRVS: 
 <DM5PR12MB1243AB2ADB66EC62AF7918B3C2929@DM5PR12MB1243.namprd12.prod.outlook.com>
X-MS-Oob-TLC-OOBClassifiers: OLM:9508;
X-MS-Exchange-SenderADCheck: 1
X-Microsoft-Antispam: BCL:0;
X-Microsoft-Antispam-Message-Info: 
 69AKxiXlP4CkewChi+LUqq8gkNC7zfN2dRnXtGnjZQpmMnmvfeZd2bkpRY3UUFURErEX1GwawbvhwDTm52amdThDUUAeShn8IKpJP7mDkaQLolkB/H9dZdoM/5KS+mHKu5KmmQUbZdCtEOhYnkyu495p0z2IBX361+DTzcwVsU9sJJvbjU99Z4Pke1iF5diH/EtIkR/VKZMXvHn2TOEvZ0upvPUZ+TYQm8FoMCOd4qFCxYP0x4TmdZhwhe45X9HeSLkBGAXqsGRiFJzPDQ1AWbFrd4hQcmc1+Hla1zDFn/rB/GMNohUHSQRGP4BqBaAUup924CmkfTrnJE0uLDYkNljeUEpyvAdcxPr9Ad1QX+DNIyXaeDidnCC6H+MnaaJpV+7W1yAz7j5spwL95zaIo3m/Ac7blzHKvGQO7MjRQK9pOPK5T3GKjDX7itkPELrP9TA8z8+eCIsgI+yRiNDfe7k3/h2uuFrWAmEqgxPIBc0QX1cp9VpbIvEbTZDMZSoswXE8vpjXRl0ZJMbl/lIVqVPRXKylz51K6HhNyUqvOEc06XIr7tJUbkaz9fFqTkqa
X-Forefront-Antispam-Report: 
 CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB3834.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(4636009)(39860400002)(366004)(396003)(376002)(136003)(346002)(2616005)(83380400001)(426003)(66556008)(9786002)(66476007)(9746002)(107886003)(66946007)(8936002)(186003)(2906002)(86362001)(8676002)(26005)(36756003)(54906003)(4326008)(316002)(5660300002)(110136005)(478600001)(4216001);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData: 
 9l+F7Gt9csU5i0SqcQutmvyUQ1cDYS0IqEL0Hrc3B5TPmFMvwZNcCqOaUQPXJ7qe/U4NtxyVgaDEZJWmyQyxNe2zxjSAzxPwWm1epjIF2A5a0CtqT/mTjL9be41961JLrZjzZqjGkINX45rr2Z+SCk3gQikxYCdsy+ZhtW8q7eYODgCJqYwXXGgMU9qtjpoQ0vNMqboinPEqD+Rqyntc5zAQNZ0I51rGe+VuLk7XpJEOQlny01Dag22J5YjDq1e7+LTI0Ana4Bvse2UUhG4GH4XQVI+i7cDOxsk0k/h70bUqh6KLo9Z9B2Q2K1lvquSbm4kFVUxslq+1e0IXWcJAhAXRD4IoiT5dcCDnla2o3JrC2es6ROOGPbIepW+tFhgx8VwkCC5kzJIOPeGPXTRUYCP4xa5pcQxeo4OL6bcm1G3U4xqZpyCqXIwhnUb/3NAUH1xxzDP0bQP3gDaF+W1rsvmJlln1XnFHJCTlqMemedeaQr4bbIIu766dgDeOV/U8CHtS56b6e3ZovryCUQkeA/eDInpAdbCokSN4INyl9nY5iAWg60RE8cyUqtLHhyaMiWGpES/UV7zcZGJk0z7Vgd9owyZsB8DjvAWWf1mkNcGbrIhCgCVQiafPFraiETSjAhEf54rBp6GTlsF3Wn9GVwOH2g2j22DdYgrcm+pbQyl0MBByxIWp4/AZkcG5Q01hgTfr84dmkP42Xn1r/WWU3a6XQDVSe7u/j7414mX7yc4i3+g6T+cG58a0/n9sFXxZBG/5NL6zGkKDV5qZFQtmBLH6pXtf2s2Nv52EeILvKCnxawxGmh1z6EJmqDFkjVpC514nh4bOQigKt6L7cVWKrqcRB7WiYAWMRaj3VcuVGwqXPJwRhf/1Vfns9BjprXku+OEvLrVIX5LgMmiG8jdMsd2DD9OWIdrZ6spa7R/hyM9jiPQEbCK3jdaOAjrIxGo9kXuu7G1vTLNe6cbZ/VR82Z+/854lmuEiGfAQNHLY5wBjFCdp84RWWdf/w1WPwpYxo7J54Oo/aA9qDYQwtMFKVsJWLRcOh4jzAUYBxBJdX+ZR6aBWlRreP3K6IsTmPKLgYH/PkQ/mk2YpPMd6mLDVhs2bxzeTK79iENpAPjkUVosj5jmyvFbFwF4XZpoYiiSSn+EgnM1fHr42gsNFRz2tOk+H5oDhXovd0e8ogw56p6FO5aTIf/evDR1nynpuNP84gaZfCiX2mG6qgJMB0Up1nENwHxFwu3K+jkCw+gLSzW8YsHAXuqwtNutcktFv4UhisY5wldBZ6q+1uX3q7KGKCy3lKil3VUcPUXusloLeTrkUyGdYhXTYi9wOZq++XmD7Lye58iImOpXFRpErIXeTIw==
X-OriginatorOrg: Nvidia.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 4bde2340-025c-428d-f928-08d8e343be41
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB3834.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 09 Mar 2021 21:38:56.9482
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 43083d15-7273-40c1-b7db-39efd9ccc17a
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: 
 7JDseyi3YtrBN83pPoTlikV1GWdgzftxl9ZLaL+41Eq4hnC5PLjZ3mp+mN8DrsBW
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DM5PR12MB1243
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

This tidies a few confused places that think they can have a refcount on
the vfio_device but the device_data could be NULL, that isn't possible by
design.

Most of the change falls out when struct vfio_devices is updated to just
store the struct vfio_pci_device itself. This wasn't possible before
because there was no easy way to get from the 'struct vfio_pci_device' to
the 'struct vfio_device' to put back the refcount.

Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
---
 drivers/vfio/pci/vfio_pci.c | 45 ++++++++++++-------------------------
 1 file changed, 14 insertions(+), 31 deletions(-)

diff --git a/drivers/vfio/pci/vfio_pci.c b/drivers/vfio/pci/vfio_pci.c
index af5696a96a76e0..4b0d60f7602e40 100644
--- a/drivers/vfio/pci/vfio_pci.c
+++ b/drivers/vfio/pci/vfio_pci.c
@@ -534,7 +534,7 @@ static struct vfio_pci_device *get_pf_vdev(struct vfio_pci_device *vdev,
 		return NULL;
 	}
 
-	return vfio_device_data(*pf_dev);
+	return container_of(*pf_dev, struct vfio_pci_device, vdev);
 }
 
 static void vfio_pci_vf_token_user_add(struct vfio_pci_device *vdev, int val)
@@ -794,7 +794,7 @@ int vfio_pci_register_dev_region(struct vfio_pci_device *vdev,
 }
 
 struct vfio_devices {
-	struct vfio_device **devices;
+	struct vfio_pci_device **devices;
 	int cur_index;
 	int max_index;
 };
@@ -1283,9 +1283,7 @@ static long vfio_pci_ioctl(struct vfio_device *core_vdev,
 			goto hot_reset_release;
 
 		for (; mem_idx < devs.cur_index; mem_idx++) {
-			struct vfio_pci_device *tmp;
-
-			tmp = vfio_device_data(devs.devices[mem_idx]);
+			struct vfio_pci_device *tmp = devs.devices[mem_idx];
 
 			ret = down_write_trylock(&tmp->memory_lock);
 			if (!ret) {
@@ -1300,17 +1298,13 @@ static long vfio_pci_ioctl(struct vfio_device *core_vdev,
 
 hot_reset_release:
 		for (i = 0; i < devs.cur_index; i++) {
-			struct vfio_device *device;
-			struct vfio_pci_device *tmp;
-
-			device = devs.devices[i];
-			tmp = vfio_device_data(device);
+			struct vfio_pci_device *tmp = devs.devices[i];
 
 			if (i < mem_idx)
 				up_write(&tmp->memory_lock);
 			else
 				mutex_unlock(&tmp->vma_lock);
-			vfio_device_put(device);
+			vfio_device_put(&tmp->vdev);
 		}
 		kfree(devs.devices);
 
@@ -2094,11 +2088,7 @@ static pci_ers_result_t vfio_pci_aer_err_detected(struct pci_dev *pdev,
 	if (device == NULL)
 		return PCI_ERS_RESULT_DISCONNECT;
 
-	vdev = vfio_device_data(device);
-	if (vdev == NULL) {
-		vfio_device_put(device);
-		return PCI_ERS_RESULT_DISCONNECT;
-	}
+	vdev = container_of(device, struct vfio_pci_device, vdev);
 
 	mutex_lock(&vdev->igate);
 
@@ -2114,7 +2104,6 @@ static pci_ers_result_t vfio_pci_aer_err_detected(struct pci_dev *pdev,
 
 static int vfio_pci_sriov_configure(struct pci_dev *pdev, int nr_virtfn)
 {
-	struct vfio_pci_device *vdev;
 	struct vfio_device *device;
 	int ret = 0;
 
@@ -2127,12 +2116,6 @@ static int vfio_pci_sriov_configure(struct pci_dev *pdev, int nr_virtfn)
 	if (!device)
 		return -ENODEV;
 
-	vdev = vfio_device_data(device);
-	if (!vdev) {
-		vfio_device_put(device);
-		return -ENODEV;
-	}
-
 	if (nr_virtfn == 0)
 		pci_disable_sriov(pdev);
 	else
@@ -2192,7 +2175,7 @@ static int vfio_pci_reflck_find(struct pci_dev *pdev, void *data)
 		return 0;
 	}
 
-	vdev = vfio_device_data(device);
+	vdev = container_of(device, struct vfio_pci_device, vdev);
 
 	if (vdev->reflck) {
 		vfio_pci_reflck_get(vdev->reflck);
@@ -2254,7 +2237,7 @@ static int vfio_pci_get_unused_devs(struct pci_dev *pdev, void *data)
 		return -EBUSY;
 	}
 
-	vdev = vfio_device_data(device);
+	vdev = container_of(device, struct vfio_pci_device, vdev);
 
 	/* Fault if the device is not unused */
 	if (vdev->refcnt) {
@@ -2262,7 +2245,7 @@ static int vfio_pci_get_unused_devs(struct pci_dev *pdev, void *data)
 		return -EBUSY;
 	}
 
-	devs->devices[devs->cur_index++] = device;
+	devs->devices[devs->cur_index++] = vdev;
 	return 0;
 }
 
@@ -2284,7 +2267,7 @@ static int vfio_pci_try_zap_and_vma_lock_cb(struct pci_dev *pdev, void *data)
 		return -EBUSY;
 	}
 
-	vdev = vfio_device_data(device);
+	vdev = container_of(device, struct vfio_pci_device, vdev);
 
 	/*
 	 * Locking multiple devices is prone to deadlock, runaway and
@@ -2295,7 +2278,7 @@ static int vfio_pci_try_zap_and_vma_lock_cb(struct pci_dev *pdev, void *data)
 		return -EBUSY;
 	}
 
-	devs->devices[devs->cur_index++] = device;
+	devs->devices[devs->cur_index++] = vdev;
 	return 0;
 }
 
@@ -2343,7 +2326,7 @@ static void vfio_pci_try_bus_reset(struct vfio_pci_device *vdev)
 
 	/* Does at least one need a reset? */
 	for (i = 0; i < devs.cur_index; i++) {
-		tmp = vfio_device_data(devs.devices[i]);
+		tmp = devs.devices[i];
 		if (tmp->needs_reset) {
 			ret = pci_reset_bus(vdev->pdev);
 			break;
@@ -2352,7 +2335,7 @@ static void vfio_pci_try_bus_reset(struct vfio_pci_device *vdev)
 
 put_devs:
 	for (i = 0; i < devs.cur_index; i++) {
-		tmp = vfio_device_data(devs.devices[i]);
+		tmp = devs.devices[i];
 
 		/*
 		 * If reset was successful, affected devices no longer need
@@ -2368,7 +2351,7 @@ static void vfio_pci_try_bus_reset(struct vfio_pci_device *vdev)
 				vfio_pci_set_power_state(tmp, PCI_D3hot);
 		}
 
-		vfio_device_put(devs.devices[i]);
+		vfio_device_put(&tmp->vdev);
 	}
 
 	kfree(devs.devices);

From patchwork Tue Mar  9 21:38:52 2021
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Jason Gunthorpe <jgg@nvidia.com>
X-Patchwork-Id: 12126581
Return-Path: <kvm-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-16.0 required=3.0 tests=BAYES_00,DKIMWL_WL_HIGH,
	DKIM_SIGNED,DKIM_VALID,DKIM_VALID_AU,HEADER_FROM_DIFFERENT_DOMAINS,
	INCLUDES_CR_TRAILER,INCLUDES_PATCH,MAILING_LIST_MULTI,MSGID_FROM_MTA_HEADER,
	SPF_HELO_NONE,SPF_PASS autolearn=unavailable autolearn_force=no version=3.4.0
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 99CBEC43331
	for <kvm@archiver.kernel.org>; Tue,  9 Mar 2021 21:39:45 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by mail.kernel.org (Postfix) with ESMTP id 7497F64FC1
	for <kvm@archiver.kernel.org>; Tue,  9 Mar 2021 21:39:45 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S232076AbhCIVjK (ORCPT <rfc822;kvm@archiver.kernel.org>);
        Tue, 9 Mar 2021 16:39:10 -0500
Received: from mail-bn8nam12on2044.outbound.protection.outlook.com
 ([40.107.237.44]:47776
        "EHLO NAM12-BN8-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S232038AbhCIVjA (ORCPT <rfc822;kvm@vger.kernel.org>);
        Tue, 9 Mar 2021 16:39:00 -0500
ARC-Seal: i=1; a=rsa-sha256; s=arcselector9901; d=microsoft.com; cv=none;
 b=YNgkj3fkni2VO3QFxiHebaeNUxU8vp91D/j8/Tl9Yu18b+zMzp6DG+68PUZn9IPTHHMxiz28JXAaPbRzhcHzZfwISkVAg/ryYPQfy5lRJfxjd3A1sgKrZkQecg5+1k9kDbckw98gt2ne8c5cSEv3pIyumkNZri+VMcVmdpn4WrEj1Eu2Wa/sg+ccUsc9VOetwK4QnfSQLS43HbogJ+vmms7liFjiUitritgyLW97yyWT82ZnjWtb5FIENQf5IEFvh/N/vGNiUOhBIYGP6p6EfiS504KNEUX8lW7rotOu//Nwf20kNnrMCVYjMwwzf+f4AbFjHkN13JKhN2+o46gLwA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector9901;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=CVocayPatYuE35Y02vSqQhvgQaMyFnNFEQsfelVvCWY=;
 b=WVHStV33iXFWj1pDQuKb9nv+iATRa6pqGOeJoGwCGimuu/0uZYBGQPHDrbP0zwwOMn6v060MJifr4NZU7h6t4jSh5oWAIo9gTw9UMZINZ8uw2Z6oXnYkwWn0WnK2qWaA5GvC40f3GTuBCaP2cxvX5qiY8e04SVTGn0pnaGf2lewh9311/dqH5xrFxqBESFC9ab/gISqsoTEvoEdj2RVCCTXQ6AAwGqbi+X/lut4iCaoiJSw5qJkUVo6WH2BJ/LLJv6c5gedO0Zrr2lYOlTb4Km4AhRJ980sdWfWy3uOYCi+VVjcyp5dPbbZpOSIbP28bxDfNKUxUEDlNj2RtAPN88w==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=nvidia.com; dmarc=pass action=none header.from=nvidia.com;
 dkim=pass header.d=nvidia.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=Nvidia.com;
 s=selector2;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=CVocayPatYuE35Y02vSqQhvgQaMyFnNFEQsfelVvCWY=;
 b=L0ga3+ha28ZCBfTl59AZVEbkIsIphe/GPULO+QokzixgVpQnLiPhguffG4DjLWiV3Mly5Meen2UkFg4LZ/ZAcZJiqKhFtIeqZu2i9aaUC8pKL6ziJijWhv510rLt8VNG8oaeJohMJmdhTQA7SNbAui5leVK+gA8/lazGO0H13WGOUKmFTx9/bb4F8fI/CqjJRViKCVmVbOZVtzBD/Do9+vgDPxKLjNdyJs7UwTaqNAJJBnMqyoMed0LFPoTaVQ6Jk4n7ZspBBA49T8wfafm0jUAperMTUdNKAUs3TtG3QkaB8gYLF5rZvxmx52kv5K0tEUmhq9MzoTZ83/yJWObt9g==
Authentication-Results: redhat.com; dkim=none (message not signed)
 header.d=none;redhat.com; dmarc=none action=none header.from=nvidia.com;
Received: from DM6PR12MB3834.namprd12.prod.outlook.com (2603:10b6:5:14a::12)
 by DM5PR12MB1243.namprd12.prod.outlook.com (2603:10b6:3:74::22) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.3912.17; Tue, 9 Mar
 2021 21:38:57 +0000
Received: from DM6PR12MB3834.namprd12.prod.outlook.com
 ([fe80::1c62:7fa3:617b:ab87]) by DM6PR12MB3834.namprd12.prod.outlook.com
 ([fe80::1c62:7fa3:617b:ab87%6]) with mapi id 15.20.3912.027; Tue, 9 Mar 2021
 21:38:57 +0000
From: Jason Gunthorpe <jgg@nvidia.com>
To: Alex Williamson <alex.williamson@redhat.com>,
        Cornelia Huck <cohuck@redhat.com>,
        Jonathan Corbet <corbet@lwn.net>,
        Diana Craciun <diana.craciun@oss.nxp.com>,
        Eric Auger <eric.auger@redhat.com>, kvm@vger.kernel.org,
        Kirti Wankhede <kwankhede@nvidia.com>,
        linux-doc@vger.kernel.org
Cc: "Raj, Ashok" <ashok.raj@intel.com>,
        Dan Williams <dan.j.williams@intel.com>,
        Daniel Vetter <daniel@ffwll.ch>,
        Christoph Hellwig <hch@lst.de>,
        Leon Romanovsky <leonro@nvidia.com>,
        Max Gurtovoy <mgurtovoy@nvidia.com>,
        Tarun Gupta <targupta@nvidia.com>
Subject: [PATCH 10/10] vfio: Remove device_data from the vfio bus driver API
Date: Tue,  9 Mar 2021 17:38:52 -0400
Message-Id: <10-v1-7355d38b9344+17481-vfio1_jgg@nvidia.com>
In-Reply-To: <0-v1-7355d38b9344+17481-vfio1_jgg@nvidia.com>
References: 
X-Originating-IP: [142.162.115.133]
X-ClientProxiedBy: MN2PR15CA0018.namprd15.prod.outlook.com
 (2603:10b6:208:1b4::31) To DM6PR12MB3834.namprd12.prod.outlook.com
 (2603:10b6:5:14a::12)
MIME-Version: 1.0
X-MS-Exchange-MessageSentRepresentingType: 1
Received: from mlx.ziepe.ca (142.162.115.133) by
 MN2PR15CA0018.namprd15.prod.outlook.com (2603:10b6:208:1b4::31) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.3912.17 via Frontend
 Transport; Tue, 9 Mar 2021 21:38:55 +0000
Received: from jgg by mlx with local (Exim 4.94)        (envelope-from
 <jgg@nvidia.com>)        id 1lJk45-00AVJF-0M; Tue, 09 Mar 2021 17:38:53 -0400
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: 30df3582-3723-418f-1ef4-08d8e343bd57
X-MS-TrafficTypeDiagnostic: DM5PR12MB1243:
X-MS-Exchange-Transport-Forked: True
X-Microsoft-Antispam-PRVS: 
 <DM5PR12MB124306AC2639B865A762812CC2929@DM5PR12MB1243.namprd12.prod.outlook.com>
X-MS-Oob-TLC-OOBClassifiers: OLM:4125;
X-MS-Exchange-SenderADCheck: 1
X-Microsoft-Antispam: BCL:0;
X-Microsoft-Antispam-Message-Info: 
 aaUjN5002+/7+W+LP01Nrsd0Vbwz1IZNrcOaaNitT8tVJYw9eNjHKJ4JG/hsDXWmRsF/3rAtUWQ9uiLWLv0ZRTiKBEdLT+m2+l3m2PNT47vo4226LnUMLKea1doIlcy6fJS7LHqpcLXgYfMX97XhRZ62QKLpfsvL0Xhmnn+l95yuO/GQvEPJmm2DXLLLslywKimFWflKccjhvK5keApJr9P5DnUV1P3W9RK82n1F61cX6Vt5Ch83TnR3Nga0CpixkZDlWMD+Oh8SqXcanKN6pjJ2A3xC8WJU2FxBu65TAEQAWn0BGM1YkiP5q9JnCERxEPee4VaGhxqQQAvJKgU7Y72SpX9qIC0ErOuHKVk4why0AOUEBWHZb+2pmRk/D5BHC3LsJjeQIOr3ggOUYspln13tjYqqoOVW/yGiGPoay13TgRFRi1Kg6Mf4gx5H0y3INp2I3SNU2QVBj2ZpfhU2NgzFr8dDwBU3d3iV4lZQdxQjSLiwUjDgaIVI/93Bs4TfxeyfXmvoFAafbcIUN6QQ0A==
X-Forefront-Antispam-Report: 
 CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB3834.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(4636009)(39860400002)(366004)(396003)(376002)(136003)(346002)(2616005)(83380400001)(426003)(66556008)(9786002)(66476007)(9746002)(107886003)(66946007)(8936002)(186003)(2906002)(86362001)(8676002)(26005)(36756003)(7416002)(54906003)(4326008)(316002)(5660300002)(110136005)(478600001);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData: 
 X5yR7NuU5399vp1zS8UhvMwSKPHrYd1uCCZ/4Z4ggjOZOgwHDxB6Fv0X/LhUUKlcNClsvHDOz1BiGzdSMLIAkDAk4ABz0HeMi6icbWzFxGPi3fFhNx3afkL9Zh2BfcSXpwTiN3lZE1RN7XQUS6c23HpzzJmD5V2UEtseKkem8jO9oYyjlyxrnSC7ypWAUP8mNPp5upnBj1NLNlACg4ejUrDPckGGkUmuh01xa4rh1BGno8H1i8ClzsyGxq+SDMTAyzotfItPL0fJnMdKFS1dg7HMO2XxCgqVt49TO8P9fgV7hOjGHRFm+E2CO14xWOcqXSlOd12WvzFlnp31MjM227z80zku7AM3eI7OyBs/3srhaaUW8SZ60KLUiTRUh7uQW8s9QbwnqAQ/WVOwDN1amTtippl6CsgrAe4xzVUKWM3pW1wRDcjlm22PbRtTxt5E2TRHw2PX23c6cwOoEzVMx8VtVdisWNICXelHbEgi/rWYikoC9a7Z68xxRwhVqs1xNRmqDR+EexoCAacJ3ZRlgK4ba93MiFYsyT1qxSsCQc181DRW7z+xQuJkLCAmOOc9pOk0qFDOWbRty/C0JmMzByo7Jy0q9VqigTiWsBs+ljNJDhrBI7rJx1mIDx5d2EUWGNMQ0nsNXOesGI1VxN+DFsi2UHLUaADShaksYnQHFmMbHZ+TUXs0QwpHINGPeuUSEpe2QNwYyPRr1ESEiI/T3FVBHxcF8jKIiqKr2HpUhXjbWH8Y07BOkqCWMc3DyzxJaN12L5yo2bAcKXJOy1ujdfr+TTqISjTbS1VwqeckCI03uUp8JkEh/MfIppqM6rhC+MfLv7N5pUMuMiOel0f239sceyQ+kskfwKLce9+zwl0v6r8zcgdB/NWY+BtnTyt4PH2Q1/GdM0OkwUiYnGZW7R433EDIOFyBbwHBY2l7KZb/oLAlEONboUicFJ9ExPE2g7cNoO7p+263JCVZUjvluvlH5/6nmJXyvtkPZ1bm6HKAkE7mKOrwDR/zyTnG1fGIKKSTZ+BkLJczfBRojQbFP9xxc8Ijd/jZgVwfbAxm1eV1VFIfZs/Ez5gvwN/k4xvJP8CGyIgoPkSdd4AFPhi4QxRg7qKYKkcGwQ5PvXUrghDJEbPSBk+8r5W172UfqvTyIpGhb6tnnKOQI02QjRuyJukB5/hR6VGVGN/IV69nyc092NU8WRt1D6Gt7yfSkwm/K/Ya4nt8cOoqGiKHOdMUbMPUVIYIyqQHSkRdXyLque1Ir+7uoPPEMa5t1MgAu/TkAvnKsQ34G6MwgRCWbCNmNXblZrlnDyd2nUEmqqUtwty8jphBZ+HC8tvbvZoLB+2kA74bqC3p+ZttWY+dC0OCEA==
X-OriginatorOrg: Nvidia.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 30df3582-3723-418f-1ef4-08d8e343bd57
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB3834.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 09 Mar 2021 21:38:55.6759
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 43083d15-7273-40c1-b7db-39efd9ccc17a
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: 
 jsVejDkgwtByKiFS6yiwmz3gnMhLd35brNmLLUUSR900S8VmSoUg7TY/x7fc795N
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DM5PR12MB1243
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

There are no longer any users, so it can go away. Everything is using
container_of now.

Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
---
 Documentation/driver-api/vfio.rst            |  3 +--
 drivers/vfio/fsl-mc/vfio_fsl_mc.c            |  5 +++--
 drivers/vfio/mdev/vfio_mdev.c                |  2 +-
 drivers/vfio/pci/vfio_pci.c                  |  2 +-
 drivers/vfio/platform/vfio_platform_common.c |  2 +-
 drivers/vfio/vfio.c                          | 12 +-----------
 include/linux/vfio.h                         |  4 +---
 7 files changed, 9 insertions(+), 21 deletions(-)

diff --git a/Documentation/driver-api/vfio.rst b/Documentation/driver-api/vfio.rst
index 3337f337293a32..decc68cb8114ac 100644
--- a/Documentation/driver-api/vfio.rst
+++ b/Documentation/driver-api/vfio.rst
@@ -254,8 +254,7 @@ vfio_unregister_group_dev() respectively::
 
 	void vfio_init_group_dev(struct vfio_device *device,
 				struct device *dev,
-				const struct vfio_device_ops *ops,
-				void *device_data);
+				const struct vfio_device_ops *ops);
 	int vfio_register_group_dev(struct vfio_device *device);
 	void vfio_unregister_group_dev(struct vfio_device *device);
 
diff --git a/drivers/vfio/fsl-mc/vfio_fsl_mc.c b/drivers/vfio/fsl-mc/vfio_fsl_mc.c
index 74a5de1b791934..07f636b9f6b472 100644
--- a/drivers/vfio/fsl-mc/vfio_fsl_mc.c
+++ b/drivers/vfio/fsl-mc/vfio_fsl_mc.c
@@ -75,7 +75,8 @@ static int vfio_fsl_mc_reflck_attach(struct vfio_fsl_mc_device *vdev)
 			goto unlock;
 		}
 
-		cont_vdev = vfio_device_data(device);
+		cont_vdev =
+			container_of(device, struct vfio_fsl_mc_device, vdev);
 		if (!cont_vdev || !cont_vdev->reflck) {
 			vfio_device_put(device);
 			ret = -ENODEV;
@@ -614,7 +615,7 @@ static int vfio_fsl_mc_probe(struct fsl_mc_device *mc_dev)
 		goto out_group_put;
 	}
 
-	vfio_init_group_dev(&vdev->vdev, dev, &vfio_fsl_mc_ops, vdev);
+	vfio_init_group_dev(&vdev->vdev, dev, &vfio_fsl_mc_ops);
 	mutex_init(&vdev->igate);
 	vdev->mc_dev = mc_dev;
 
diff --git a/drivers/vfio/mdev/vfio_mdev.c b/drivers/vfio/mdev/vfio_mdev.c
index e7309caa99c71b..71bd28f976e5af 100644
--- a/drivers/vfio/mdev/vfio_mdev.c
+++ b/drivers/vfio/mdev/vfio_mdev.c
@@ -138,7 +138,7 @@ static int vfio_mdev_probe(struct device *dev)
 	if (!mvdev)
 		return -ENOMEM;
 
-	vfio_init_group_dev(&mvdev->vdev, &mdev->dev, &vfio_mdev_dev_ops, mdev);
+	vfio_init_group_dev(&mvdev->vdev, &mdev->dev, &vfio_mdev_dev_ops);
 	ret = vfio_register_group_dev(&mvdev->vdev);
 	if (ret) {
 		kfree(mvdev);
diff --git a/drivers/vfio/pci/vfio_pci.c b/drivers/vfio/pci/vfio_pci.c
index 4b0d60f7602e40..3c2497ba79460c 100644
--- a/drivers/vfio/pci/vfio_pci.c
+++ b/drivers/vfio/pci/vfio_pci.c
@@ -1962,7 +1962,7 @@ static int vfio_pci_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 		goto out_group_put;
 	}
 
-	vfio_init_group_dev(&vdev->vdev, &pdev->dev, &vfio_pci_ops, vdev);
+	vfio_init_group_dev(&vdev->vdev, &pdev->dev, &vfio_pci_ops);
 	vdev->pdev = pdev;
 	vdev->irq_type = VFIO_PCI_NUM_IRQS;
 	mutex_init(&vdev->igate);
diff --git a/drivers/vfio/platform/vfio_platform_common.c b/drivers/vfio/platform/vfio_platform_common.c
index f5f6b537084a67..361e5b57e36932 100644
--- a/drivers/vfio/platform/vfio_platform_common.c
+++ b/drivers/vfio/platform/vfio_platform_common.c
@@ -666,7 +666,7 @@ int vfio_platform_probe_common(struct vfio_platform_device *vdev,
 	struct iommu_group *group;
 	int ret;
 
-	vfio_init_group_dev(&vdev->vdev, dev, &vfio_platform_ops, vdev);
+	vfio_init_group_dev(&vdev->vdev, dev, &vfio_platform_ops);
 
 	ret = vfio_platform_acpi_probe(vdev, dev);
 	if (ret)
diff --git a/drivers/vfio/vfio.c b/drivers/vfio/vfio.c
index 01de47d1810b6b..39ea77557ba0c4 100644
--- a/drivers/vfio/vfio.c
+++ b/drivers/vfio/vfio.c
@@ -741,12 +741,11 @@ static int vfio_iommu_group_notifier(struct notifier_block *nb,
  * VFIO driver API
  */
 void vfio_init_group_dev(struct vfio_device *device, struct device *dev,
-			 const struct vfio_device_ops *ops, void *device_data)
+			 const struct vfio_device_ops *ops)
 {
 	init_completion(&device->comp);
 	device->dev = dev;
 	device->ops = ops;
-	device->device_data = device_data;
 }
 EXPORT_SYMBOL_GPL(vfio_init_group_dev);
 
@@ -851,15 +850,6 @@ static struct vfio_device *vfio_device_get_from_name(struct vfio_group *group,
 	return device;
 }
 
-/*
- * Caller must hold a reference to the vfio_device
- */
-void *vfio_device_data(struct vfio_device *device)
-{
-	return device->device_data;
-}
-EXPORT_SYMBOL_GPL(vfio_device_data);
-
 /*
  * Decrement the device reference count and wait for the device to be
  * removed.  Open file descriptors for the device... */
diff --git a/include/linux/vfio.h b/include/linux/vfio.h
index 784c34c0a28763..a2c5b30e1763ba 100644
--- a/include/linux/vfio.h
+++ b/include/linux/vfio.h
@@ -24,7 +24,6 @@ struct vfio_device {
 	refcount_t refcount;
 	struct completion comp;
 	struct list_head group_next;
-	void *device_data;
 };
 
 /**
@@ -61,12 +60,11 @@ extern struct iommu_group *vfio_iommu_group_get(struct device *dev);
 extern void vfio_iommu_group_put(struct iommu_group *group, struct device *dev);
 
 void vfio_init_group_dev(struct vfio_device *device, struct device *dev,
-			 const struct vfio_device_ops *ops, void *device_data);
+			 const struct vfio_device_ops *ops);
 int vfio_register_group_dev(struct vfio_device *device);
 void vfio_unregister_group_dev(struct vfio_device *device);
 extern struct vfio_device *vfio_device_get_from_dev(struct device *dev);
 extern void vfio_device_put(struct vfio_device *device);
-extern void *vfio_device_data(struct vfio_device *device);
 
 /* events for the backend driver notify callback */
 enum vfio_iommu_notify_type {
